// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package model

import (
	"fmt"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type User struct {
	Id            int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Username      string  `thrift:"username,2,required" frugal:"2,required,string" json:"username"`
	Avatar        *string `thrift:"avatar,4,optional" frugal:"4,optional,string" json:"avatar,omitempty"`
	FollowCount   *int64  `thrift:"followCount,6,optional" frugal:"6,optional,i64" json:"followCount,omitempty"`
	FollowerCount *int64  `thrift:"followerCount,7,optional" frugal:"7,optional,i64" json:"followerCount,omitempty"`
	IsFollow      *bool   `thrift:"isFollow,8,optional" frugal:"8,optional,bool" json:"isFollow,omitempty"`
	LikeCount     *int64  `thrift:"likeCount,9,optional" frugal:"9,optional,i64" json:"likeCount,omitempty"`
	VideoCount    *int64  `thrift:"videoCount,10,optional" frugal:"10,optional,i64" json:"videoCount,omitempty"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v int64) {
	return p.Id
}

func (p *User) GetUsername() (v string) {
	return p.Username
}

var User_Avatar_DEFAULT string

func (p *User) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return User_Avatar_DEFAULT
	}
	return *p.Avatar
}

var User_FollowCount_DEFAULT int64

func (p *User) GetFollowCount() (v int64) {
	if !p.IsSetFollowCount() {
		return User_FollowCount_DEFAULT
	}
	return *p.FollowCount
}

var User_FollowerCount_DEFAULT int64

func (p *User) GetFollowerCount() (v int64) {
	if !p.IsSetFollowerCount() {
		return User_FollowerCount_DEFAULT
	}
	return *p.FollowerCount
}

var User_IsFollow_DEFAULT bool

func (p *User) GetIsFollow() (v bool) {
	if !p.IsSetIsFollow() {
		return User_IsFollow_DEFAULT
	}
	return *p.IsFollow
}

var User_LikeCount_DEFAULT int64

func (p *User) GetLikeCount() (v int64) {
	if !p.IsSetLikeCount() {
		return User_LikeCount_DEFAULT
	}
	return *p.LikeCount
}

var User_VideoCount_DEFAULT int64

func (p *User) GetVideoCount() (v int64) {
	if !p.IsSetVideoCount() {
		return User_VideoCount_DEFAULT
	}
	return *p.VideoCount
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetAvatar(val *string) {
	p.Avatar = val
}
func (p *User) SetFollowCount(val *int64) {
	p.FollowCount = val
}
func (p *User) SetFollowerCount(val *int64) {
	p.FollowerCount = val
}
func (p *User) SetIsFollow(val *bool) {
	p.IsFollow = val
}
func (p *User) SetLikeCount(val *int64) {
	p.LikeCount = val
}
func (p *User) SetVideoCount(val *int64) {
	p.VideoCount = val
}

func (p *User) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *User) IsSetFollowCount() bool {
	return p.FollowCount != nil
}

func (p *User) IsSetFollowerCount() bool {
	return p.FollowerCount != nil
}

func (p *User) IsSetIsFollow() bool {
	return p.IsFollow != nil
}

func (p *User) IsSetLikeCount() bool {
	return p.LikeCount != nil
}

func (p *User) IsSetVideoCount() bool {
	return p.VideoCount != nil
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1:  "id",
	2:  "username",
	4:  "avatar",
	6:  "followCount",
	7:  "followerCount",
	8:  "isFollow",
	9:  "likeCount",
	10: "videoCount",
}

type Video struct {
	Id            int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	AuthorId      int64   `thrift:"authorId,2,required" frugal:"2,required,i64" json:"authorId"`
	Title         string  `thrift:"title,3,required" frugal:"3,required,string" json:"title"`
	PlayUrl       string  `thrift:"playUrl,4,required" frugal:"4,required,string" json:"playUrl"`
	CoverUrl      string  `thrift:"coverUrl,5,required" frugal:"5,required,string" json:"coverUrl"`
	FavoriteCount *int64  `thrift:"favoriteCount,6,optional" frugal:"6,optional,i64" json:"favoriteCount,omitempty"`
	CommentCount  *int64  `thrift:"commentCount,7,optional" frugal:"7,optional,i64" json:"commentCount,omitempty"`
	IsFavorite    *bool   `thrift:"isFavorite,8,optional" frugal:"8,optional,bool" json:"isFavorite,omitempty"`
	Author        *User   `thrift:"author,9,optional" frugal:"9,optional,User" json:"author,omitempty"`
	Description   *string `thrift:"description,10,optional" frugal:"10,optional,string" json:"description,omitempty"`
	CreatedAt     *int64  `thrift:"createdAt,11,optional" frugal:"11,optional,i64" json:"createdAt,omitempty"`
	UpdatedAt     *int64  `thrift:"updatedAt,12,optional" frugal:"12,optional,i64" json:"updatedAt,omitempty"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetId() (v int64) {
	return p.Id
}

func (p *Video) GetAuthorId() (v int64) {
	return p.AuthorId
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetPlayUrl() (v string) {
	return p.PlayUrl
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

var Video_FavoriteCount_DEFAULT int64

func (p *Video) GetFavoriteCount() (v int64) {
	if !p.IsSetFavoriteCount() {
		return Video_FavoriteCount_DEFAULT
	}
	return *p.FavoriteCount
}

var Video_CommentCount_DEFAULT int64

func (p *Video) GetCommentCount() (v int64) {
	if !p.IsSetCommentCount() {
		return Video_CommentCount_DEFAULT
	}
	return *p.CommentCount
}

var Video_IsFavorite_DEFAULT bool

func (p *Video) GetIsFavorite() (v bool) {
	if !p.IsSetIsFavorite() {
		return Video_IsFavorite_DEFAULT
	}
	return *p.IsFavorite
}

var Video_Author_DEFAULT *User

func (p *Video) GetAuthor() (v *User) {
	if !p.IsSetAuthor() {
		return Video_Author_DEFAULT
	}
	return p.Author
}

var Video_Description_DEFAULT string

func (p *Video) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return Video_Description_DEFAULT
	}
	return *p.Description
}

var Video_CreatedAt_DEFAULT int64

func (p *Video) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Video_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Video_UpdatedAt_DEFAULT int64

func (p *Video) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Video_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *Video) SetId(val int64) {
	p.Id = val
}
func (p *Video) SetAuthorId(val int64) {
	p.AuthorId = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetPlayUrl(val string) {
	p.PlayUrl = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetFavoriteCount(val *int64) {
	p.FavoriteCount = val
}
func (p *Video) SetCommentCount(val *int64) {
	p.CommentCount = val
}
func (p *Video) SetIsFavorite(val *bool) {
	p.IsFavorite = val
}
func (p *Video) SetAuthor(val *User) {
	p.Author = val
}
func (p *Video) SetDescription(val *string) {
	p.Description = val
}
func (p *Video) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Video) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}

func (p *Video) IsSetFavoriteCount() bool {
	return p.FavoriteCount != nil
}

func (p *Video) IsSetCommentCount() bool {
	return p.CommentCount != nil
}

func (p *Video) IsSetIsFavorite() bool {
	return p.IsFavorite != nil
}

func (p *Video) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *Video) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Video) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Video) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1:  "id",
	2:  "authorId",
	3:  "title",
	4:  "playUrl",
	5:  "coverUrl",
	6:  "favoriteCount",
	7:  "commentCount",
	8:  "isFavorite",
	9:  "author",
	10: "description",
	11: "createdAt",
	12: "updatedAt",
}

type Comment struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	UserId    int64  `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	VideoId   int64  `thrift:"videoId,3,required" frugal:"3,required,i64" json:"videoId"`
	Content   string `thrift:"content,4,required" frugal:"4,required,string" json:"content"`
	User      *User  `thrift:"user,5,optional" frugal:"5,optional,User" json:"user,omitempty"`
	CreatedAt *int64 `thrift:"createdAt,6,optional" frugal:"6,optional,i64" json:"createdAt,omitempty"`
	UpdatedAt *int64 `thrift:"updatedAt,7,optional" frugal:"7,optional,i64" json:"updatedAt,omitempty"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
}

func (p *Comment) GetId() (v int64) {
	return p.Id
}

func (p *Comment) GetUserId() (v int64) {
	return p.UserId
}

func (p *Comment) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}

var Comment_User_DEFAULT *User

func (p *Comment) GetUser() (v *User) {
	if !p.IsSetUser() {
		return Comment_User_DEFAULT
	}
	return p.User
}

var Comment_CreatedAt_DEFAULT int64

func (p *Comment) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Comment_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Comment_UpdatedAt_DEFAULT int64

func (p *Comment) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Comment_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *Comment) SetId(val int64) {
	p.Id = val
}
func (p *Comment) SetUserId(val int64) {
	p.UserId = val
}
func (p *Comment) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}
func (p *Comment) SetUser(val *User) {
	p.User = val
}
func (p *Comment) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Comment) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}

func (p *Comment) IsSetUser() bool {
	return p.User != nil
}

func (p *Comment) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Comment) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

var fieldIDToName_Comment = map[int16]string{
	1: "id",
	2: "userId",
	3: "videoId",
	4: "content",
	5: "user",
	6: "createdAt",
	7: "updatedAt",
}

type LikeInfo struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	UserId    int64  `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	VideoId   int64  `thrift:"video_id,3,required" frugal:"3,required,i64" json:"video_id"`
	CreatedAt int64  `thrift:"created_at,4,required" frugal:"4,required,i64" json:"created_at"`
	DeletedAt *int64 `thrift:"deleted_at,5,optional" frugal:"5,optional,i64" json:"deleted_at,omitempty"`
}

func NewLikeInfo() *LikeInfo {
	return &LikeInfo{}
}

func (p *LikeInfo) InitDefault() {
}

func (p *LikeInfo) GetId() (v int64) {
	return p.Id
}

func (p *LikeInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeInfo) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *LikeInfo) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var LikeInfo_DeletedAt_DEFAULT int64

func (p *LikeInfo) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return LikeInfo_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *LikeInfo) SetId(val int64) {
	p.Id = val
}
func (p *LikeInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeInfo) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *LikeInfo) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *LikeInfo) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *LikeInfo) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *LikeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeInfo(%+v)", *p)
}

var fieldIDToName_LikeInfo = map[int16]string{
	1: "id",
	2: "user_id",
	3: "video_id",
	4: "created_at",
	5: "deleted_at",
}

type CommentInfo struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	UserId    int64  `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	VideoId   int64  `thrift:"video_id,3,required" frugal:"3,required,i64" json:"video_id"`
	Content   string `thrift:"content,4,required" frugal:"4,required,string" json:"content"`
	ParentId  *int64 `thrift:"parent_id,5,optional" frugal:"5,optional,i64" json:"parent_id,omitempty"`
	CreatedAt int64  `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	DeletedAt *int64 `thrift:"deleted_at,7,optional" frugal:"7,optional,i64" json:"deleted_at,omitempty"`
	LikeCount *int32 `thrift:"like_count,8,optional" frugal:"8,optional,i32" json:"like_count,omitempty"`
	IsLiked   *bool  `thrift:"is_liked,9,optional" frugal:"9,optional,bool" json:"is_liked,omitempty"`
}

func NewCommentInfo() *CommentInfo {
	return &CommentInfo{}
}

func (p *CommentInfo) InitDefault() {
}

func (p *CommentInfo) GetId() (v int64) {
	return p.Id
}

func (p *CommentInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *CommentInfo) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CommentInfo) GetContent() (v string) {
	return p.Content
}

var CommentInfo_ParentId_DEFAULT int64

func (p *CommentInfo) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return CommentInfo_ParentId_DEFAULT
	}
	return *p.ParentId
}

func (p *CommentInfo) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var CommentInfo_DeletedAt_DEFAULT int64

func (p *CommentInfo) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return CommentInfo_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

var CommentInfo_LikeCount_DEFAULT int32

func (p *CommentInfo) GetLikeCount() (v int32) {
	if !p.IsSetLikeCount() {
		return CommentInfo_LikeCount_DEFAULT
	}
	return *p.LikeCount
}

var CommentInfo_IsLiked_DEFAULT bool

func (p *CommentInfo) GetIsLiked() (v bool) {
	if !p.IsSetIsLiked() {
		return CommentInfo_IsLiked_DEFAULT
	}
	return *p.IsLiked
}
func (p *CommentInfo) SetId(val int64) {
	p.Id = val
}
func (p *CommentInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *CommentInfo) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CommentInfo) SetContent(val string) {
	p.Content = val
}
func (p *CommentInfo) SetParentId(val *int64) {
	p.ParentId = val
}
func (p *CommentInfo) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *CommentInfo) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *CommentInfo) SetLikeCount(val *int32) {
	p.LikeCount = val
}
func (p *CommentInfo) SetIsLiked(val *bool) {
	p.IsLiked = val
}

func (p *CommentInfo) IsSetParentId() bool {
	return p.ParentId != nil
}

func (p *CommentInfo) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *CommentInfo) IsSetLikeCount() bool {
	return p.LikeCount != nil
}

func (p *CommentInfo) IsSetIsLiked() bool {
	return p.IsLiked != nil
}

func (p *CommentInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentInfo(%+v)", *p)
}

var fieldIDToName_CommentInfo = map[int16]string{
	1: "id",
	2: "user_id",
	3: "video_id",
	4: "content",
	5: "parent_id",
	6: "created_at",
	7: "deleted_at",
	8: "like_count",
	9: "is_liked",
}

type PrivateMessage struct {
	Id         int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	SenderId   int64  `thrift:"sender_id,2,required" frugal:"2,required,i64" json:"sender_id"`
	ReceiverId int64  `thrift:"receiver_id,3,required" frugal:"3,required,i64" json:"receiver_id"`
	Content    string `thrift:"content,4,required" frugal:"4,required,string" json:"content"`
	IsRead     bool   `thrift:"is_read,5,required" frugal:"5,required,bool" json:"is_read"`
	CreatedAt  int64  `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt  int64  `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	DeletedAt  *int64 `thrift:"deleted_at,8,optional" frugal:"8,optional,i64" json:"deleted_at,omitempty"`
}

func NewPrivateMessage() *PrivateMessage {
	return &PrivateMessage{}
}

func (p *PrivateMessage) InitDefault() {
}

func (p *PrivateMessage) GetId() (v int64) {
	return p.Id
}

func (p *PrivateMessage) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *PrivateMessage) GetReceiverId() (v int64) {
	return p.ReceiverId
}

func (p *PrivateMessage) GetContent() (v string) {
	return p.Content
}

func (p *PrivateMessage) GetIsRead() (v bool) {
	return p.IsRead
}

func (p *PrivateMessage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *PrivateMessage) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var PrivateMessage_DeletedAt_DEFAULT int64

func (p *PrivateMessage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return PrivateMessage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *PrivateMessage) SetId(val int64) {
	p.Id = val
}
func (p *PrivateMessage) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *PrivateMessage) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *PrivateMessage) SetContent(val string) {
	p.Content = val
}
func (p *PrivateMessage) SetIsRead(val bool) {
	p.IsRead = val
}
func (p *PrivateMessage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *PrivateMessage) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *PrivateMessage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *PrivateMessage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *PrivateMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivateMessage(%+v)", *p)
}

var fieldIDToName_PrivateMessage = map[int16]string{
	1: "id",
	2: "sender_id",
	3: "receiver_id",
	4: "content",
	5: "is_read",
	6: "created_at",
	7: "updated_at",
	8: "deleted_at",
}

type ChatRoom struct {
	Id        int64             `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name      string            `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	CreatorId int64             `thrift:"creator_id,3,required" frugal:"3,required,i64" json:"creator_id"`
	Type      int8              `thrift:"type,4,required" frugal:"4,required,i8" json:"type"`
	Members   []*ChatRoomMember `thrift:"members,8,optional" frugal:"8,optional,list<ChatRoomMember>" json:"members,omitempty"`
}

func NewChatRoom() *ChatRoom {
	return &ChatRoom{}
}

func (p *ChatRoom) InitDefault() {
}

func (p *ChatRoom) GetId() (v int64) {
	return p.Id
}

func (p *ChatRoom) GetName() (v string) {
	return p.Name
}

func (p *ChatRoom) GetCreatorId() (v int64) {
	return p.CreatorId
}

func (p *ChatRoom) GetType() (v int8) {
	return p.Type
}

var ChatRoom_Members_DEFAULT []*ChatRoomMember

func (p *ChatRoom) GetMembers() (v []*ChatRoomMember) {
	if !p.IsSetMembers() {
		return ChatRoom_Members_DEFAULT
	}
	return p.Members
}
func (p *ChatRoom) SetId(val int64) {
	p.Id = val
}
func (p *ChatRoom) SetName(val string) {
	p.Name = val
}
func (p *ChatRoom) SetCreatorId(val int64) {
	p.CreatorId = val
}
func (p *ChatRoom) SetType(val int8) {
	p.Type = val
}
func (p *ChatRoom) SetMembers(val []*ChatRoomMember) {
	p.Members = val
}

func (p *ChatRoom) IsSetMembers() bool {
	return p.Members != nil
}

func (p *ChatRoom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoom(%+v)", *p)
}

var fieldIDToName_ChatRoom = map[int16]string{
	1: "id",
	2: "name",
	3: "creator_id",
	4: "type",
	8: "members",
}

type ChatRoomMember struct {
	Id        int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	RoomId    int64   `thrift:"room_id,2,required" frugal:"2,required,i64" json:"room_id"`
	UserId    int64   `thrift:"user_id,3,required" frugal:"3,required,i64" json:"user_id"`
	Nickname  *string `thrift:"nickname,4,optional" frugal:"4,optional,string" json:"nickname,omitempty"`
	Role      int8    `thrift:"role,5,required" frugal:"5,required,i8" json:"role"`
	CreatedAt int64   `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt int64   `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	DeletedAt *int64  `thrift:"deleted_at,8,optional" frugal:"8,optional,i64" json:"deleted_at,omitempty"`
}

func NewChatRoomMember() *ChatRoomMember {
	return &ChatRoomMember{}
}

func (p *ChatRoomMember) InitDefault() {
}

func (p *ChatRoomMember) GetId() (v int64) {
	return p.Id
}

func (p *ChatRoomMember) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChatRoomMember) GetUserId() (v int64) {
	return p.UserId
}

var ChatRoomMember_Nickname_DEFAULT string

func (p *ChatRoomMember) GetNickname() (v string) {
	if !p.IsSetNickname() {
		return ChatRoomMember_Nickname_DEFAULT
	}
	return *p.Nickname
}

func (p *ChatRoomMember) GetRole() (v int8) {
	return p.Role
}

func (p *ChatRoomMember) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *ChatRoomMember) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var ChatRoomMember_DeletedAt_DEFAULT int64

func (p *ChatRoomMember) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return ChatRoomMember_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *ChatRoomMember) SetId(val int64) {
	p.Id = val
}
func (p *ChatRoomMember) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChatRoomMember) SetUserId(val int64) {
	p.UserId = val
}
func (p *ChatRoomMember) SetNickname(val *string) {
	p.Nickname = val
}
func (p *ChatRoomMember) SetRole(val int8) {
	p.Role = val
}
func (p *ChatRoomMember) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *ChatRoomMember) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *ChatRoomMember) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *ChatRoomMember) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *ChatRoomMember) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *ChatRoomMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRoomMember(%+v)", *p)
}

var fieldIDToName_ChatRoomMember = map[int16]string{
	1: "id",
	2: "room_id",
	3: "user_id",
	4: "nickname",
	5: "role",
	6: "created_at",
	7: "updated_at",
	8: "deleted_at",
}

type ChatMessage struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	RoomId    int64  `thrift:"room_id,2,required" frugal:"2,required,i64" json:"room_id"`
	SenderId  int64  `thrift:"sender_id,3,required" frugal:"3,required,i64" json:"sender_id"`
	Content   string `thrift:"content,4,required" frugal:"4,required,string" json:"content"`
	Type      int8   `thrift:"type,5,required" frugal:"5,required,i8" json:"type"`
	CreatedAt int64  `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt int64  `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	DeletedAt *int64 `thrift:"deleted_at,8,optional" frugal:"8,optional,i64" json:"deleted_at,omitempty"`
}

func NewChatMessage() *ChatMessage {
	return &ChatMessage{}
}

func (p *ChatMessage) InitDefault() {
}

func (p *ChatMessage) GetId() (v int64) {
	return p.Id
}

func (p *ChatMessage) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChatMessage) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *ChatMessage) GetContent() (v string) {
	return p.Content
}

func (p *ChatMessage) GetType() (v int8) {
	return p.Type
}

func (p *ChatMessage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *ChatMessage) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var ChatMessage_DeletedAt_DEFAULT int64

func (p *ChatMessage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return ChatMessage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *ChatMessage) SetId(val int64) {
	p.Id = val
}
func (p *ChatMessage) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChatMessage) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *ChatMessage) SetContent(val string) {
	p.Content = val
}
func (p *ChatMessage) SetType(val int8) {
	p.Type = val
}
func (p *ChatMessage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *ChatMessage) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *ChatMessage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *ChatMessage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *ChatMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessage(%+v)", *p)
}

var fieldIDToName_ChatMessage = map[int16]string{
	1: "id",
	2: "room_id",
	3: "sender_id",
	4: "content",
	5: "type",
	6: "created_at",
	7: "updated_at",
	8: "deleted_at",
}

type Friendship struct {
	Id        int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	UserId    int64   `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	FriendId  int64   `thrift:"friend_id,3,required" frugal:"3,required,i64" json:"friend_id"`
	Status    int8    `thrift:"status,4,required" frugal:"4,required,i8" json:"status"`
	Remark    *string `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	CreatedAt int64   `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt int64   `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	DeletedAt *int64  `thrift:"deleted_at,8,optional" frugal:"8,optional,i64" json:"deleted_at,omitempty"`
}

func NewFriendship() *Friendship {
	return &Friendship{}
}

func (p *Friendship) InitDefault() {
}

func (p *Friendship) GetId() (v int64) {
	return p.Id
}

func (p *Friendship) GetUserId() (v int64) {
	return p.UserId
}

func (p *Friendship) GetFriendId() (v int64) {
	return p.FriendId
}

func (p *Friendship) GetStatus() (v int8) {
	return p.Status
}

var Friendship_Remark_DEFAULT string

func (p *Friendship) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return Friendship_Remark_DEFAULT
	}
	return *p.Remark
}

func (p *Friendship) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Friendship) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Friendship_DeletedAt_DEFAULT int64

func (p *Friendship) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Friendship_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *Friendship) SetId(val int64) {
	p.Id = val
}
func (p *Friendship) SetUserId(val int64) {
	p.UserId = val
}
func (p *Friendship) SetFriendId(val int64) {
	p.FriendId = val
}
func (p *Friendship) SetStatus(val int8) {
	p.Status = val
}
func (p *Friendship) SetRemark(val *string) {
	p.Remark = val
}
func (p *Friendship) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Friendship) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Friendship) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *Friendship) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *Friendship) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Friendship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Friendship(%+v)", *p)
}

var fieldIDToName_Friendship = map[int16]string{
	1: "id",
	2: "user_id",
	3: "friend_id",
	4: "status",
	5: "remark",
	6: "created_at",
	7: "updated_at",
	8: "deleted_at",
}

type FriendRequest struct {
	Id         int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	SenderId   int64   `thrift:"sender_id,2,required" frugal:"2,required,i64" json:"sender_id"`
	ReceiverId int64   `thrift:"receiver_id,3,required" frugal:"3,required,i64" json:"receiver_id"`
	Message    *string `thrift:"message,4,optional" frugal:"4,optional,string" json:"message,omitempty"`
	Status     int8    `thrift:"status,5,required" frugal:"5,required,i8" json:"status"`
	CreatedAt  int64   `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt  int64   `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	DeletedAt  *int64  `thrift:"deleted_at,8,optional" frugal:"8,optional,i64" json:"deleted_at,omitempty"`
}

func NewFriendRequest() *FriendRequest {
	return &FriendRequest{}
}

func (p *FriendRequest) InitDefault() {
}

func (p *FriendRequest) GetId() (v int64) {
	return p.Id
}

func (p *FriendRequest) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *FriendRequest) GetReceiverId() (v int64) {
	return p.ReceiverId
}

var FriendRequest_Message_DEFAULT string

func (p *FriendRequest) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return FriendRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *FriendRequest) GetStatus() (v int8) {
	return p.Status
}

func (p *FriendRequest) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *FriendRequest) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var FriendRequest_DeletedAt_DEFAULT int64

func (p *FriendRequest) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return FriendRequest_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *FriendRequest) SetId(val int64) {
	p.Id = val
}
func (p *FriendRequest) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *FriendRequest) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *FriendRequest) SetMessage(val *string) {
	p.Message = val
}
func (p *FriendRequest) SetStatus(val int8) {
	p.Status = val
}
func (p *FriendRequest) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *FriendRequest) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *FriendRequest) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *FriendRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *FriendRequest) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *FriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRequest(%+v)", *p)
}

var fieldIDToName_FriendRequest = map[int16]string{
	1: "id",
	2: "sender_id",
	3: "receiver_id",
	4: "message",
	5: "status",
	6: "created_at",
	7: "updated_at",
	8: "deleted_at",
}

type SemanticSearchResultItem struct {
	Videos         []*Video `thrift:"videos,1,required" frugal:"1,required,list<Video>" json:"videos"`
	Summary        *string  `thrift:"summary,2,optional" frugal:"2,optional,string" json:"summary,omitempty"`
	RelatedQueries []string `thrift:"related_queries,3,optional" frugal:"3,optional,list<string>" json:"related_queries,omitempty"`
	FromCache      *bool    `thrift:"from_cache,4,optional" frugal:"4,optional,bool" json:"from_cache,omitempty"`
}

func NewSemanticSearchResultItem() *SemanticSearchResultItem {
	return &SemanticSearchResultItem{}
}

func (p *SemanticSearchResultItem) InitDefault() {
}

func (p *SemanticSearchResultItem) GetVideos() (v []*Video) {
	return p.Videos
}

var SemanticSearchResultItem_Summary_DEFAULT string

func (p *SemanticSearchResultItem) GetSummary() (v string) {
	if !p.IsSetSummary() {
		return SemanticSearchResultItem_Summary_DEFAULT
	}
	return *p.Summary
}

var SemanticSearchResultItem_RelatedQueries_DEFAULT []string

func (p *SemanticSearchResultItem) GetRelatedQueries() (v []string) {
	if !p.IsSetRelatedQueries() {
		return SemanticSearchResultItem_RelatedQueries_DEFAULT
	}
	return p.RelatedQueries
}

var SemanticSearchResultItem_FromCache_DEFAULT bool

func (p *SemanticSearchResultItem) GetFromCache() (v bool) {
	if !p.IsSetFromCache() {
		return SemanticSearchResultItem_FromCache_DEFAULT
	}
	return *p.FromCache
}
func (p *SemanticSearchResultItem) SetVideos(val []*Video) {
	p.Videos = val
}
func (p *SemanticSearchResultItem) SetSummary(val *string) {
	p.Summary = val
}
func (p *SemanticSearchResultItem) SetRelatedQueries(val []string) {
	p.RelatedQueries = val
}
func (p *SemanticSearchResultItem) SetFromCache(val *bool) {
	p.FromCache = val
}

func (p *SemanticSearchResultItem) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *SemanticSearchResultItem) IsSetRelatedQueries() bool {
	return p.RelatedQueries != nil
}

func (p *SemanticSearchResultItem) IsSetFromCache() bool {
	return p.FromCache != nil
}

func (p *SemanticSearchResultItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SemanticSearchResultItem(%+v)", *p)
}

var fieldIDToName_SemanticSearchResultItem = map[int16]string{
	1: "videos",
	2: "summary",
	3: "related_queries",
	4: "from_cache",
}
