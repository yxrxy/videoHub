// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package interaction

import (
	"context"
	"fmt"
	"github.com/yxrxy/videoHub/kitex_gen/model"
)

type CommentListResponse struct {
	Base     *model.BaseResp  `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Comments []*model.Comment `thrift:"comments,2,required" frugal:"2,required,list<model.Comment>" json:"comments"`
	Total    int64            `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewCommentListResponse() *CommentListResponse {
	return &CommentListResponse{}
}

func (p *CommentListResponse) InitDefault() {
}

var CommentListResponse_Base_DEFAULT *model.BaseResp

func (p *CommentListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CommentListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CommentListResponse) GetComments() (v []*model.Comment) {
	return p.Comments
}

func (p *CommentListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *CommentListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CommentListResponse) SetComments(val []*model.Comment) {
	p.Comments = val
}
func (p *CommentListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *CommentListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CommentListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListResponse(%+v)", *p)
}

var fieldIDToName_CommentListResponse = map[int16]string{
	1: "Base",
	2: "comments",
	3: "total",
}

type LikeRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewLikeRequest() *LikeRequest {
	return &LikeRequest{}
}

func (p *LikeRequest) InitDefault() {
}

func (p *LikeRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *LikeRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *LikeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeRequest(%+v)", *p)
}

var fieldIDToName_LikeRequest = map[int16]string{
	1: "video_id",
}

type LikeResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewLikeResponse() *LikeResponse {
	return &LikeResponse{}
}

func (p *LikeResponse) InitDefault() {
}

var LikeResponse_Base_DEFAULT *model.BaseResp

func (p *LikeResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LikeResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LikeResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *LikeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeResponse(%+v)", *p)
}

var fieldIDToName_LikeResponse = map[int16]string{
	1: "Base",
}

type GetLikesRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
	Page    int32 `thrift:"page,2,required" frugal:"2,required,i32" json:"page"`
	Size    int32 `thrift:"size,3,required" frugal:"3,required,i32" json:"size"`
}

func NewGetLikesRequest() *GetLikesRequest {
	return &GetLikesRequest{}
}

func (p *GetLikesRequest) InitDefault() {
}

func (p *GetLikesRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetLikesRequest) GetPage() (v int32) {
	return p.Page
}

func (p *GetLikesRequest) GetSize() (v int32) {
	return p.Size
}
func (p *GetLikesRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetLikesRequest) SetPage(val int32) {
	p.Page = val
}
func (p *GetLikesRequest) SetSize(val int32) {
	p.Size = val
}

func (p *GetLikesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikesRequest(%+v)", *p)
}

var fieldIDToName_GetLikesRequest = map[int16]string{
	1: "video_id",
	2: "page",
	3: "size",
}

type GetLikesResponse struct {
	Base     *model.BaseResp   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	LikeList []*model.LikeInfo `thrift:"LikeList,2,required" frugal:"2,required,list<model.LikeInfo>" json:"LikeList"`
	Total    int64             `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetLikesResponse() *GetLikesResponse {
	return &GetLikesResponse{}
}

func (p *GetLikesResponse) InitDefault() {
}

var GetLikesResponse_Base_DEFAULT *model.BaseResp

func (p *GetLikesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetLikesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetLikesResponse) GetLikeList() (v []*model.LikeInfo) {
	return p.LikeList
}

func (p *GetLikesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetLikesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetLikesResponse) SetLikeList(val []*model.LikeInfo) {
	p.LikeList = val
}
func (p *GetLikesResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetLikesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLikesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikesResponse(%+v)", *p)
}

var fieldIDToName_GetLikesResponse = map[int16]string{
	1: "Base",
	2: "LikeList",
	3: "Total",
}

type CommentRequest struct {
	VideoId  int64  `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
	Content  string `thrift:"content,2,required" frugal:"2,required,string" json:"content"`
	ParentId *int64 `thrift:"parent_id,3,optional" frugal:"3,optional,i64" json:"parent_id,omitempty"`
}

func NewCommentRequest() *CommentRequest {
	return &CommentRequest{}
}

func (p *CommentRequest) InitDefault() {
}

func (p *CommentRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CommentRequest) GetContent() (v string) {
	return p.Content
}

var CommentRequest_ParentId_DEFAULT int64

func (p *CommentRequest) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return CommentRequest_ParentId_DEFAULT
	}
	return *p.ParentId
}
func (p *CommentRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CommentRequest) SetContent(val string) {
	p.Content = val
}
func (p *CommentRequest) SetParentId(val *int64) {
	p.ParentId = val
}

func (p *CommentRequest) IsSetParentId() bool {
	return p.ParentId != nil
}

func (p *CommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentRequest(%+v)", *p)
}

var fieldIDToName_CommentRequest = map[int16]string{
	1: "video_id",
	2: "content",
	3: "parent_id",
}

type CommentResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	CommentId int64           `thrift:"comment_id,2,required" frugal:"2,required,i64" json:"comment_id"`
}

func NewCommentResponse() *CommentResponse {
	return &CommentResponse{}
}

func (p *CommentResponse) InitDefault() {
}

var CommentResponse_Base_DEFAULT *model.BaseResp

func (p *CommentResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CommentResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CommentResponse) GetCommentId() (v int64) {
	return p.CommentId
}
func (p *CommentResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CommentResponse) SetCommentId(val int64) {
	p.CommentId = val
}

func (p *CommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentResponse(%+v)", *p)
}

var fieldIDToName_CommentResponse = map[int16]string{
	1: "Base",
	2: "comment_id",
}

type GetCommentsRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
	Page    int32 `thrift:"page,2,required" frugal:"2,required,i32" json:"page"`
	Size    int32 `thrift:"size,3,required" frugal:"3,required,i32" json:"size"`
}

func NewGetCommentsRequest() *GetCommentsRequest {
	return &GetCommentsRequest{}
}

func (p *GetCommentsRequest) InitDefault() {
}

func (p *GetCommentsRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetCommentsRequest) GetPage() (v int32) {
	return p.Page
}

func (p *GetCommentsRequest) GetSize() (v int32) {
	return p.Size
}
func (p *GetCommentsRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetCommentsRequest) SetPage(val int32) {
	p.Page = val
}
func (p *GetCommentsRequest) SetSize(val int32) {
	p.Size = val
}

func (p *GetCommentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentsRequest(%+v)", *p)
}

var fieldIDToName_GetCommentsRequest = map[int16]string{
	1: "video_id",
	2: "page",
	3: "size",
}

type GetCommentsResponse struct {
	Base        *model.BaseResp  `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	CommentList []*model.Comment `thrift:"CommentList,2,required" frugal:"2,required,list<model.Comment>" json:"CommentList"`
	Total       int64            `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetCommentsResponse() *GetCommentsResponse {
	return &GetCommentsResponse{}
}

func (p *GetCommentsResponse) InitDefault() {
}

var GetCommentsResponse_Base_DEFAULT *model.BaseResp

func (p *GetCommentsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetCommentsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCommentsResponse) GetCommentList() (v []*model.Comment) {
	return p.CommentList
}

func (p *GetCommentsResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetCommentsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetCommentsResponse) SetCommentList(val []*model.Comment) {
	p.CommentList = val
}
func (p *GetCommentsResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetCommentsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCommentsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentsResponse(%+v)", *p)
}

var fieldIDToName_GetCommentsResponse = map[int16]string{
	1: "Base",
	2: "CommentList",
	3: "Total",
}

type DeleteCommentRequest struct {
	CommentId int64 `thrift:"comment_id,1,required" frugal:"1,required,i64" json:"comment_id"`
}

func NewDeleteCommentRequest() *DeleteCommentRequest {
	return &DeleteCommentRequest{}
}

func (p *DeleteCommentRequest) InitDefault() {
}

func (p *DeleteCommentRequest) GetCommentId() (v int64) {
	return p.CommentId
}
func (p *DeleteCommentRequest) SetCommentId(val int64) {
	p.CommentId = val
}

func (p *DeleteCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentRequest(%+v)", *p)
}

var fieldIDToName_DeleteCommentRequest = map[int16]string{
	1: "comment_id",
}

type DeleteCommentResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewDeleteCommentResponse() *DeleteCommentResponse {
	return &DeleteCommentResponse{}
}

func (p *DeleteCommentResponse) InitDefault() {
}

var DeleteCommentResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteCommentResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteCommentResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteCommentResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteCommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentResponse(%+v)", *p)
}

var fieldIDToName_DeleteCommentResponse = map[int16]string{
	1: "Base",
}

type LikeCommentRequest struct {
	CommentId int64 `thrift:"comment_id,1,required" frugal:"1,required,i64" json:"comment_id"`
}

func NewLikeCommentRequest() *LikeCommentRequest {
	return &LikeCommentRequest{}
}

func (p *LikeCommentRequest) InitDefault() {
}

func (p *LikeCommentRequest) GetCommentId() (v int64) {
	return p.CommentId
}
func (p *LikeCommentRequest) SetCommentId(val int64) {
	p.CommentId = val
}

func (p *LikeCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeCommentRequest(%+v)", *p)
}

var fieldIDToName_LikeCommentRequest = map[int16]string{
	1: "comment_id",
}

type LikeCommentResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewLikeCommentResponse() *LikeCommentResponse {
	return &LikeCommentResponse{}
}

func (p *LikeCommentResponse) InitDefault() {
}

var LikeCommentResponse_Base_DEFAULT *model.BaseResp

func (p *LikeCommentResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LikeCommentResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LikeCommentResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *LikeCommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeCommentResponse(%+v)", *p)
}

var fieldIDToName_LikeCommentResponse = map[int16]string{
	1: "Base",
}

type InteractionService interface {
	Like(ctx context.Context, req *LikeRequest) (r *LikeResponse, err error)

	GetLikes(ctx context.Context, req *GetLikesRequest) (r *GetLikesResponse, err error)

	Comment(ctx context.Context, req *CommentRequest) (r *CommentResponse, err error)

	GetComments(ctx context.Context, req *GetCommentsRequest) (r *GetCommentsResponse, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentRequest) (r *DeleteCommentResponse, err error)

	LikeComment(ctx context.Context, req *LikeCommentRequest) (r *LikeCommentResponse, err error)
}

type InteractionServiceLikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewInteractionServiceLikeArgs() *InteractionServiceLikeArgs {
	return &InteractionServiceLikeArgs{}
}

func (p *InteractionServiceLikeArgs) InitDefault() {
}

var InteractionServiceLikeArgs_Req_DEFAULT *LikeRequest

func (p *InteractionServiceLikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeResult struct {
	Success *LikeResponse `thrift:"success,0,optional" frugal:"0,optional,LikeResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeResult() *InteractionServiceLikeResult {
	return &InteractionServiceLikeResult{}
}

func (p *InteractionServiceLikeResult) InitDefault() {
}

var InteractionServiceLikeResult_Success_DEFAULT *LikeResponse

func (p *InteractionServiceLikeResult) GetSuccess() (v *LikeResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeResponse)
}

func (p *InteractionServiceLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetLikesArgs struct {
	Req *GetLikesRequest `thrift:"req,1" frugal:"1,default,GetLikesRequest" json:"req"`
}

func NewInteractionServiceGetLikesArgs() *InteractionServiceGetLikesArgs {
	return &InteractionServiceGetLikesArgs{}
}

func (p *InteractionServiceGetLikesArgs) InitDefault() {
}

var InteractionServiceGetLikesArgs_Req_DEFAULT *GetLikesRequest

func (p *InteractionServiceGetLikesArgs) GetReq() (v *GetLikesRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetLikesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetLikesArgs) SetReq(val *GetLikesRequest) {
	p.Req = val
}

func (p *InteractionServiceGetLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetLikesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetLikesArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetLikesArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetLikesResult struct {
	Success *GetLikesResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikesResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetLikesResult() *InteractionServiceGetLikesResult {
	return &InteractionServiceGetLikesResult{}
}

func (p *InteractionServiceGetLikesResult) InitDefault() {
}

var InteractionServiceGetLikesResult_Success_DEFAULT *GetLikesResponse

func (p *InteractionServiceGetLikesResult) GetSuccess() (v *GetLikesResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetLikesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikesResponse)
}

func (p *InteractionServiceGetLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetLikesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetLikesResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetLikesResult = map[int16]string{
	0: "success",
}

type InteractionServiceCommentArgs struct {
	Req *CommentRequest `thrift:"req,1" frugal:"1,default,CommentRequest" json:"req"`
}

func NewInteractionServiceCommentArgs() *InteractionServiceCommentArgs {
	return &InteractionServiceCommentArgs{}
}

func (p *InteractionServiceCommentArgs) InitDefault() {
}

var InteractionServiceCommentArgs_Req_DEFAULT *CommentRequest

func (p *InteractionServiceCommentArgs) GetReq() (v *CommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCommentArgs) SetReq(val *CommentRequest) {
	p.Req = val
}

func (p *InteractionServiceCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceCommentResult struct {
	Success *CommentResponse `thrift:"success,0,optional" frugal:"0,optional,CommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceCommentResult() *InteractionServiceCommentResult {
	return &InteractionServiceCommentResult{}
}

func (p *InteractionServiceCommentResult) InitDefault() {
}

var InteractionServiceCommentResult_Success_DEFAULT *CommentResponse

func (p *InteractionServiceCommentResult) GetSuccess() (v *CommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentResponse)
}

func (p *InteractionServiceCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetCommentsArgs struct {
	Req *GetCommentsRequest `thrift:"req,1" frugal:"1,default,GetCommentsRequest" json:"req"`
}

func NewInteractionServiceGetCommentsArgs() *InteractionServiceGetCommentsArgs {
	return &InteractionServiceGetCommentsArgs{}
}

func (p *InteractionServiceGetCommentsArgs) InitDefault() {
}

var InteractionServiceGetCommentsArgs_Req_DEFAULT *GetCommentsRequest

func (p *InteractionServiceGetCommentsArgs) GetReq() (v *GetCommentsRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetCommentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetCommentsArgs) SetReq(val *GetCommentsRequest) {
	p.Req = val
}

func (p *InteractionServiceGetCommentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetCommentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentsArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentsArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetCommentsResult struct {
	Success *GetCommentsResponse `thrift:"success,0,optional" frugal:"0,optional,GetCommentsResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetCommentsResult() *InteractionServiceGetCommentsResult {
	return &InteractionServiceGetCommentsResult{}
}

func (p *InteractionServiceGetCommentsResult) InitDefault() {
}

var InteractionServiceGetCommentsResult_Success_DEFAULT *GetCommentsResponse

func (p *InteractionServiceGetCommentsResult) GetSuccess() (v *GetCommentsResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetCommentsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetCommentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCommentsResponse)
}

func (p *InteractionServiceGetCommentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetCommentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentsResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentsResult = map[int16]string{
	0: "success",
}

type InteractionServiceDeleteCommentArgs struct {
	Req *DeleteCommentRequest `thrift:"req,1" frugal:"1,default,DeleteCommentRequest" json:"req"`
}

func NewInteractionServiceDeleteCommentArgs() *InteractionServiceDeleteCommentArgs {
	return &InteractionServiceDeleteCommentArgs{}
}

func (p *InteractionServiceDeleteCommentArgs) InitDefault() {
}

var InteractionServiceDeleteCommentArgs_Req_DEFAULT *DeleteCommentRequest

func (p *InteractionServiceDeleteCommentArgs) GetReq() (v *DeleteCommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDeleteCommentArgs) SetReq(val *DeleteCommentRequest) {
	p.Req = val
}

func (p *InteractionServiceDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceDeleteCommentResult struct {
	Success *DeleteCommentResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteCommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceDeleteCommentResult() *InteractionServiceDeleteCommentResult {
	return &InteractionServiceDeleteCommentResult{}
}

func (p *InteractionServiceDeleteCommentResult) InitDefault() {
}

var InteractionServiceDeleteCommentResult_Success_DEFAULT *DeleteCommentResponse

func (p *InteractionServiceDeleteCommentResult) GetSuccess() (v *DeleteCommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCommentResponse)
}

func (p *InteractionServiceDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceLikeCommentArgs struct {
	Req *LikeCommentRequest `thrift:"req,1" frugal:"1,default,LikeCommentRequest" json:"req"`
}

func NewInteractionServiceLikeCommentArgs() *InteractionServiceLikeCommentArgs {
	return &InteractionServiceLikeCommentArgs{}
}

func (p *InteractionServiceLikeCommentArgs) InitDefault() {
}

var InteractionServiceLikeCommentArgs_Req_DEFAULT *LikeCommentRequest

func (p *InteractionServiceLikeCommentArgs) GetReq() (v *LikeCommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeCommentArgs) SetReq(val *LikeCommentRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeCommentResult struct {
	Success *LikeCommentResponse `thrift:"success,0,optional" frugal:"0,optional,LikeCommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeCommentResult() *InteractionServiceLikeCommentResult {
	return &InteractionServiceLikeCommentResult{}
}

func (p *InteractionServiceLikeCommentResult) InitDefault() {
}

var InteractionServiceLikeCommentResult_Success_DEFAULT *LikeCommentResponse

func (p *InteractionServiceLikeCommentResult) GetSuccess() (v *LikeCommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeCommentResponse)
}

func (p *InteractionServiceLikeCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeCommentResult = map[int16]string{
	0: "success",
}
