// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package social

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"strings"

	"github.com/yxrxy/videoHub/kitex_gen/model"
)

type MessageType int64

const (
	MessageType_TEXT    MessageType = 0
	MessageType_IMAGE   MessageType = 1
	MessageType_VIDEO   MessageType = 2
	MessageType_FILE    MessageType = 3
	MessageType_SYSTEM  MessageType = 4
	MessageType_PRIVATE MessageType = 5
	MessageType_GROUP   MessageType = 6
)

func (p MessageType) String() string {
	switch p {
	case MessageType_TEXT:
		return "TEXT"
	case MessageType_IMAGE:
		return "IMAGE"
	case MessageType_VIDEO:
		return "VIDEO"
	case MessageType_FILE:
		return "FILE"
	case MessageType_SYSTEM:
		return "SYSTEM"
	case MessageType_PRIVATE:
		return "PRIVATE"
	case MessageType_GROUP:
		return "GROUP"
	}
	return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
	switch s {
	case "TEXT":
		return MessageType_TEXT, nil
	case "IMAGE":
		return MessageType_IMAGE, nil
	case "VIDEO":
		return MessageType_VIDEO, nil
	case "FILE":
		return MessageType_FILE, nil
	case "SYSTEM":
		return MessageType_SYSTEM, nil
	case "PRIVATE":
		return MessageType_PRIVATE, nil
	case "GROUP":
		return MessageType_GROUP, nil
	}
	return MessageType(0), fmt.Errorf("not a valid MessageType string")
}

func MessageTypePtr(v MessageType) *MessageType { return &v }
func (p *MessageType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = MessageType(result.Int64)
	return
}

func (p *MessageType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RoomType int64

const (
	RoomType_PRIVATE RoomType = 1
	RoomType_GROUP   RoomType = 2
)

func (p RoomType) String() string {
	switch p {
	case RoomType_PRIVATE:
		return "PRIVATE"
	case RoomType_GROUP:
		return "GROUP"
	}
	return "<UNSET>"
}

func RoomTypeFromString(s string) (RoomType, error) {
	switch s {
	case "PRIVATE":
		return RoomType_PRIVATE, nil
	case "GROUP":
		return RoomType_GROUP, nil
	}
	return RoomType(0), fmt.Errorf("not a valid RoomType string")
}

func RoomTypePtr(v RoomType) *RoomType { return &v }
func (p *RoomType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = RoomType(result.Int64)
	return
}

func (p *RoomType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FriendshipStatus int64

const (
	FriendshipStatus_PENDING  FriendshipStatus = 0
	FriendshipStatus_ACCEPTED FriendshipStatus = 1
	FriendshipStatus_REJECTED FriendshipStatus = 2
	FriendshipStatus_BLOCKED  FriendshipStatus = 3
)

func (p FriendshipStatus) String() string {
	switch p {
	case FriendshipStatus_PENDING:
		return "PENDING"
	case FriendshipStatus_ACCEPTED:
		return "ACCEPTED"
	case FriendshipStatus_REJECTED:
		return "REJECTED"
	case FriendshipStatus_BLOCKED:
		return "BLOCKED"
	}
	return "<UNSET>"
}

func FriendshipStatusFromString(s string) (FriendshipStatus, error) {
	switch s {
	case "PENDING":
		return FriendshipStatus_PENDING, nil
	case "ACCEPTED":
		return FriendshipStatus_ACCEPTED, nil
	case "REJECTED":
		return FriendshipStatus_REJECTED, nil
	case "BLOCKED":
		return FriendshipStatus_BLOCKED, nil
	}
	return FriendshipStatus(0), fmt.Errorf("not a valid FriendshipStatus string")
}

func FriendshipStatusPtr(v FriendshipStatus) *FriendshipStatus { return &v }
func (p *FriendshipStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FriendshipStatus(result.Int64)
	return
}

func (p *FriendshipStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SendPrivateMessageRequest struct {
	SenderId   int64  `thrift:"sender_id,1,required" frugal:"1,required,i64" json:"sender_id"`
	ReceiverId int64  `thrift:"receiver_id,2,required" frugal:"2,required,i64" json:"receiver_id"`
	Content    string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
}

func NewSendPrivateMessageRequest() *SendPrivateMessageRequest {
	return &SendPrivateMessageRequest{}
}

func (p *SendPrivateMessageRequest) InitDefault() {
}

func (p *SendPrivateMessageRequest) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *SendPrivateMessageRequest) GetReceiverId() (v int64) {
	return p.ReceiverId
}

func (p *SendPrivateMessageRequest) GetContent() (v string) {
	return p.Content
}
func (p *SendPrivateMessageRequest) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *SendPrivateMessageRequest) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *SendPrivateMessageRequest) SetContent(val string) {
	p.Content = val
}

func (p *SendPrivateMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendPrivateMessageRequest(%+v)", *p)
}

func (p *SendPrivateMessageRequest) DeepEqual(ano *SendPrivateMessageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SenderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ReceiverId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *SendPrivateMessageRequest) Field1DeepEqual(src int64) bool {

	if p.SenderId != src {
		return false
	}
	return true
}
func (p *SendPrivateMessageRequest) Field2DeepEqual(src int64) bool {

	if p.ReceiverId != src {
		return false
	}
	return true
}
func (p *SendPrivateMessageRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_SendPrivateMessageRequest = map[int16]string{
	1: "sender_id",
	2: "receiver_id",
	3: "content",
}

type SendPrivateMessageResponse struct {
	Base    *model.BaseResp       `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Message *model.PrivateMessage `thrift:"Message,2,required" frugal:"2,required,model.PrivateMessage" json:"Message"`
}

func NewSendPrivateMessageResponse() *SendPrivateMessageResponse {
	return &SendPrivateMessageResponse{}
}

func (p *SendPrivateMessageResponse) InitDefault() {
}

var SendPrivateMessageResponse_Base_DEFAULT *model.BaseResp

func (p *SendPrivateMessageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SendPrivateMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var SendPrivateMessageResponse_Message_DEFAULT *model.PrivateMessage

func (p *SendPrivateMessageResponse) GetMessage() (v *model.PrivateMessage) {
	if !p.IsSetMessage() {
		return SendPrivateMessageResponse_Message_DEFAULT
	}
	return p.Message
}
func (p *SendPrivateMessageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *SendPrivateMessageResponse) SetMessage(val *model.PrivateMessage) {
	p.Message = val
}

func (p *SendPrivateMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SendPrivateMessageResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendPrivateMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendPrivateMessageResponse(%+v)", *p)
}

func (p *SendPrivateMessageResponse) DeepEqual(ano *SendPrivateMessageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *SendPrivateMessageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SendPrivateMessageResponse) Field2DeepEqual(src *model.PrivateMessage) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SendPrivateMessageResponse = map[int16]string{
	1: "Base",
	2: "Message",
}

type GetPrivateMessagesRequest struct {
	UserId      int64  `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	OtherUserId int64  `thrift:"other_user_id,2,required" frugal:"2,required,i64" json:"other_user_id"`
	Page        *int32 `thrift:"page,3,optional" frugal:"3,optional,i32" json:"page,omitempty"`
	Size        *int32 `thrift:"size,4,optional" frugal:"4,optional,i32" json:"size,omitempty"`
}

func NewGetPrivateMessagesRequest() *GetPrivateMessagesRequest {
	return &GetPrivateMessagesRequest{}
}

func (p *GetPrivateMessagesRequest) InitDefault() {
}

func (p *GetPrivateMessagesRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetPrivateMessagesRequest) GetOtherUserId() (v int64) {
	return p.OtherUserId
}

var GetPrivateMessagesRequest_Page_DEFAULT int32

func (p *GetPrivateMessagesRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetPrivateMessagesRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetPrivateMessagesRequest_Size_DEFAULT int32

func (p *GetPrivateMessagesRequest) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetPrivateMessagesRequest_Size_DEFAULT
	}
	return *p.Size
}
func (p *GetPrivateMessagesRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetPrivateMessagesRequest) SetOtherUserId(val int64) {
	p.OtherUserId = val
}
func (p *GetPrivateMessagesRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *GetPrivateMessagesRequest) SetSize(val *int32) {
	p.Size = val
}

func (p *GetPrivateMessagesRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetPrivateMessagesRequest) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetPrivateMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivateMessagesRequest(%+v)", *p)
}

func (p *GetPrivateMessagesRequest) DeepEqual(ano *GetPrivateMessagesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OtherUserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Page) {
		return false
	}
	if !p.Field4DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *GetPrivateMessagesRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetPrivateMessagesRequest) Field2DeepEqual(src int64) bool {

	if p.OtherUserId != src {
		return false
	}
	return true
}
func (p *GetPrivateMessagesRequest) Field3DeepEqual(src *int32) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *GetPrivateMessagesRequest) Field4DeepEqual(src *int32) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}

var fieldIDToName_GetPrivateMessagesRequest = map[int16]string{
	1: "user_id",
	2: "other_user_id",
	3: "page",
	4: "size",
}

type GetPrivateMessagesResponse struct {
	Base        *model.BaseResp         `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	MessageList []*model.PrivateMessage `thrift:"MessageList,2,required" frugal:"2,required,list<model.PrivateMessage>" json:"MessageList"`
	Total       int64                   `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetPrivateMessagesResponse() *GetPrivateMessagesResponse {
	return &GetPrivateMessagesResponse{}
}

func (p *GetPrivateMessagesResponse) InitDefault() {
}

var GetPrivateMessagesResponse_Base_DEFAULT *model.BaseResp

func (p *GetPrivateMessagesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPrivateMessagesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPrivateMessagesResponse) GetMessageList() (v []*model.PrivateMessage) {
	return p.MessageList
}

func (p *GetPrivateMessagesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetPrivateMessagesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPrivateMessagesResponse) SetMessageList(val []*model.PrivateMessage) {
	p.MessageList = val
}
func (p *GetPrivateMessagesResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetPrivateMessagesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPrivateMessagesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivateMessagesResponse(%+v)", *p)
}

func (p *GetPrivateMessagesResponse) DeepEqual(ano *GetPrivateMessagesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.MessageList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetPrivateMessagesResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetPrivateMessagesResponse) Field2DeepEqual(src []*model.PrivateMessage) bool {

	if len(p.MessageList) != len(src) {
		return false
	}
	for i, v := range p.MessageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPrivateMessagesResponse) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_GetPrivateMessagesResponse = map[int16]string{
	1: "Base",
	2: "MessageList",
	3: "Total",
}

type CreateChatRoomRequest struct {
	CreatorId int64   `thrift:"creator_id,1,required" frugal:"1,required,i64" json:"creator_id"`
	Name      string  `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Type      int8    `thrift:"type,3,required" frugal:"3,required,i8" json:"type"`
	MemberIds []int64 `thrift:"member_ids,4,optional" frugal:"4,optional,list<i64>" json:"member_ids,omitempty"`
}

func NewCreateChatRoomRequest() *CreateChatRoomRequest {
	return &CreateChatRoomRequest{}
}

func (p *CreateChatRoomRequest) InitDefault() {
}

func (p *CreateChatRoomRequest) GetCreatorId() (v int64) {
	return p.CreatorId
}

func (p *CreateChatRoomRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateChatRoomRequest) GetType() (v int8) {
	return p.Type
}

var CreateChatRoomRequest_MemberIds_DEFAULT []int64

func (p *CreateChatRoomRequest) GetMemberIds() (v []int64) {
	if !p.IsSetMemberIds() {
		return CreateChatRoomRequest_MemberIds_DEFAULT
	}
	return p.MemberIds
}
func (p *CreateChatRoomRequest) SetCreatorId(val int64) {
	p.CreatorId = val
}
func (p *CreateChatRoomRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateChatRoomRequest) SetType(val int8) {
	p.Type = val
}
func (p *CreateChatRoomRequest) SetMemberIds(val []int64) {
	p.MemberIds = val
}

func (p *CreateChatRoomRequest) IsSetMemberIds() bool {
	return p.MemberIds != nil
}

func (p *CreateChatRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatRoomRequest(%+v)", *p)
}

func (p *CreateChatRoomRequest) DeepEqual(ano *CreateChatRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CreatorId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.MemberIds) {
		return false
	}
	return true
}

func (p *CreateChatRoomRequest) Field1DeepEqual(src int64) bool {

	if p.CreatorId != src {
		return false
	}
	return true
}
func (p *CreateChatRoomRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateChatRoomRequest) Field3DeepEqual(src int8) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *CreateChatRoomRequest) Field4DeepEqual(src []int64) bool {

	if len(p.MemberIds) != len(src) {
		return false
	}
	for i, v := range p.MemberIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_CreateChatRoomRequest = map[int16]string{
	1: "creator_id",
	2: "name",
	3: "type",
	4: "member_ids",
}

type CreateChatRoomResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Room *model.ChatRoom `thrift:"Room,2,required" frugal:"2,required,model.ChatRoom" json:"Room"`
}

func NewCreateChatRoomResponse() *CreateChatRoomResponse {
	return &CreateChatRoomResponse{}
}

func (p *CreateChatRoomResponse) InitDefault() {
}

var CreateChatRoomResponse_Base_DEFAULT *model.BaseResp

func (p *CreateChatRoomResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateChatRoomResponse_Base_DEFAULT
	}
	return p.Base
}

var CreateChatRoomResponse_Room_DEFAULT *model.ChatRoom

func (p *CreateChatRoomResponse) GetRoom() (v *model.ChatRoom) {
	if !p.IsSetRoom() {
		return CreateChatRoomResponse_Room_DEFAULT
	}
	return p.Room
}
func (p *CreateChatRoomResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateChatRoomResponse) SetRoom(val *model.ChatRoom) {
	p.Room = val
}

func (p *CreateChatRoomResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateChatRoomResponse) IsSetRoom() bool {
	return p.Room != nil
}

func (p *CreateChatRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatRoomResponse(%+v)", *p)
}

func (p *CreateChatRoomResponse) DeepEqual(ano *CreateChatRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Room) {
		return false
	}
	return true
}

func (p *CreateChatRoomResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateChatRoomResponse) Field2DeepEqual(src *model.ChatRoom) bool {

	if !p.Room.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CreateChatRoomResponse = map[int16]string{
	1: "Base",
	2: "Room",
}

type GetChatRoomRequest struct {
	RoomId int64 `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	UserId int64 `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
}

func NewGetChatRoomRequest() *GetChatRoomRequest {
	return &GetChatRoomRequest{}
}

func (p *GetChatRoomRequest) InitDefault() {
}

func (p *GetChatRoomRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *GetChatRoomRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetChatRoomRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *GetChatRoomRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetChatRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatRoomRequest(%+v)", *p)
}

func (p *GetChatRoomRequest) DeepEqual(ano *GetChatRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoomId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetChatRoomRequest) Field1DeepEqual(src int64) bool {

	if p.RoomId != src {
		return false
	}
	return true
}
func (p *GetChatRoomRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_GetChatRoomRequest = map[int16]string{
	1: "room_id",
	2: "user_id",
}

type GetChatRoomResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Room *model.ChatRoom `thrift:"Room,2,required" frugal:"2,required,model.ChatRoom" json:"Room"`
}

func NewGetChatRoomResponse() *GetChatRoomResponse {
	return &GetChatRoomResponse{}
}

func (p *GetChatRoomResponse) InitDefault() {
}

var GetChatRoomResponse_Base_DEFAULT *model.BaseResp

func (p *GetChatRoomResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetChatRoomResponse_Base_DEFAULT
	}
	return p.Base
}

var GetChatRoomResponse_Room_DEFAULT *model.ChatRoom

func (p *GetChatRoomResponse) GetRoom() (v *model.ChatRoom) {
	if !p.IsSetRoom() {
		return GetChatRoomResponse_Room_DEFAULT
	}
	return p.Room
}
func (p *GetChatRoomResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetChatRoomResponse) SetRoom(val *model.ChatRoom) {
	p.Room = val
}

func (p *GetChatRoomResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetChatRoomResponse) IsSetRoom() bool {
	return p.Room != nil
}

func (p *GetChatRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatRoomResponse(%+v)", *p)
}

func (p *GetChatRoomResponse) DeepEqual(ano *GetChatRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Room) {
		return false
	}
	return true
}

func (p *GetChatRoomResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetChatRoomResponse) Field2DeepEqual(src *model.ChatRoom) bool {

	if !p.Room.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_GetChatRoomResponse = map[int16]string{
	1: "Base",
	2: "Room",
}

type GetUserChatRoomsRequest struct {
	UserId int64  `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	Page   *int32 `thrift:"page,2,optional" frugal:"2,optional,i32" json:"page,omitempty"`
	Size   *int32 `thrift:"size,3,optional" frugal:"3,optional,i32" json:"size,omitempty"`
}

func NewGetUserChatRoomsRequest() *GetUserChatRoomsRequest {
	return &GetUserChatRoomsRequest{}
}

func (p *GetUserChatRoomsRequest) InitDefault() {
}

func (p *GetUserChatRoomsRequest) GetUserId() (v int64) {
	return p.UserId
}

var GetUserChatRoomsRequest_Page_DEFAULT int32

func (p *GetUserChatRoomsRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetUserChatRoomsRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetUserChatRoomsRequest_Size_DEFAULT int32

func (p *GetUserChatRoomsRequest) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetUserChatRoomsRequest_Size_DEFAULT
	}
	return *p.Size
}
func (p *GetUserChatRoomsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserChatRoomsRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *GetUserChatRoomsRequest) SetSize(val *int32) {
	p.Size = val
}

func (p *GetUserChatRoomsRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetUserChatRoomsRequest) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetUserChatRoomsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserChatRoomsRequest(%+v)", *p)
}

func (p *GetUserChatRoomsRequest) DeepEqual(ano *GetUserChatRoomsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *GetUserChatRoomsRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetUserChatRoomsRequest) Field2DeepEqual(src *int32) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *GetUserChatRoomsRequest) Field3DeepEqual(src *int32) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}

var fieldIDToName_GetUserChatRoomsRequest = map[int16]string{
	1: "user_id",
	2: "page",
	3: "size",
}

type GetUserChatRoomsResponse struct {
	Base     *model.BaseResp   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	RoomList []*model.ChatRoom `thrift:"RoomList,2,required" frugal:"2,required,list<model.ChatRoom>" json:"RoomList"`
	Total    int64             `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetUserChatRoomsResponse() *GetUserChatRoomsResponse {
	return &GetUserChatRoomsResponse{}
}

func (p *GetUserChatRoomsResponse) InitDefault() {
}

var GetUserChatRoomsResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserChatRoomsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserChatRoomsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetUserChatRoomsResponse) GetRoomList() (v []*model.ChatRoom) {
	return p.RoomList
}

func (p *GetUserChatRoomsResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetUserChatRoomsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserChatRoomsResponse) SetRoomList(val []*model.ChatRoom) {
	p.RoomList = val
}
func (p *GetUserChatRoomsResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetUserChatRoomsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserChatRoomsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserChatRoomsResponse(%+v)", *p)
}

func (p *GetUserChatRoomsResponse) DeepEqual(ano *GetUserChatRoomsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.RoomList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetUserChatRoomsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserChatRoomsResponse) Field2DeepEqual(src []*model.ChatRoom) bool {

	if len(p.RoomList) != len(src) {
		return false
	}
	for i, v := range p.RoomList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetUserChatRoomsResponse) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_GetUserChatRoomsResponse = map[int16]string{
	1: "Base",
	2: "RoomList",
	3: "Total",
}

type SendChatMessageRequest struct {
	RoomId   int64  `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	SenderId int64  `thrift:"sender_id,2,required" frugal:"2,required,i64" json:"sender_id"`
	Content  string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
	Type     *int8  `thrift:"type,4,optional" frugal:"4,optional,i8" json:"type,omitempty"`
}

func NewSendChatMessageRequest() *SendChatMessageRequest {
	return &SendChatMessageRequest{}
}

func (p *SendChatMessageRequest) InitDefault() {
}

func (p *SendChatMessageRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *SendChatMessageRequest) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *SendChatMessageRequest) GetContent() (v string) {
	return p.Content
}

var SendChatMessageRequest_Type_DEFAULT int8

func (p *SendChatMessageRequest) GetType() (v int8) {
	if !p.IsSetType() {
		return SendChatMessageRequest_Type_DEFAULT
	}
	return *p.Type
}
func (p *SendChatMessageRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *SendChatMessageRequest) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *SendChatMessageRequest) SetContent(val string) {
	p.Content = val
}
func (p *SendChatMessageRequest) SetType(val *int8) {
	p.Type = val
}

func (p *SendChatMessageRequest) IsSetType() bool {
	return p.Type != nil
}

func (p *SendChatMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatMessageRequest(%+v)", *p)
}

func (p *SendChatMessageRequest) DeepEqual(ano *SendChatMessageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoomId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SenderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *SendChatMessageRequest) Field1DeepEqual(src int64) bool {

	if p.RoomId != src {
		return false
	}
	return true
}
func (p *SendChatMessageRequest) Field2DeepEqual(src int64) bool {

	if p.SenderId != src {
		return false
	}
	return true
}
func (p *SendChatMessageRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *SendChatMessageRequest) Field4DeepEqual(src *int8) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}

var fieldIDToName_SendChatMessageRequest = map[int16]string{
	1: "room_id",
	2: "sender_id",
	3: "content",
	4: "type",
}

type SendChatMessageResponse struct {
	Base    *model.BaseResp    `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Message *model.ChatMessage `thrift:"Message,2,required" frugal:"2,required,model.ChatMessage" json:"Message"`
}

func NewSendChatMessageResponse() *SendChatMessageResponse {
	return &SendChatMessageResponse{}
}

func (p *SendChatMessageResponse) InitDefault() {
}

var SendChatMessageResponse_Base_DEFAULT *model.BaseResp

func (p *SendChatMessageResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SendChatMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var SendChatMessageResponse_Message_DEFAULT *model.ChatMessage

func (p *SendChatMessageResponse) GetMessage() (v *model.ChatMessage) {
	if !p.IsSetMessage() {
		return SendChatMessageResponse_Message_DEFAULT
	}
	return p.Message
}
func (p *SendChatMessageResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *SendChatMessageResponse) SetMessage(val *model.ChatMessage) {
	p.Message = val
}

func (p *SendChatMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SendChatMessageResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendChatMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatMessageResponse(%+v)", *p)
}

func (p *SendChatMessageResponse) DeepEqual(ano *SendChatMessageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *SendChatMessageResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SendChatMessageResponse) Field2DeepEqual(src *model.ChatMessage) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SendChatMessageResponse = map[int16]string{
	1: "Base",
	2: "Message",
}

type GetChatMessagesRequest struct {
	RoomId int64  `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	UserId int64  `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	Page   *int64 `thrift:"page,3,optional" frugal:"3,optional,i64" json:"page,omitempty"`
	Size   *int32 `thrift:"size,4,optional" frugal:"4,optional,i32" json:"size,omitempty"`
}

func NewGetChatMessagesRequest() *GetChatMessagesRequest {
	return &GetChatMessagesRequest{}
}

func (p *GetChatMessagesRequest) InitDefault() {
}

func (p *GetChatMessagesRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *GetChatMessagesRequest) GetUserId() (v int64) {
	return p.UserId
}

var GetChatMessagesRequest_Page_DEFAULT int64

func (p *GetChatMessagesRequest) GetPage() (v int64) {
	if !p.IsSetPage() {
		return GetChatMessagesRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetChatMessagesRequest_Size_DEFAULT int32

func (p *GetChatMessagesRequest) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetChatMessagesRequest_Size_DEFAULT
	}
	return *p.Size
}
func (p *GetChatMessagesRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *GetChatMessagesRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetChatMessagesRequest) SetPage(val *int64) {
	p.Page = val
}
func (p *GetChatMessagesRequest) SetSize(val *int32) {
	p.Size = val
}

func (p *GetChatMessagesRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetChatMessagesRequest) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetChatMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatMessagesRequest(%+v)", *p)
}

func (p *GetChatMessagesRequest) DeepEqual(ano *GetChatMessagesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoomId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Page) {
		return false
	}
	if !p.Field4DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *GetChatMessagesRequest) Field1DeepEqual(src int64) bool {

	if p.RoomId != src {
		return false
	}
	return true
}
func (p *GetChatMessagesRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetChatMessagesRequest) Field3DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *GetChatMessagesRequest) Field4DeepEqual(src *int32) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}

var fieldIDToName_GetChatMessagesRequest = map[int16]string{
	1: "room_id",
	2: "user_id",
	3: "page",
	4: "size",
}

type GetChatMessagesResponse struct {
	Base        *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	MessageList []*model.ChatMessage `thrift:"MessageList,2,required" frugal:"2,required,list<model.ChatMessage>" json:"MessageList"`
	Total       int64                `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetChatMessagesResponse() *GetChatMessagesResponse {
	return &GetChatMessagesResponse{}
}

func (p *GetChatMessagesResponse) InitDefault() {
}

var GetChatMessagesResponse_Base_DEFAULT *model.BaseResp

func (p *GetChatMessagesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetChatMessagesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetChatMessagesResponse) GetMessageList() (v []*model.ChatMessage) {
	return p.MessageList
}

func (p *GetChatMessagesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetChatMessagesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetChatMessagesResponse) SetMessageList(val []*model.ChatMessage) {
	p.MessageList = val
}
func (p *GetChatMessagesResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetChatMessagesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetChatMessagesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatMessagesResponse(%+v)", *p)
}

func (p *GetChatMessagesResponse) DeepEqual(ano *GetChatMessagesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.MessageList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetChatMessagesResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetChatMessagesResponse) Field2DeepEqual(src []*model.ChatMessage) bool {

	if len(p.MessageList) != len(src) {
		return false
	}
	for i, v := range p.MessageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetChatMessagesResponse) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_GetChatMessagesResponse = map[int16]string{
	1: "Base",
	2: "MessageList",
	3: "Total",
}

type AddFriendRequest struct {
	UserId   int64   `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	FriendId int64   `thrift:"friend_id,2,required" frugal:"2,required,i64" json:"friend_id"`
	Remark   *string `thrift:"remark,3,optional" frugal:"3,optional,string" json:"remark,omitempty"`
}

func NewAddFriendRequest() *AddFriendRequest {
	return &AddFriendRequest{}
}

func (p *AddFriendRequest) InitDefault() {
}

func (p *AddFriendRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *AddFriendRequest) GetFriendId() (v int64) {
	return p.FriendId
}

var AddFriendRequest_Remark_DEFAULT string

func (p *AddFriendRequest) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return AddFriendRequest_Remark_DEFAULT
	}
	return *p.Remark
}
func (p *AddFriendRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *AddFriendRequest) SetFriendId(val int64) {
	p.FriendId = val
}
func (p *AddFriendRequest) SetRemark(val *string) {
	p.Remark = val
}

func (p *AddFriendRequest) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *AddFriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendRequest(%+v)", *p)
}

func (p *AddFriendRequest) DeepEqual(ano *AddFriendRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FriendId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *AddFriendRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *AddFriendRequest) Field2DeepEqual(src int64) bool {

	if p.FriendId != src {
		return false
	}
	return true
}
func (p *AddFriendRequest) Field3DeepEqual(src *string) bool {

	if p.Remark == src {
		return true
	} else if p.Remark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Remark, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_AddFriendRequest = map[int16]string{
	1: "user_id",
	2: "friend_id",
	3: "remark",
}

type AddFriendResponse struct {
	Base   *model.BaseResp   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Friend *model.Friendship `thrift:"Friend,2,required" frugal:"2,required,model.Friendship" json:"Friend"`
}

func NewAddFriendResponse() *AddFriendResponse {
	return &AddFriendResponse{}
}

func (p *AddFriendResponse) InitDefault() {
}

var AddFriendResponse_Base_DEFAULT *model.BaseResp

func (p *AddFriendResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddFriendResponse_Base_DEFAULT
	}
	return p.Base
}

var AddFriendResponse_Friend_DEFAULT *model.Friendship

func (p *AddFriendResponse) GetFriend() (v *model.Friendship) {
	if !p.IsSetFriend() {
		return AddFriendResponse_Friend_DEFAULT
	}
	return p.Friend
}
func (p *AddFriendResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddFriendResponse) SetFriend(val *model.Friendship) {
	p.Friend = val
}

func (p *AddFriendResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddFriendResponse) IsSetFriend() bool {
	return p.Friend != nil
}

func (p *AddFriendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendResponse(%+v)", *p)
}

func (p *AddFriendResponse) DeepEqual(ano *AddFriendResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Friend) {
		return false
	}
	return true
}

func (p *AddFriendResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddFriendResponse) Field2DeepEqual(src *model.Friendship) bool {

	if !p.Friend.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_AddFriendResponse = map[int16]string{
	1: "Base",
	2: "Friend",
}

type GetUserFriendsRequest struct {
	UserId int64  `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	Page   *int32 `thrift:"page,2,optional" frugal:"2,optional,i32" json:"page,omitempty"`
	Size   *int32 `thrift:"size,3,optional" frugal:"3,optional,i32" json:"size,omitempty"`
}

func NewGetUserFriendsRequest() *GetUserFriendsRequest {
	return &GetUserFriendsRequest{}
}

func (p *GetUserFriendsRequest) InitDefault() {
}

func (p *GetUserFriendsRequest) GetUserId() (v int64) {
	return p.UserId
}

var GetUserFriendsRequest_Page_DEFAULT int32

func (p *GetUserFriendsRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetUserFriendsRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetUserFriendsRequest_Size_DEFAULT int32

func (p *GetUserFriendsRequest) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetUserFriendsRequest_Size_DEFAULT
	}
	return *p.Size
}
func (p *GetUserFriendsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserFriendsRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *GetUserFriendsRequest) SetSize(val *int32) {
	p.Size = val
}

func (p *GetUserFriendsRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetUserFriendsRequest) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetUserFriendsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserFriendsRequest(%+v)", *p)
}

func (p *GetUserFriendsRequest) DeepEqual(ano *GetUserFriendsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *GetUserFriendsRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetUserFriendsRequest) Field2DeepEqual(src *int32) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *GetUserFriendsRequest) Field3DeepEqual(src *int32) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}

var fieldIDToName_GetUserFriendsRequest = map[int16]string{
	1: "user_id",
	2: "page",
	3: "size",
}

type GetUserFriendsResponse struct {
	Base       *model.BaseResp     `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	FriendList []*model.Friendship `thrift:"FriendList,2,required" frugal:"2,required,list<model.Friendship>" json:"FriendList"`
	Total      int64               `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetUserFriendsResponse() *GetUserFriendsResponse {
	return &GetUserFriendsResponse{}
}

func (p *GetUserFriendsResponse) InitDefault() {
}

var GetUserFriendsResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserFriendsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserFriendsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetUserFriendsResponse) GetFriendList() (v []*model.Friendship) {
	return p.FriendList
}

func (p *GetUserFriendsResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetUserFriendsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserFriendsResponse) SetFriendList(val []*model.Friendship) {
	p.FriendList = val
}
func (p *GetUserFriendsResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetUserFriendsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserFriendsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserFriendsResponse(%+v)", *p)
}

func (p *GetUserFriendsResponse) DeepEqual(ano *GetUserFriendsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.FriendList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetUserFriendsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserFriendsResponse) Field2DeepEqual(src []*model.Friendship) bool {

	if len(p.FriendList) != len(src) {
		return false
	}
	for i, v := range p.FriendList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetUserFriendsResponse) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_GetUserFriendsResponse = map[int16]string{
	1: "Base",
	2: "FriendList",
	3: "Total",
}

type GetFriendshipRequest struct {
	UserId   int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	FriendId int64 `thrift:"friend_id,2,required" frugal:"2,required,i64" json:"friend_id"`
}

func NewGetFriendshipRequest() *GetFriendshipRequest {
	return &GetFriendshipRequest{}
}

func (p *GetFriendshipRequest) InitDefault() {
}

func (p *GetFriendshipRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFriendshipRequest) GetFriendId() (v int64) {
	return p.FriendId
}
func (p *GetFriendshipRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFriendshipRequest) SetFriendId(val int64) {
	p.FriendId = val
}

func (p *GetFriendshipRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFriendshipRequest(%+v)", *p)
}

func (p *GetFriendshipRequest) DeepEqual(ano *GetFriendshipRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FriendId) {
		return false
	}
	return true
}

func (p *GetFriendshipRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetFriendshipRequest) Field2DeepEqual(src int64) bool {

	if p.FriendId != src {
		return false
	}
	return true
}

var fieldIDToName_GetFriendshipRequest = map[int16]string{
	1: "user_id",
	2: "friend_id",
}

type GetFriendshipResponse struct {
	Base   *model.BaseResp   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Friend *model.Friendship `thrift:"Friend,2,required" frugal:"2,required,model.Friendship" json:"Friend"`
}

func NewGetFriendshipResponse() *GetFriendshipResponse {
	return &GetFriendshipResponse{}
}

func (p *GetFriendshipResponse) InitDefault() {
}

var GetFriendshipResponse_Base_DEFAULT *model.BaseResp

func (p *GetFriendshipResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFriendshipResponse_Base_DEFAULT
	}
	return p.Base
}

var GetFriendshipResponse_Friend_DEFAULT *model.Friendship

func (p *GetFriendshipResponse) GetFriend() (v *model.Friendship) {
	if !p.IsSetFriend() {
		return GetFriendshipResponse_Friend_DEFAULT
	}
	return p.Friend
}
func (p *GetFriendshipResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFriendshipResponse) SetFriend(val *model.Friendship) {
	p.Friend = val
}

func (p *GetFriendshipResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFriendshipResponse) IsSetFriend() bool {
	return p.Friend != nil
}

func (p *GetFriendshipResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFriendshipResponse(%+v)", *p)
}

func (p *GetFriendshipResponse) DeepEqual(ano *GetFriendshipResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Friend) {
		return false
	}
	return true
}

func (p *GetFriendshipResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetFriendshipResponse) Field2DeepEqual(src *model.Friendship) bool {

	if !p.Friend.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_GetFriendshipResponse = map[int16]string{
	1: "Base",
	2: "Friend",
}

type CreateFriendRequestRequest struct {
	SenderId   int64   `thrift:"sender_id,1,required" frugal:"1,required,i64" json:"sender_id"`
	ReceiverId int64   `thrift:"receiver_id,2,required" frugal:"2,required,i64" json:"receiver_id"`
	Message    *string `thrift:"message,3,optional" frugal:"3,optional,string" json:"message,omitempty"`
}

func NewCreateFriendRequestRequest() *CreateFriendRequestRequest {
	return &CreateFriendRequestRequest{}
}

func (p *CreateFriendRequestRequest) InitDefault() {
}

func (p *CreateFriendRequestRequest) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *CreateFriendRequestRequest) GetReceiverId() (v int64) {
	return p.ReceiverId
}

var CreateFriendRequestRequest_Message_DEFAULT string

func (p *CreateFriendRequestRequest) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return CreateFriendRequestRequest_Message_DEFAULT
	}
	return *p.Message
}
func (p *CreateFriendRequestRequest) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *CreateFriendRequestRequest) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *CreateFriendRequestRequest) SetMessage(val *string) {
	p.Message = val
}

func (p *CreateFriendRequestRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *CreateFriendRequestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFriendRequestRequest(%+v)", *p)
}

func (p *CreateFriendRequestRequest) DeepEqual(ano *CreateFriendRequestRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SenderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ReceiverId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *CreateFriendRequestRequest) Field1DeepEqual(src int64) bool {

	if p.SenderId != src {
		return false
	}
	return true
}
func (p *CreateFriendRequestRequest) Field2DeepEqual(src int64) bool {

	if p.ReceiverId != src {
		return false
	}
	return true
}
func (p *CreateFriendRequestRequest) Field3DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CreateFriendRequestRequest = map[int16]string{
	1: "sender_id",
	2: "receiver_id",
	3: "message",
}

type CreateFriendRequestResponse struct {
	Base    *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Request *model.FriendRequest `thrift:"Request,2,required" frugal:"2,required,model.FriendRequest" json:"Request"`
}

func NewCreateFriendRequestResponse() *CreateFriendRequestResponse {
	return &CreateFriendRequestResponse{}
}

func (p *CreateFriendRequestResponse) InitDefault() {
}

var CreateFriendRequestResponse_Base_DEFAULT *model.BaseResp

func (p *CreateFriendRequestResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateFriendRequestResponse_Base_DEFAULT
	}
	return p.Base
}

var CreateFriendRequestResponse_Request_DEFAULT *model.FriendRequest

func (p *CreateFriendRequestResponse) GetRequest() (v *model.FriendRequest) {
	if !p.IsSetRequest() {
		return CreateFriendRequestResponse_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateFriendRequestResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateFriendRequestResponse) SetRequest(val *model.FriendRequest) {
	p.Request = val
}

func (p *CreateFriendRequestResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFriendRequestResponse) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateFriendRequestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFriendRequestResponse(%+v)", *p)
}

func (p *CreateFriendRequestResponse) DeepEqual(ano *CreateFriendRequestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CreateFriendRequestResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateFriendRequestResponse) Field2DeepEqual(src *model.FriendRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CreateFriendRequestResponse = map[int16]string{
	1: "Base",
	2: "Request",
}

type GetFriendRequestsRequest struct {
	UserId int64  `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	Type   *int8  `thrift:"type,2,optional" frugal:"2,optional,i8" json:"type,omitempty"`
	Page   *int32 `thrift:"page,3,optional" frugal:"3,optional,i32" json:"page,omitempty"`
	Size   *int32 `thrift:"size,4,optional" frugal:"4,optional,i32" json:"size,omitempty"`
}

func NewGetFriendRequestsRequest() *GetFriendRequestsRequest {
	return &GetFriendRequestsRequest{}
}

func (p *GetFriendRequestsRequest) InitDefault() {
}

func (p *GetFriendRequestsRequest) GetUserId() (v int64) {
	return p.UserId
}

var GetFriendRequestsRequest_Type_DEFAULT int8

func (p *GetFriendRequestsRequest) GetType() (v int8) {
	if !p.IsSetType() {
		return GetFriendRequestsRequest_Type_DEFAULT
	}
	return *p.Type
}

var GetFriendRequestsRequest_Page_DEFAULT int32

func (p *GetFriendRequestsRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetFriendRequestsRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetFriendRequestsRequest_Size_DEFAULT int32

func (p *GetFriendRequestsRequest) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetFriendRequestsRequest_Size_DEFAULT
	}
	return *p.Size
}
func (p *GetFriendRequestsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFriendRequestsRequest) SetType(val *int8) {
	p.Type = val
}
func (p *GetFriendRequestsRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *GetFriendRequestsRequest) SetSize(val *int32) {
	p.Size = val
}

func (p *GetFriendRequestsRequest) IsSetType() bool {
	return p.Type != nil
}

func (p *GetFriendRequestsRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetFriendRequestsRequest) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetFriendRequestsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFriendRequestsRequest(%+v)", *p)
}

func (p *GetFriendRequestsRequest) DeepEqual(ano *GetFriendRequestsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Page) {
		return false
	}
	if !p.Field4DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *GetFriendRequestsRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetFriendRequestsRequest) Field2DeepEqual(src *int8) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *GetFriendRequestsRequest) Field3DeepEqual(src *int32) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *GetFriendRequestsRequest) Field4DeepEqual(src *int32) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}

var fieldIDToName_GetFriendRequestsRequest = map[int16]string{
	1: "user_id",
	2: "type",
	3: "page",
	4: "size",
}

type GetFriendRequestsResponse struct {
	Base        *model.BaseResp        `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	RequestList []*model.FriendRequest `thrift:"RequestList,2,required" frugal:"2,required,list<model.FriendRequest>" json:"RequestList"`
	Total       int64                  `thrift:"Total,3,required" frugal:"3,required,i64" json:"Total"`
}

func NewGetFriendRequestsResponse() *GetFriendRequestsResponse {
	return &GetFriendRequestsResponse{}
}

func (p *GetFriendRequestsResponse) InitDefault() {
}

var GetFriendRequestsResponse_Base_DEFAULT *model.BaseResp

func (p *GetFriendRequestsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFriendRequestsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFriendRequestsResponse) GetRequestList() (v []*model.FriendRequest) {
	return p.RequestList
}

func (p *GetFriendRequestsResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetFriendRequestsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFriendRequestsResponse) SetRequestList(val []*model.FriendRequest) {
	p.RequestList = val
}
func (p *GetFriendRequestsResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetFriendRequestsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFriendRequestsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFriendRequestsResponse(%+v)", *p)
}

func (p *GetFriendRequestsResponse) DeepEqual(ano *GetFriendRequestsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.RequestList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetFriendRequestsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetFriendRequestsResponse) Field2DeepEqual(src []*model.FriendRequest) bool {

	if len(p.RequestList) != len(src) {
		return false
	}
	for i, v := range p.RequestList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetFriendRequestsResponse) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_GetFriendRequestsResponse = map[int16]string{
	1: "Base",
	2: "RequestList",
	3: "Total",
}

type HandleFriendRequestRequest struct {
	RequestId int64 `thrift:"request_id,1,required" frugal:"1,required,i64" json:"request_id"`
	UserId    int64 `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	Action    int8  `thrift:"action,3,required" frugal:"3,required,i8" json:"action"`
}

func NewHandleFriendRequestRequest() *HandleFriendRequestRequest {
	return &HandleFriendRequestRequest{}
}

func (p *HandleFriendRequestRequest) InitDefault() {
}

func (p *HandleFriendRequestRequest) GetRequestId() (v int64) {
	return p.RequestId
}

func (p *HandleFriendRequestRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *HandleFriendRequestRequest) GetAction() (v int8) {
	return p.Action
}
func (p *HandleFriendRequestRequest) SetRequestId(val int64) {
	p.RequestId = val
}
func (p *HandleFriendRequestRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *HandleFriendRequestRequest) SetAction(val int8) {
	p.Action = val
}

func (p *HandleFriendRequestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HandleFriendRequestRequest(%+v)", *p)
}

func (p *HandleFriendRequestRequest) DeepEqual(ano *HandleFriendRequestRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RequestId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Action) {
		return false
	}
	return true
}

func (p *HandleFriendRequestRequest) Field1DeepEqual(src int64) bool {

	if p.RequestId != src {
		return false
	}
	return true
}
func (p *HandleFriendRequestRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *HandleFriendRequestRequest) Field3DeepEqual(src int8) bool {

	if p.Action != src {
		return false
	}
	return true
}

var fieldIDToName_HandleFriendRequestRequest = map[int16]string{
	1: "request_id",
	2: "user_id",
	3: "action",
}

type HandleFriendRequestResponse struct {
	Base    *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Request *model.FriendRequest `thrift:"Request,2,required" frugal:"2,required,model.FriendRequest" json:"Request"`
	Friend  *model.Friendship    `thrift:"Friend,3,optional" frugal:"3,optional,model.Friendship" json:"Friend,omitempty"`
}

func NewHandleFriendRequestResponse() *HandleFriendRequestResponse {
	return &HandleFriendRequestResponse{}
}

func (p *HandleFriendRequestResponse) InitDefault() {
}

var HandleFriendRequestResponse_Base_DEFAULT *model.BaseResp

func (p *HandleFriendRequestResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return HandleFriendRequestResponse_Base_DEFAULT
	}
	return p.Base
}

var HandleFriendRequestResponse_Request_DEFAULT *model.FriendRequest

func (p *HandleFriendRequestResponse) GetRequest() (v *model.FriendRequest) {
	if !p.IsSetRequest() {
		return HandleFriendRequestResponse_Request_DEFAULT
	}
	return p.Request
}

var HandleFriendRequestResponse_Friend_DEFAULT *model.Friendship

func (p *HandleFriendRequestResponse) GetFriend() (v *model.Friendship) {
	if !p.IsSetFriend() {
		return HandleFriendRequestResponse_Friend_DEFAULT
	}
	return p.Friend
}
func (p *HandleFriendRequestResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *HandleFriendRequestResponse) SetRequest(val *model.FriendRequest) {
	p.Request = val
}
func (p *HandleFriendRequestResponse) SetFriend(val *model.Friendship) {
	p.Friend = val
}

func (p *HandleFriendRequestResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *HandleFriendRequestResponse) IsSetRequest() bool {
	return p.Request != nil
}

func (p *HandleFriendRequestResponse) IsSetFriend() bool {
	return p.Friend != nil
}

func (p *HandleFriendRequestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HandleFriendRequestResponse(%+v)", *p)
}

func (p *HandleFriendRequestResponse) DeepEqual(ano *HandleFriendRequestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Request) {
		return false
	}
	if !p.Field3DeepEqual(ano.Friend) {
		return false
	}
	return true
}

func (p *HandleFriendRequestResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *HandleFriendRequestResponse) Field2DeepEqual(src *model.FriendRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}
func (p *HandleFriendRequestResponse) Field3DeepEqual(src *model.Friendship) bool {

	if !p.Friend.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_HandleFriendRequestResponse = map[int16]string{
	1: "Base",
	2: "Request",
	3: "Friend",
}

type MarkMessageReadRequest struct {
	MessageId int64 `thrift:"message_id,1,required" frugal:"1,required,i64" json:"message_id"`
	UserId    int64 `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
}

func NewMarkMessageReadRequest() *MarkMessageReadRequest {
	return &MarkMessageReadRequest{}
}

func (p *MarkMessageReadRequest) InitDefault() {
}

func (p *MarkMessageReadRequest) GetMessageId() (v int64) {
	return p.MessageId
}

func (p *MarkMessageReadRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *MarkMessageReadRequest) SetMessageId(val int64) {
	p.MessageId = val
}
func (p *MarkMessageReadRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *MarkMessageReadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkMessageReadRequest(%+v)", *p)
}

func (p *MarkMessageReadRequest) DeepEqual(ano *MarkMessageReadRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MessageId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *MarkMessageReadRequest) Field1DeepEqual(src int64) bool {

	if p.MessageId != src {
		return false
	}
	return true
}
func (p *MarkMessageReadRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_MarkMessageReadRequest = map[int16]string{
	1: "message_id",
	2: "user_id",
}

type MarkMessageReadResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewMarkMessageReadResponse() *MarkMessageReadResponse {
	return &MarkMessageReadResponse{}
}

func (p *MarkMessageReadResponse) InitDefault() {
}

var MarkMessageReadResponse_Base_DEFAULT *model.BaseResp

func (p *MarkMessageReadResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return MarkMessageReadResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *MarkMessageReadResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *MarkMessageReadResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MarkMessageReadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkMessageReadResponse(%+v)", *p)
}

func (p *MarkMessageReadResponse) DeepEqual(ano *MarkMessageReadResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *MarkMessageReadResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_MarkMessageReadResponse = map[int16]string{
	1: "Base",
}

type GetUnreadMessageCountRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewGetUnreadMessageCountRequest() *GetUnreadMessageCountRequest {
	return &GetUnreadMessageCountRequest{}
}

func (p *GetUnreadMessageCountRequest) InitDefault() {
}

func (p *GetUnreadMessageCountRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetUnreadMessageCountRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetUnreadMessageCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnreadMessageCountRequest(%+v)", *p)
}

func (p *GetUnreadMessageCountRequest) DeepEqual(ano *GetUnreadMessageCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetUnreadMessageCountRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_GetUnreadMessageCountRequest = map[int16]string{
	1: "user_id",
}

type GetUnreadMessageCountResponse struct {
	Base  *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Count int64           `thrift:"Count,2,required" frugal:"2,required,i64" json:"Count"`
}

func NewGetUnreadMessageCountResponse() *GetUnreadMessageCountResponse {
	return &GetUnreadMessageCountResponse{}
}

func (p *GetUnreadMessageCountResponse) InitDefault() {
}

var GetUnreadMessageCountResponse_Base_DEFAULT *model.BaseResp

func (p *GetUnreadMessageCountResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUnreadMessageCountResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetUnreadMessageCountResponse) GetCount() (v int64) {
	return p.Count
}
func (p *GetUnreadMessageCountResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUnreadMessageCountResponse) SetCount(val int64) {
	p.Count = val
}

func (p *GetUnreadMessageCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUnreadMessageCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnreadMessageCountResponse(%+v)", *p)
}

func (p *GetUnreadMessageCountResponse) DeepEqual(ano *GetUnreadMessageCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *GetUnreadMessageCountResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUnreadMessageCountResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_GetUnreadMessageCountResponse = map[int16]string{
	1: "Base",
	2: "Count",
}

type JoinChatRoomRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	RoomId int64 `thrift:"room_id,2,required" frugal:"2,required,i64" json:"room_id"`
}

func NewJoinChatRoomRequest() *JoinChatRoomRequest {
	return &JoinChatRoomRequest{}
}

func (p *JoinChatRoomRequest) InitDefault() {
}

func (p *JoinChatRoomRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *JoinChatRoomRequest) GetRoomId() (v int64) {
	return p.RoomId
}
func (p *JoinChatRoomRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *JoinChatRoomRequest) SetRoomId(val int64) {
	p.RoomId = val
}

func (p *JoinChatRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinChatRoomRequest(%+v)", *p)
}

func (p *JoinChatRoomRequest) DeepEqual(ano *JoinChatRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.RoomId) {
		return false
	}
	return true
}

func (p *JoinChatRoomRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *JoinChatRoomRequest) Field2DeepEqual(src int64) bool {

	if p.RoomId != src {
		return false
	}
	return true
}

var fieldIDToName_JoinChatRoomRequest = map[int16]string{
	1: "user_id",
	2: "room_id",
}

type JoinChatRoomResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewJoinChatRoomResponse() *JoinChatRoomResponse {
	return &JoinChatRoomResponse{}
}

func (p *JoinChatRoomResponse) InitDefault() {
}

var JoinChatRoomResponse_Base_DEFAULT *model.BaseResp

func (p *JoinChatRoomResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return JoinChatRoomResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *JoinChatRoomResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *JoinChatRoomResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *JoinChatRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinChatRoomResponse(%+v)", *p)
}

func (p *JoinChatRoomResponse) DeepEqual(ano *JoinChatRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *JoinChatRoomResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_JoinChatRoomResponse = map[int16]string{
	1: "Base",
}

type LeaveChatRoomRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	RoomId int64 `thrift:"room_id,2,required" frugal:"2,required,i64" json:"room_id"`
}

func NewLeaveChatRoomRequest() *LeaveChatRoomRequest {
	return &LeaveChatRoomRequest{}
}

func (p *LeaveChatRoomRequest) InitDefault() {
}

func (p *LeaveChatRoomRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *LeaveChatRoomRequest) GetRoomId() (v int64) {
	return p.RoomId
}
func (p *LeaveChatRoomRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *LeaveChatRoomRequest) SetRoomId(val int64) {
	p.RoomId = val
}

func (p *LeaveChatRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveChatRoomRequest(%+v)", *p)
}

func (p *LeaveChatRoomRequest) DeepEqual(ano *LeaveChatRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.RoomId) {
		return false
	}
	return true
}

func (p *LeaveChatRoomRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *LeaveChatRoomRequest) Field2DeepEqual(src int64) bool {

	if p.RoomId != src {
		return false
	}
	return true
}

var fieldIDToName_LeaveChatRoomRequest = map[int16]string{
	1: "user_id",
	2: "room_id",
}

type LeaveChatRoomResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewLeaveChatRoomResponse() *LeaveChatRoomResponse {
	return &LeaveChatRoomResponse{}
}

func (p *LeaveChatRoomResponse) InitDefault() {
}

var LeaveChatRoomResponse_Base_DEFAULT *model.BaseResp

func (p *LeaveChatRoomResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LeaveChatRoomResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LeaveChatRoomResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *LeaveChatRoomResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LeaveChatRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveChatRoomResponse(%+v)", *p)
}

func (p *LeaveChatRoomResponse) DeepEqual(ano *LeaveChatRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *LeaveChatRoomResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_LeaveChatRoomResponse = map[int16]string{
	1: "Base",
}

type RegisterWebSocketClientRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewRegisterWebSocketClientRequest() *RegisterWebSocketClientRequest {
	return &RegisterWebSocketClientRequest{}
}

func (p *RegisterWebSocketClientRequest) InitDefault() {
}

func (p *RegisterWebSocketClientRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *RegisterWebSocketClientRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *RegisterWebSocketClientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWebSocketClientRequest(%+v)", *p)
}

func (p *RegisterWebSocketClientRequest) DeepEqual(ano *RegisterWebSocketClientRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *RegisterWebSocketClientRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_RegisterWebSocketClientRequest = map[int16]string{
	1: "user_id",
}

type RegisterWebSocketClientResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewRegisterWebSocketClientResponse() *RegisterWebSocketClientResponse {
	return &RegisterWebSocketClientResponse{}
}

func (p *RegisterWebSocketClientResponse) InitDefault() {
}

var RegisterWebSocketClientResponse_Base_DEFAULT *model.BaseResp

func (p *RegisterWebSocketClientResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return RegisterWebSocketClientResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *RegisterWebSocketClientResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *RegisterWebSocketClientResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterWebSocketClientResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWebSocketClientResponse(%+v)", *p)
}

func (p *RegisterWebSocketClientResponse) DeepEqual(ano *RegisterWebSocketClientResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RegisterWebSocketClientResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_RegisterWebSocketClientResponse = map[int16]string{
	1: "Base",
}

type SocialService interface {
	SendPrivateMessage(ctx context.Context, req *SendPrivateMessageRequest) (r *SendPrivateMessageResponse, err error)

	GetPrivateMessages(ctx context.Context, req *GetPrivateMessagesRequest) (r *GetPrivateMessagesResponse, err error)

	CreateChatRoom(ctx context.Context, req *CreateChatRoomRequest) (r *CreateChatRoomResponse, err error)

	GetChatRoom(ctx context.Context, req *GetChatRoomRequest) (r *GetChatRoomResponse, err error)

	GetUserChatRooms(ctx context.Context, req *GetUserChatRoomsRequest) (r *GetUserChatRoomsResponse, err error)

	SendChatMessage(ctx context.Context, req *SendChatMessageRequest) (r *SendChatMessageResponse, err error)

	GetChatMessages(ctx context.Context, req *GetChatMessagesRequest) (r *GetChatMessagesResponse, err error)

	AddFriend(ctx context.Context, req *AddFriendRequest) (r *AddFriendResponse, err error)

	GetFriendship(ctx context.Context, req *GetFriendshipRequest) (r *GetFriendshipResponse, err error)

	GetUserFriends(ctx context.Context, req *GetUserFriendsRequest) (r *GetUserFriendsResponse, err error)

	CreateFriendRequest(ctx context.Context, req *CreateFriendRequestRequest) (r *CreateFriendRequestResponse, err error)

	GetFriendRequests(ctx context.Context, req *GetFriendRequestsRequest) (r *GetFriendRequestsResponse, err error)

	HandleFriendRequest(ctx context.Context, req *HandleFriendRequestRequest) (r *HandleFriendRequestResponse, err error)

	MarkMessageRead(ctx context.Context, req *MarkMessageReadRequest) (r *MarkMessageReadResponse, err error)

	GetUnreadMessageCount(ctx context.Context, req *GetUnreadMessageCountRequest) (r *GetUnreadMessageCountResponse, err error)

	JoinChatRoom(ctx context.Context, request *JoinChatRoomRequest) (r *JoinChatRoomResponse, err error)

	LeaveChatRoom(ctx context.Context, request *LeaveChatRoomRequest) (r *LeaveChatRoomResponse, err error)

	RegisterWebSocketClient(ctx context.Context, request *RegisterWebSocketClientRequest) (r *RegisterWebSocketClientResponse, err error)
}

type SocialServiceSendPrivateMessageArgs struct {
	Req *SendPrivateMessageRequest `thrift:"req,1" frugal:"1,default,SendPrivateMessageRequest" json:"req"`
}

func NewSocialServiceSendPrivateMessageArgs() *SocialServiceSendPrivateMessageArgs {
	return &SocialServiceSendPrivateMessageArgs{}
}

func (p *SocialServiceSendPrivateMessageArgs) InitDefault() {
}

var SocialServiceSendPrivateMessageArgs_Req_DEFAULT *SendPrivateMessageRequest

func (p *SocialServiceSendPrivateMessageArgs) GetReq() (v *SendPrivateMessageRequest) {
	if !p.IsSetReq() {
		return SocialServiceSendPrivateMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceSendPrivateMessageArgs) SetReq(val *SendPrivateMessageRequest) {
	p.Req = val
}

func (p *SocialServiceSendPrivateMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceSendPrivateMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceSendPrivateMessageArgs(%+v)", *p)
}

func (p *SocialServiceSendPrivateMessageArgs) DeepEqual(ano *SocialServiceSendPrivateMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceSendPrivateMessageArgs) Field1DeepEqual(src *SendPrivateMessageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceSendPrivateMessageArgs = map[int16]string{
	1: "req",
}

type SocialServiceSendPrivateMessageResult struct {
	Success *SendPrivateMessageResponse `thrift:"success,0,optional" frugal:"0,optional,SendPrivateMessageResponse" json:"success,omitempty"`
}

func NewSocialServiceSendPrivateMessageResult() *SocialServiceSendPrivateMessageResult {
	return &SocialServiceSendPrivateMessageResult{}
}

func (p *SocialServiceSendPrivateMessageResult) InitDefault() {
}

var SocialServiceSendPrivateMessageResult_Success_DEFAULT *SendPrivateMessageResponse

func (p *SocialServiceSendPrivateMessageResult) GetSuccess() (v *SendPrivateMessageResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceSendPrivateMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceSendPrivateMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendPrivateMessageResponse)
}

func (p *SocialServiceSendPrivateMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceSendPrivateMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceSendPrivateMessageResult(%+v)", *p)
}

func (p *SocialServiceSendPrivateMessageResult) DeepEqual(ano *SocialServiceSendPrivateMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceSendPrivateMessageResult) Field0DeepEqual(src *SendPrivateMessageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceSendPrivateMessageResult = map[int16]string{
	0: "success",
}

type SocialServiceGetPrivateMessagesArgs struct {
	Req *GetPrivateMessagesRequest `thrift:"req,1" frugal:"1,default,GetPrivateMessagesRequest" json:"req"`
}

func NewSocialServiceGetPrivateMessagesArgs() *SocialServiceGetPrivateMessagesArgs {
	return &SocialServiceGetPrivateMessagesArgs{}
}

func (p *SocialServiceGetPrivateMessagesArgs) InitDefault() {
}

var SocialServiceGetPrivateMessagesArgs_Req_DEFAULT *GetPrivateMessagesRequest

func (p *SocialServiceGetPrivateMessagesArgs) GetReq() (v *GetPrivateMessagesRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetPrivateMessagesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetPrivateMessagesArgs) SetReq(val *GetPrivateMessagesRequest) {
	p.Req = val
}

func (p *SocialServiceGetPrivateMessagesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetPrivateMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetPrivateMessagesArgs(%+v)", *p)
}

func (p *SocialServiceGetPrivateMessagesArgs) DeepEqual(ano *SocialServiceGetPrivateMessagesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetPrivateMessagesArgs) Field1DeepEqual(src *GetPrivateMessagesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetPrivateMessagesArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetPrivateMessagesResult struct {
	Success *GetPrivateMessagesResponse `thrift:"success,0,optional" frugal:"0,optional,GetPrivateMessagesResponse" json:"success,omitempty"`
}

func NewSocialServiceGetPrivateMessagesResult() *SocialServiceGetPrivateMessagesResult {
	return &SocialServiceGetPrivateMessagesResult{}
}

func (p *SocialServiceGetPrivateMessagesResult) InitDefault() {
}

var SocialServiceGetPrivateMessagesResult_Success_DEFAULT *GetPrivateMessagesResponse

func (p *SocialServiceGetPrivateMessagesResult) GetSuccess() (v *GetPrivateMessagesResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetPrivateMessagesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetPrivateMessagesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPrivateMessagesResponse)
}

func (p *SocialServiceGetPrivateMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetPrivateMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetPrivateMessagesResult(%+v)", *p)
}

func (p *SocialServiceGetPrivateMessagesResult) DeepEqual(ano *SocialServiceGetPrivateMessagesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetPrivateMessagesResult) Field0DeepEqual(src *GetPrivateMessagesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetPrivateMessagesResult = map[int16]string{
	0: "success",
}

type SocialServiceCreateChatRoomArgs struct {
	Req *CreateChatRoomRequest `thrift:"req,1" frugal:"1,default,CreateChatRoomRequest" json:"req"`
}

func NewSocialServiceCreateChatRoomArgs() *SocialServiceCreateChatRoomArgs {
	return &SocialServiceCreateChatRoomArgs{}
}

func (p *SocialServiceCreateChatRoomArgs) InitDefault() {
}

var SocialServiceCreateChatRoomArgs_Req_DEFAULT *CreateChatRoomRequest

func (p *SocialServiceCreateChatRoomArgs) GetReq() (v *CreateChatRoomRequest) {
	if !p.IsSetReq() {
		return SocialServiceCreateChatRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceCreateChatRoomArgs) SetReq(val *CreateChatRoomRequest) {
	p.Req = val
}

func (p *SocialServiceCreateChatRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceCreateChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceCreateChatRoomArgs(%+v)", *p)
}

func (p *SocialServiceCreateChatRoomArgs) DeepEqual(ano *SocialServiceCreateChatRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceCreateChatRoomArgs) Field1DeepEqual(src *CreateChatRoomRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceCreateChatRoomArgs = map[int16]string{
	1: "req",
}

type SocialServiceCreateChatRoomResult struct {
	Success *CreateChatRoomResponse `thrift:"success,0,optional" frugal:"0,optional,CreateChatRoomResponse" json:"success,omitempty"`
}

func NewSocialServiceCreateChatRoomResult() *SocialServiceCreateChatRoomResult {
	return &SocialServiceCreateChatRoomResult{}
}

func (p *SocialServiceCreateChatRoomResult) InitDefault() {
}

var SocialServiceCreateChatRoomResult_Success_DEFAULT *CreateChatRoomResponse

func (p *SocialServiceCreateChatRoomResult) GetSuccess() (v *CreateChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceCreateChatRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceCreateChatRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateChatRoomResponse)
}

func (p *SocialServiceCreateChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceCreateChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceCreateChatRoomResult(%+v)", *p)
}

func (p *SocialServiceCreateChatRoomResult) DeepEqual(ano *SocialServiceCreateChatRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceCreateChatRoomResult) Field0DeepEqual(src *CreateChatRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceCreateChatRoomResult = map[int16]string{
	0: "success",
}

type SocialServiceGetChatRoomArgs struct {
	Req *GetChatRoomRequest `thrift:"req,1" frugal:"1,default,GetChatRoomRequest" json:"req"`
}

func NewSocialServiceGetChatRoomArgs() *SocialServiceGetChatRoomArgs {
	return &SocialServiceGetChatRoomArgs{}
}

func (p *SocialServiceGetChatRoomArgs) InitDefault() {
}

var SocialServiceGetChatRoomArgs_Req_DEFAULT *GetChatRoomRequest

func (p *SocialServiceGetChatRoomArgs) GetReq() (v *GetChatRoomRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetChatRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetChatRoomArgs) SetReq(val *GetChatRoomRequest) {
	p.Req = val
}

func (p *SocialServiceGetChatRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetChatRoomArgs(%+v)", *p)
}

func (p *SocialServiceGetChatRoomArgs) DeepEqual(ano *SocialServiceGetChatRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetChatRoomArgs) Field1DeepEqual(src *GetChatRoomRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetChatRoomArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetChatRoomResult struct {
	Success *GetChatRoomResponse `thrift:"success,0,optional" frugal:"0,optional,GetChatRoomResponse" json:"success,omitempty"`
}

func NewSocialServiceGetChatRoomResult() *SocialServiceGetChatRoomResult {
	return &SocialServiceGetChatRoomResult{}
}

func (p *SocialServiceGetChatRoomResult) InitDefault() {
}

var SocialServiceGetChatRoomResult_Success_DEFAULT *GetChatRoomResponse

func (p *SocialServiceGetChatRoomResult) GetSuccess() (v *GetChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetChatRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetChatRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatRoomResponse)
}

func (p *SocialServiceGetChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetChatRoomResult(%+v)", *p)
}

func (p *SocialServiceGetChatRoomResult) DeepEqual(ano *SocialServiceGetChatRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetChatRoomResult) Field0DeepEqual(src *GetChatRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetChatRoomResult = map[int16]string{
	0: "success",
}

type SocialServiceGetUserChatRoomsArgs struct {
	Req *GetUserChatRoomsRequest `thrift:"req,1" frugal:"1,default,GetUserChatRoomsRequest" json:"req"`
}

func NewSocialServiceGetUserChatRoomsArgs() *SocialServiceGetUserChatRoomsArgs {
	return &SocialServiceGetUserChatRoomsArgs{}
}

func (p *SocialServiceGetUserChatRoomsArgs) InitDefault() {
}

var SocialServiceGetUserChatRoomsArgs_Req_DEFAULT *GetUserChatRoomsRequest

func (p *SocialServiceGetUserChatRoomsArgs) GetReq() (v *GetUserChatRoomsRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetUserChatRoomsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetUserChatRoomsArgs) SetReq(val *GetUserChatRoomsRequest) {
	p.Req = val
}

func (p *SocialServiceGetUserChatRoomsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetUserChatRoomsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUserChatRoomsArgs(%+v)", *p)
}

func (p *SocialServiceGetUserChatRoomsArgs) DeepEqual(ano *SocialServiceGetUserChatRoomsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetUserChatRoomsArgs) Field1DeepEqual(src *GetUserChatRoomsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUserChatRoomsArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetUserChatRoomsResult struct {
	Success *GetUserChatRoomsResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserChatRoomsResponse" json:"success,omitempty"`
}

func NewSocialServiceGetUserChatRoomsResult() *SocialServiceGetUserChatRoomsResult {
	return &SocialServiceGetUserChatRoomsResult{}
}

func (p *SocialServiceGetUserChatRoomsResult) InitDefault() {
}

var SocialServiceGetUserChatRoomsResult_Success_DEFAULT *GetUserChatRoomsResponse

func (p *SocialServiceGetUserChatRoomsResult) GetSuccess() (v *GetUserChatRoomsResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetUserChatRoomsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetUserChatRoomsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserChatRoomsResponse)
}

func (p *SocialServiceGetUserChatRoomsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetUserChatRoomsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUserChatRoomsResult(%+v)", *p)
}

func (p *SocialServiceGetUserChatRoomsResult) DeepEqual(ano *SocialServiceGetUserChatRoomsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetUserChatRoomsResult) Field0DeepEqual(src *GetUserChatRoomsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUserChatRoomsResult = map[int16]string{
	0: "success",
}

type SocialServiceSendChatMessageArgs struct {
	Req *SendChatMessageRequest `thrift:"req,1" frugal:"1,default,SendChatMessageRequest" json:"req"`
}

func NewSocialServiceSendChatMessageArgs() *SocialServiceSendChatMessageArgs {
	return &SocialServiceSendChatMessageArgs{}
}

func (p *SocialServiceSendChatMessageArgs) InitDefault() {
}

var SocialServiceSendChatMessageArgs_Req_DEFAULT *SendChatMessageRequest

func (p *SocialServiceSendChatMessageArgs) GetReq() (v *SendChatMessageRequest) {
	if !p.IsSetReq() {
		return SocialServiceSendChatMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceSendChatMessageArgs) SetReq(val *SendChatMessageRequest) {
	p.Req = val
}

func (p *SocialServiceSendChatMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceSendChatMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceSendChatMessageArgs(%+v)", *p)
}

func (p *SocialServiceSendChatMessageArgs) DeepEqual(ano *SocialServiceSendChatMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceSendChatMessageArgs) Field1DeepEqual(src *SendChatMessageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceSendChatMessageArgs = map[int16]string{
	1: "req",
}

type SocialServiceSendChatMessageResult struct {
	Success *SendChatMessageResponse `thrift:"success,0,optional" frugal:"0,optional,SendChatMessageResponse" json:"success,omitempty"`
}

func NewSocialServiceSendChatMessageResult() *SocialServiceSendChatMessageResult {
	return &SocialServiceSendChatMessageResult{}
}

func (p *SocialServiceSendChatMessageResult) InitDefault() {
}

var SocialServiceSendChatMessageResult_Success_DEFAULT *SendChatMessageResponse

func (p *SocialServiceSendChatMessageResult) GetSuccess() (v *SendChatMessageResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceSendChatMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceSendChatMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendChatMessageResponse)
}

func (p *SocialServiceSendChatMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceSendChatMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceSendChatMessageResult(%+v)", *p)
}

func (p *SocialServiceSendChatMessageResult) DeepEqual(ano *SocialServiceSendChatMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceSendChatMessageResult) Field0DeepEqual(src *SendChatMessageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceSendChatMessageResult = map[int16]string{
	0: "success",
}

type SocialServiceGetChatMessagesArgs struct {
	Req *GetChatMessagesRequest `thrift:"req,1" frugal:"1,default,GetChatMessagesRequest" json:"req"`
}

func NewSocialServiceGetChatMessagesArgs() *SocialServiceGetChatMessagesArgs {
	return &SocialServiceGetChatMessagesArgs{}
}

func (p *SocialServiceGetChatMessagesArgs) InitDefault() {
}

var SocialServiceGetChatMessagesArgs_Req_DEFAULT *GetChatMessagesRequest

func (p *SocialServiceGetChatMessagesArgs) GetReq() (v *GetChatMessagesRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetChatMessagesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetChatMessagesArgs) SetReq(val *GetChatMessagesRequest) {
	p.Req = val
}

func (p *SocialServiceGetChatMessagesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetChatMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetChatMessagesArgs(%+v)", *p)
}

func (p *SocialServiceGetChatMessagesArgs) DeepEqual(ano *SocialServiceGetChatMessagesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetChatMessagesArgs) Field1DeepEqual(src *GetChatMessagesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetChatMessagesArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetChatMessagesResult struct {
	Success *GetChatMessagesResponse `thrift:"success,0,optional" frugal:"0,optional,GetChatMessagesResponse" json:"success,omitempty"`
}

func NewSocialServiceGetChatMessagesResult() *SocialServiceGetChatMessagesResult {
	return &SocialServiceGetChatMessagesResult{}
}

func (p *SocialServiceGetChatMessagesResult) InitDefault() {
}

var SocialServiceGetChatMessagesResult_Success_DEFAULT *GetChatMessagesResponse

func (p *SocialServiceGetChatMessagesResult) GetSuccess() (v *GetChatMessagesResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetChatMessagesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetChatMessagesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatMessagesResponse)
}

func (p *SocialServiceGetChatMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetChatMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetChatMessagesResult(%+v)", *p)
}

func (p *SocialServiceGetChatMessagesResult) DeepEqual(ano *SocialServiceGetChatMessagesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetChatMessagesResult) Field0DeepEqual(src *GetChatMessagesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetChatMessagesResult = map[int16]string{
	0: "success",
}

type SocialServiceAddFriendArgs struct {
	Req *AddFriendRequest `thrift:"req,1" frugal:"1,default,AddFriendRequest" json:"req"`
}

func NewSocialServiceAddFriendArgs() *SocialServiceAddFriendArgs {
	return &SocialServiceAddFriendArgs{}
}

func (p *SocialServiceAddFriendArgs) InitDefault() {
}

var SocialServiceAddFriendArgs_Req_DEFAULT *AddFriendRequest

func (p *SocialServiceAddFriendArgs) GetReq() (v *AddFriendRequest) {
	if !p.IsSetReq() {
		return SocialServiceAddFriendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceAddFriendArgs) SetReq(val *AddFriendRequest) {
	p.Req = val
}

func (p *SocialServiceAddFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceAddFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceAddFriendArgs(%+v)", *p)
}

func (p *SocialServiceAddFriendArgs) DeepEqual(ano *SocialServiceAddFriendArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceAddFriendArgs) Field1DeepEqual(src *AddFriendRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceAddFriendArgs = map[int16]string{
	1: "req",
}

type SocialServiceAddFriendResult struct {
	Success *AddFriendResponse `thrift:"success,0,optional" frugal:"0,optional,AddFriendResponse" json:"success,omitempty"`
}

func NewSocialServiceAddFriendResult() *SocialServiceAddFriendResult {
	return &SocialServiceAddFriendResult{}
}

func (p *SocialServiceAddFriendResult) InitDefault() {
}

var SocialServiceAddFriendResult_Success_DEFAULT *AddFriendResponse

func (p *SocialServiceAddFriendResult) GetSuccess() (v *AddFriendResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceAddFriendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceAddFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddFriendResponse)
}

func (p *SocialServiceAddFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceAddFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceAddFriendResult(%+v)", *p)
}

func (p *SocialServiceAddFriendResult) DeepEqual(ano *SocialServiceAddFriendResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceAddFriendResult) Field0DeepEqual(src *AddFriendResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceAddFriendResult = map[int16]string{
	0: "success",
}

type SocialServiceGetFriendshipArgs struct {
	Req *GetFriendshipRequest `thrift:"req,1" frugal:"1,default,GetFriendshipRequest" json:"req"`
}

func NewSocialServiceGetFriendshipArgs() *SocialServiceGetFriendshipArgs {
	return &SocialServiceGetFriendshipArgs{}
}

func (p *SocialServiceGetFriendshipArgs) InitDefault() {
}

var SocialServiceGetFriendshipArgs_Req_DEFAULT *GetFriendshipRequest

func (p *SocialServiceGetFriendshipArgs) GetReq() (v *GetFriendshipRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetFriendshipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetFriendshipArgs) SetReq(val *GetFriendshipRequest) {
	p.Req = val
}

func (p *SocialServiceGetFriendshipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetFriendshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetFriendshipArgs(%+v)", *p)
}

func (p *SocialServiceGetFriendshipArgs) DeepEqual(ano *SocialServiceGetFriendshipArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetFriendshipArgs) Field1DeepEqual(src *GetFriendshipRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetFriendshipArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetFriendshipResult struct {
	Success *GetFriendshipResponse `thrift:"success,0,optional" frugal:"0,optional,GetFriendshipResponse" json:"success,omitempty"`
}

func NewSocialServiceGetFriendshipResult() *SocialServiceGetFriendshipResult {
	return &SocialServiceGetFriendshipResult{}
}

func (p *SocialServiceGetFriendshipResult) InitDefault() {
}

var SocialServiceGetFriendshipResult_Success_DEFAULT *GetFriendshipResponse

func (p *SocialServiceGetFriendshipResult) GetSuccess() (v *GetFriendshipResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetFriendshipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetFriendshipResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFriendshipResponse)
}

func (p *SocialServiceGetFriendshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetFriendshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetFriendshipResult(%+v)", *p)
}

func (p *SocialServiceGetFriendshipResult) DeepEqual(ano *SocialServiceGetFriendshipResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetFriendshipResult) Field0DeepEqual(src *GetFriendshipResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetFriendshipResult = map[int16]string{
	0: "success",
}

type SocialServiceGetUserFriendsArgs struct {
	Req *GetUserFriendsRequest `thrift:"req,1" frugal:"1,default,GetUserFriendsRequest" json:"req"`
}

func NewSocialServiceGetUserFriendsArgs() *SocialServiceGetUserFriendsArgs {
	return &SocialServiceGetUserFriendsArgs{}
}

func (p *SocialServiceGetUserFriendsArgs) InitDefault() {
}

var SocialServiceGetUserFriendsArgs_Req_DEFAULT *GetUserFriendsRequest

func (p *SocialServiceGetUserFriendsArgs) GetReq() (v *GetUserFriendsRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetUserFriendsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetUserFriendsArgs) SetReq(val *GetUserFriendsRequest) {
	p.Req = val
}

func (p *SocialServiceGetUserFriendsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetUserFriendsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUserFriendsArgs(%+v)", *p)
}

func (p *SocialServiceGetUserFriendsArgs) DeepEqual(ano *SocialServiceGetUserFriendsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetUserFriendsArgs) Field1DeepEqual(src *GetUserFriendsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUserFriendsArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetUserFriendsResult struct {
	Success *GetUserFriendsResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserFriendsResponse" json:"success,omitempty"`
}

func NewSocialServiceGetUserFriendsResult() *SocialServiceGetUserFriendsResult {
	return &SocialServiceGetUserFriendsResult{}
}

func (p *SocialServiceGetUserFriendsResult) InitDefault() {
}

var SocialServiceGetUserFriendsResult_Success_DEFAULT *GetUserFriendsResponse

func (p *SocialServiceGetUserFriendsResult) GetSuccess() (v *GetUserFriendsResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetUserFriendsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetUserFriendsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserFriendsResponse)
}

func (p *SocialServiceGetUserFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetUserFriendsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUserFriendsResult(%+v)", *p)
}

func (p *SocialServiceGetUserFriendsResult) DeepEqual(ano *SocialServiceGetUserFriendsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetUserFriendsResult) Field0DeepEqual(src *GetUserFriendsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUserFriendsResult = map[int16]string{
	0: "success",
}

type SocialServiceCreateFriendRequestArgs struct {
	Req *CreateFriendRequestRequest `thrift:"req,1" frugal:"1,default,CreateFriendRequestRequest" json:"req"`
}

func NewSocialServiceCreateFriendRequestArgs() *SocialServiceCreateFriendRequestArgs {
	return &SocialServiceCreateFriendRequestArgs{}
}

func (p *SocialServiceCreateFriendRequestArgs) InitDefault() {
}

var SocialServiceCreateFriendRequestArgs_Req_DEFAULT *CreateFriendRequestRequest

func (p *SocialServiceCreateFriendRequestArgs) GetReq() (v *CreateFriendRequestRequest) {
	if !p.IsSetReq() {
		return SocialServiceCreateFriendRequestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceCreateFriendRequestArgs) SetReq(val *CreateFriendRequestRequest) {
	p.Req = val
}

func (p *SocialServiceCreateFriendRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceCreateFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceCreateFriendRequestArgs(%+v)", *p)
}

func (p *SocialServiceCreateFriendRequestArgs) DeepEqual(ano *SocialServiceCreateFriendRequestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceCreateFriendRequestArgs) Field1DeepEqual(src *CreateFriendRequestRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceCreateFriendRequestArgs = map[int16]string{
	1: "req",
}

type SocialServiceCreateFriendRequestResult struct {
	Success *CreateFriendRequestResponse `thrift:"success,0,optional" frugal:"0,optional,CreateFriendRequestResponse" json:"success,omitempty"`
}

func NewSocialServiceCreateFriendRequestResult() *SocialServiceCreateFriendRequestResult {
	return &SocialServiceCreateFriendRequestResult{}
}

func (p *SocialServiceCreateFriendRequestResult) InitDefault() {
}

var SocialServiceCreateFriendRequestResult_Success_DEFAULT *CreateFriendRequestResponse

func (p *SocialServiceCreateFriendRequestResult) GetSuccess() (v *CreateFriendRequestResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceCreateFriendRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceCreateFriendRequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFriendRequestResponse)
}

func (p *SocialServiceCreateFriendRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceCreateFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceCreateFriendRequestResult(%+v)", *p)
}

func (p *SocialServiceCreateFriendRequestResult) DeepEqual(ano *SocialServiceCreateFriendRequestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceCreateFriendRequestResult) Field0DeepEqual(src *CreateFriendRequestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceCreateFriendRequestResult = map[int16]string{
	0: "success",
}

type SocialServiceGetFriendRequestsArgs struct {
	Req *GetFriendRequestsRequest `thrift:"req,1" frugal:"1,default,GetFriendRequestsRequest" json:"req"`
}

func NewSocialServiceGetFriendRequestsArgs() *SocialServiceGetFriendRequestsArgs {
	return &SocialServiceGetFriendRequestsArgs{}
}

func (p *SocialServiceGetFriendRequestsArgs) InitDefault() {
}

var SocialServiceGetFriendRequestsArgs_Req_DEFAULT *GetFriendRequestsRequest

func (p *SocialServiceGetFriendRequestsArgs) GetReq() (v *GetFriendRequestsRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetFriendRequestsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetFriendRequestsArgs) SetReq(val *GetFriendRequestsRequest) {
	p.Req = val
}

func (p *SocialServiceGetFriendRequestsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetFriendRequestsArgs(%+v)", *p)
}

func (p *SocialServiceGetFriendRequestsArgs) DeepEqual(ano *SocialServiceGetFriendRequestsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetFriendRequestsArgs) Field1DeepEqual(src *GetFriendRequestsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetFriendRequestsArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetFriendRequestsResult struct {
	Success *GetFriendRequestsResponse `thrift:"success,0,optional" frugal:"0,optional,GetFriendRequestsResponse" json:"success,omitempty"`
}

func NewSocialServiceGetFriendRequestsResult() *SocialServiceGetFriendRequestsResult {
	return &SocialServiceGetFriendRequestsResult{}
}

func (p *SocialServiceGetFriendRequestsResult) InitDefault() {
}

var SocialServiceGetFriendRequestsResult_Success_DEFAULT *GetFriendRequestsResponse

func (p *SocialServiceGetFriendRequestsResult) GetSuccess() (v *GetFriendRequestsResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetFriendRequestsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetFriendRequestsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFriendRequestsResponse)
}

func (p *SocialServiceGetFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetFriendRequestsResult(%+v)", *p)
}

func (p *SocialServiceGetFriendRequestsResult) DeepEqual(ano *SocialServiceGetFriendRequestsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetFriendRequestsResult) Field0DeepEqual(src *GetFriendRequestsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetFriendRequestsResult = map[int16]string{
	0: "success",
}

type SocialServiceHandleFriendRequestArgs struct {
	Req *HandleFriendRequestRequest `thrift:"req,1" frugal:"1,default,HandleFriendRequestRequest" json:"req"`
}

func NewSocialServiceHandleFriendRequestArgs() *SocialServiceHandleFriendRequestArgs {
	return &SocialServiceHandleFriendRequestArgs{}
}

func (p *SocialServiceHandleFriendRequestArgs) InitDefault() {
}

var SocialServiceHandleFriendRequestArgs_Req_DEFAULT *HandleFriendRequestRequest

func (p *SocialServiceHandleFriendRequestArgs) GetReq() (v *HandleFriendRequestRequest) {
	if !p.IsSetReq() {
		return SocialServiceHandleFriendRequestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceHandleFriendRequestArgs) SetReq(val *HandleFriendRequestRequest) {
	p.Req = val
}

func (p *SocialServiceHandleFriendRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceHandleFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceHandleFriendRequestArgs(%+v)", *p)
}

func (p *SocialServiceHandleFriendRequestArgs) DeepEqual(ano *SocialServiceHandleFriendRequestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceHandleFriendRequestArgs) Field1DeepEqual(src *HandleFriendRequestRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceHandleFriendRequestArgs = map[int16]string{
	1: "req",
}

type SocialServiceHandleFriendRequestResult struct {
	Success *HandleFriendRequestResponse `thrift:"success,0,optional" frugal:"0,optional,HandleFriendRequestResponse" json:"success,omitempty"`
}

func NewSocialServiceHandleFriendRequestResult() *SocialServiceHandleFriendRequestResult {
	return &SocialServiceHandleFriendRequestResult{}
}

func (p *SocialServiceHandleFriendRequestResult) InitDefault() {
}

var SocialServiceHandleFriendRequestResult_Success_DEFAULT *HandleFriendRequestResponse

func (p *SocialServiceHandleFriendRequestResult) GetSuccess() (v *HandleFriendRequestResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceHandleFriendRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceHandleFriendRequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*HandleFriendRequestResponse)
}

func (p *SocialServiceHandleFriendRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceHandleFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceHandleFriendRequestResult(%+v)", *p)
}

func (p *SocialServiceHandleFriendRequestResult) DeepEqual(ano *SocialServiceHandleFriendRequestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceHandleFriendRequestResult) Field0DeepEqual(src *HandleFriendRequestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceHandleFriendRequestResult = map[int16]string{
	0: "success",
}

type SocialServiceMarkMessageReadArgs struct {
	Req *MarkMessageReadRequest `thrift:"req,1" frugal:"1,default,MarkMessageReadRequest" json:"req"`
}

func NewSocialServiceMarkMessageReadArgs() *SocialServiceMarkMessageReadArgs {
	return &SocialServiceMarkMessageReadArgs{}
}

func (p *SocialServiceMarkMessageReadArgs) InitDefault() {
}

var SocialServiceMarkMessageReadArgs_Req_DEFAULT *MarkMessageReadRequest

func (p *SocialServiceMarkMessageReadArgs) GetReq() (v *MarkMessageReadRequest) {
	if !p.IsSetReq() {
		return SocialServiceMarkMessageReadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceMarkMessageReadArgs) SetReq(val *MarkMessageReadRequest) {
	p.Req = val
}

func (p *SocialServiceMarkMessageReadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceMarkMessageReadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceMarkMessageReadArgs(%+v)", *p)
}

func (p *SocialServiceMarkMessageReadArgs) DeepEqual(ano *SocialServiceMarkMessageReadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceMarkMessageReadArgs) Field1DeepEqual(src *MarkMessageReadRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceMarkMessageReadArgs = map[int16]string{
	1: "req",
}

type SocialServiceMarkMessageReadResult struct {
	Success *MarkMessageReadResponse `thrift:"success,0,optional" frugal:"0,optional,MarkMessageReadResponse" json:"success,omitempty"`
}

func NewSocialServiceMarkMessageReadResult() *SocialServiceMarkMessageReadResult {
	return &SocialServiceMarkMessageReadResult{}
}

func (p *SocialServiceMarkMessageReadResult) InitDefault() {
}

var SocialServiceMarkMessageReadResult_Success_DEFAULT *MarkMessageReadResponse

func (p *SocialServiceMarkMessageReadResult) GetSuccess() (v *MarkMessageReadResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceMarkMessageReadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceMarkMessageReadResult) SetSuccess(x interface{}) {
	p.Success = x.(*MarkMessageReadResponse)
}

func (p *SocialServiceMarkMessageReadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceMarkMessageReadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceMarkMessageReadResult(%+v)", *p)
}

func (p *SocialServiceMarkMessageReadResult) DeepEqual(ano *SocialServiceMarkMessageReadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceMarkMessageReadResult) Field0DeepEqual(src *MarkMessageReadResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceMarkMessageReadResult = map[int16]string{
	0: "success",
}

type SocialServiceGetUnreadMessageCountArgs struct {
	Req *GetUnreadMessageCountRequest `thrift:"req,1" frugal:"1,default,GetUnreadMessageCountRequest" json:"req"`
}

func NewSocialServiceGetUnreadMessageCountArgs() *SocialServiceGetUnreadMessageCountArgs {
	return &SocialServiceGetUnreadMessageCountArgs{}
}

func (p *SocialServiceGetUnreadMessageCountArgs) InitDefault() {
}

var SocialServiceGetUnreadMessageCountArgs_Req_DEFAULT *GetUnreadMessageCountRequest

func (p *SocialServiceGetUnreadMessageCountArgs) GetReq() (v *GetUnreadMessageCountRequest) {
	if !p.IsSetReq() {
		return SocialServiceGetUnreadMessageCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceGetUnreadMessageCountArgs) SetReq(val *GetUnreadMessageCountRequest) {
	p.Req = val
}

func (p *SocialServiceGetUnreadMessageCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceGetUnreadMessageCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUnreadMessageCountArgs(%+v)", *p)
}

func (p *SocialServiceGetUnreadMessageCountArgs) DeepEqual(ano *SocialServiceGetUnreadMessageCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialServiceGetUnreadMessageCountArgs) Field1DeepEqual(src *GetUnreadMessageCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUnreadMessageCountArgs = map[int16]string{
	1: "req",
}

type SocialServiceGetUnreadMessageCountResult struct {
	Success *GetUnreadMessageCountResponse `thrift:"success,0,optional" frugal:"0,optional,GetUnreadMessageCountResponse" json:"success,omitempty"`
}

func NewSocialServiceGetUnreadMessageCountResult() *SocialServiceGetUnreadMessageCountResult {
	return &SocialServiceGetUnreadMessageCountResult{}
}

func (p *SocialServiceGetUnreadMessageCountResult) InitDefault() {
}

var SocialServiceGetUnreadMessageCountResult_Success_DEFAULT *GetUnreadMessageCountResponse

func (p *SocialServiceGetUnreadMessageCountResult) GetSuccess() (v *GetUnreadMessageCountResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceGetUnreadMessageCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceGetUnreadMessageCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUnreadMessageCountResponse)
}

func (p *SocialServiceGetUnreadMessageCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceGetUnreadMessageCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceGetUnreadMessageCountResult(%+v)", *p)
}

func (p *SocialServiceGetUnreadMessageCountResult) DeepEqual(ano *SocialServiceGetUnreadMessageCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceGetUnreadMessageCountResult) Field0DeepEqual(src *GetUnreadMessageCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceGetUnreadMessageCountResult = map[int16]string{
	0: "success",
}

type SocialServiceJoinChatRoomArgs struct {
	Request *JoinChatRoomRequest `thrift:"request,1" frugal:"1,default,JoinChatRoomRequest" json:"request"`
}

func NewSocialServiceJoinChatRoomArgs() *SocialServiceJoinChatRoomArgs {
	return &SocialServiceJoinChatRoomArgs{}
}

func (p *SocialServiceJoinChatRoomArgs) InitDefault() {
}

var SocialServiceJoinChatRoomArgs_Request_DEFAULT *JoinChatRoomRequest

func (p *SocialServiceJoinChatRoomArgs) GetRequest() (v *JoinChatRoomRequest) {
	if !p.IsSetRequest() {
		return SocialServiceJoinChatRoomArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SocialServiceJoinChatRoomArgs) SetRequest(val *JoinChatRoomRequest) {
	p.Request = val
}

func (p *SocialServiceJoinChatRoomArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialServiceJoinChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceJoinChatRoomArgs(%+v)", *p)
}

func (p *SocialServiceJoinChatRoomArgs) DeepEqual(ano *SocialServiceJoinChatRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *SocialServiceJoinChatRoomArgs) Field1DeepEqual(src *JoinChatRoomRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceJoinChatRoomArgs = map[int16]string{
	1: "request",
}

type SocialServiceJoinChatRoomResult struct {
	Success *JoinChatRoomResponse `thrift:"success,0,optional" frugal:"0,optional,JoinChatRoomResponse" json:"success,omitempty"`
}

func NewSocialServiceJoinChatRoomResult() *SocialServiceJoinChatRoomResult {
	return &SocialServiceJoinChatRoomResult{}
}

func (p *SocialServiceJoinChatRoomResult) InitDefault() {
}

var SocialServiceJoinChatRoomResult_Success_DEFAULT *JoinChatRoomResponse

func (p *SocialServiceJoinChatRoomResult) GetSuccess() (v *JoinChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceJoinChatRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceJoinChatRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*JoinChatRoomResponse)
}

func (p *SocialServiceJoinChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceJoinChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceJoinChatRoomResult(%+v)", *p)
}

func (p *SocialServiceJoinChatRoomResult) DeepEqual(ano *SocialServiceJoinChatRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceJoinChatRoomResult) Field0DeepEqual(src *JoinChatRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceJoinChatRoomResult = map[int16]string{
	0: "success",
}

type SocialServiceLeaveChatRoomArgs struct {
	Request *LeaveChatRoomRequest `thrift:"request,1" frugal:"1,default,LeaveChatRoomRequest" json:"request"`
}

func NewSocialServiceLeaveChatRoomArgs() *SocialServiceLeaveChatRoomArgs {
	return &SocialServiceLeaveChatRoomArgs{}
}

func (p *SocialServiceLeaveChatRoomArgs) InitDefault() {
}

var SocialServiceLeaveChatRoomArgs_Request_DEFAULT *LeaveChatRoomRequest

func (p *SocialServiceLeaveChatRoomArgs) GetRequest() (v *LeaveChatRoomRequest) {
	if !p.IsSetRequest() {
		return SocialServiceLeaveChatRoomArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SocialServiceLeaveChatRoomArgs) SetRequest(val *LeaveChatRoomRequest) {
	p.Request = val
}

func (p *SocialServiceLeaveChatRoomArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialServiceLeaveChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceLeaveChatRoomArgs(%+v)", *p)
}

func (p *SocialServiceLeaveChatRoomArgs) DeepEqual(ano *SocialServiceLeaveChatRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *SocialServiceLeaveChatRoomArgs) Field1DeepEqual(src *LeaveChatRoomRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceLeaveChatRoomArgs = map[int16]string{
	1: "request",
}

type SocialServiceLeaveChatRoomResult struct {
	Success *LeaveChatRoomResponse `thrift:"success,0,optional" frugal:"0,optional,LeaveChatRoomResponse" json:"success,omitempty"`
}

func NewSocialServiceLeaveChatRoomResult() *SocialServiceLeaveChatRoomResult {
	return &SocialServiceLeaveChatRoomResult{}
}

func (p *SocialServiceLeaveChatRoomResult) InitDefault() {
}

var SocialServiceLeaveChatRoomResult_Success_DEFAULT *LeaveChatRoomResponse

func (p *SocialServiceLeaveChatRoomResult) GetSuccess() (v *LeaveChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceLeaveChatRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceLeaveChatRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*LeaveChatRoomResponse)
}

func (p *SocialServiceLeaveChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceLeaveChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceLeaveChatRoomResult(%+v)", *p)
}

func (p *SocialServiceLeaveChatRoomResult) DeepEqual(ano *SocialServiceLeaveChatRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceLeaveChatRoomResult) Field0DeepEqual(src *LeaveChatRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceLeaveChatRoomResult = map[int16]string{
	0: "success",
}

type SocialServiceRegisterWebSocketClientArgs struct {
	Request *RegisterWebSocketClientRequest `thrift:"request,1" frugal:"1,default,RegisterWebSocketClientRequest" json:"request"`
}

func NewSocialServiceRegisterWebSocketClientArgs() *SocialServiceRegisterWebSocketClientArgs {
	return &SocialServiceRegisterWebSocketClientArgs{}
}

func (p *SocialServiceRegisterWebSocketClientArgs) InitDefault() {
}

var SocialServiceRegisterWebSocketClientArgs_Request_DEFAULT *RegisterWebSocketClientRequest

func (p *SocialServiceRegisterWebSocketClientArgs) GetRequest() (v *RegisterWebSocketClientRequest) {
	if !p.IsSetRequest() {
		return SocialServiceRegisterWebSocketClientArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SocialServiceRegisterWebSocketClientArgs) SetRequest(val *RegisterWebSocketClientRequest) {
	p.Request = val
}

func (p *SocialServiceRegisterWebSocketClientArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialServiceRegisterWebSocketClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceRegisterWebSocketClientArgs(%+v)", *p)
}

func (p *SocialServiceRegisterWebSocketClientArgs) DeepEqual(ano *SocialServiceRegisterWebSocketClientArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *SocialServiceRegisterWebSocketClientArgs) Field1DeepEqual(src *RegisterWebSocketClientRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceRegisterWebSocketClientArgs = map[int16]string{
	1: "request",
}

type SocialServiceRegisterWebSocketClientResult struct {
	Success *RegisterWebSocketClientResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterWebSocketClientResponse" json:"success,omitempty"`
}

func NewSocialServiceRegisterWebSocketClientResult() *SocialServiceRegisterWebSocketClientResult {
	return &SocialServiceRegisterWebSocketClientResult{}
}

func (p *SocialServiceRegisterWebSocketClientResult) InitDefault() {
}

var SocialServiceRegisterWebSocketClientResult_Success_DEFAULT *RegisterWebSocketClientResponse

func (p *SocialServiceRegisterWebSocketClientResult) GetSuccess() (v *RegisterWebSocketClientResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceRegisterWebSocketClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceRegisterWebSocketClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterWebSocketClientResponse)
}

func (p *SocialServiceRegisterWebSocketClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceRegisterWebSocketClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceRegisterWebSocketClientResult(%+v)", *p)
}

func (p *SocialServiceRegisterWebSocketClientResult) DeepEqual(ano *SocialServiceRegisterWebSocketClientResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialServiceRegisterWebSocketClientResult) Field0DeepEqual(src *RegisterWebSocketClientResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_SocialServiceRegisterWebSocketClientResult = map[int16]string{
	0: "success",
}
