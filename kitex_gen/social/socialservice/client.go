// Code generated by Kitex v0.12.3. DO NOT EDIT.

package socialservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	social "github.com/yxrrxy/videoHub/kitex_gen/social"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendPrivateMessage(ctx context.Context, senderId int64, receiverId int64, content string, callOptions ...callopt.Option) (err error)
	GetPrivateMessages(ctx context.Context, senderId int64, receiverId int64, page int32, size int32, callOptions ...callopt.Option) (r *social.PrivateMessagesResponse, err error)
	CreateChatRoom(ctx context.Context, name string, creatorId int64, roomType int8, memberIds []int64, callOptions ...callopt.Option) (r *social.ChatRoom, err error)
	GetChatRoom(ctx context.Context, roomId int64, callOptions ...callopt.Option) (r *social.ChatRoom, err error)
	GetUserChatRooms(ctx context.Context, userId int64, callOptions ...callopt.Option) (r []*social.ChatRoom, err error)
	SendChatMessage(ctx context.Context, roomId int64, senderId int64, content string, msgType int8, callOptions ...callopt.Option) (err error)
	GetChatMessages(ctx context.Context, roomId int64, page int32, size int32, callOptions ...callopt.Option) (r *social.ChatMessagesResponse, err error)
	AddFriend(ctx context.Context, userId int64, friendId int64, callOptions ...callopt.Option) (err error)
	GetFriendship(ctx context.Context, userId int64, friendId int64, callOptions ...callopt.Option) (r *social.Friendship, err error)
	GetUserFriends(ctx context.Context, userId int64, callOptions ...callopt.Option) (r []*social.Friendship, err error)
	CreateFriendRequest(ctx context.Context, senderId int64, receiverId int64, message string, callOptions ...callopt.Option) (err error)
	GetFriendRequests(ctx context.Context, userId int64, status int8, callOptions ...callopt.Option) (r []*social.FriendRequest, err error)
	HandleFriendRequest(ctx context.Context, requestId int64, status int8, callOptions ...callopt.Option) (err error)
	MarkMessageRead(ctx context.Context, messageId int64, userId int64, callOptions ...callopt.Option) (err error)
	GetUnreadMessageCount(ctx context.Context, userId int64, callOptions ...callopt.Option) (r int64, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSocialServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSocialServiceClient struct {
	*kClient
}

func (p *kSocialServiceClient) SendPrivateMessage(ctx context.Context, senderId int64, receiverId int64, content string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendPrivateMessage(ctx, senderId, receiverId, content)
}

func (p *kSocialServiceClient) GetPrivateMessages(ctx context.Context, senderId int64, receiverId int64, page int32, size int32, callOptions ...callopt.Option) (r *social.PrivateMessagesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPrivateMessages(ctx, senderId, receiverId, page, size)
}

func (p *kSocialServiceClient) CreateChatRoom(ctx context.Context, name string, creatorId int64, roomType int8, memberIds []int64, callOptions ...callopt.Option) (r *social.ChatRoom, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateChatRoom(ctx, name, creatorId, roomType, memberIds)
}

func (p *kSocialServiceClient) GetChatRoom(ctx context.Context, roomId int64, callOptions ...callopt.Option) (r *social.ChatRoom, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatRoom(ctx, roomId)
}

func (p *kSocialServiceClient) GetUserChatRooms(ctx context.Context, userId int64, callOptions ...callopt.Option) (r []*social.ChatRoom, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserChatRooms(ctx, userId)
}

func (p *kSocialServiceClient) SendChatMessage(ctx context.Context, roomId int64, senderId int64, content string, msgType int8, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendChatMessage(ctx, roomId, senderId, content, msgType)
}

func (p *kSocialServiceClient) GetChatMessages(ctx context.Context, roomId int64, page int32, size int32, callOptions ...callopt.Option) (r *social.ChatMessagesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatMessages(ctx, roomId, page, size)
}

func (p *kSocialServiceClient) AddFriend(ctx context.Context, userId int64, friendId int64, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFriend(ctx, userId, friendId)
}

func (p *kSocialServiceClient) GetFriendship(ctx context.Context, userId int64, friendId int64, callOptions ...callopt.Option) (r *social.Friendship, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendship(ctx, userId, friendId)
}

func (p *kSocialServiceClient) GetUserFriends(ctx context.Context, userId int64, callOptions ...callopt.Option) (r []*social.Friendship, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFriends(ctx, userId)
}

func (p *kSocialServiceClient) CreateFriendRequest(ctx context.Context, senderId int64, receiverId int64, message string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFriendRequest(ctx, senderId, receiverId, message)
}

func (p *kSocialServiceClient) GetFriendRequests(ctx context.Context, userId int64, status int8, callOptions ...callopt.Option) (r []*social.FriendRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendRequests(ctx, userId, status)
}

func (p *kSocialServiceClient) HandleFriendRequest(ctx context.Context, requestId int64, status int8, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HandleFriendRequest(ctx, requestId, status)
}

func (p *kSocialServiceClient) MarkMessageRead(ctx context.Context, messageId int64, userId int64, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MarkMessageRead(ctx, messageId, userId)
}

func (p *kSocialServiceClient) GetUnreadMessageCount(ctx context.Context, userId int64, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUnreadMessageCount(ctx, userId)
}
