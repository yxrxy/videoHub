// Code generated by Kitex v0.12.3. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	videointeractions "github.com/yxrrxy/videoHub/kitex_gen/videoInteractions"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Like(ctx context.Context, userId int64, videoId int64, callOptions ...callopt.Option) (r bool, err error)
	GetLikes(ctx context.Context, videoId int64, page int32, size int32, callOptions ...callopt.Option) (r []*videointeractions.LikeInfo, err error)
	Comment(ctx context.Context, userId int64, videoId int64, content string, parentId int64, callOptions ...callopt.Option) (r bool, err error)
	GetComments(ctx context.Context, videoId int64, page int32, size int32, callOptions ...callopt.Option) (r *videointeractions.CommentListResponse, err error)
	DeleteComment(ctx context.Context, userId int64, commentId int64, callOptions ...callopt.Option) (r bool, err error)
	LikeComment(ctx context.Context, userId int64, commentId int64, callOptions ...callopt.Option) (r bool, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) Like(ctx context.Context, userId int64, videoId int64, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Like(ctx, userId, videoId)
}

func (p *kInteractionServiceClient) GetLikes(ctx context.Context, videoId int64, page int32, size int32, callOptions ...callopt.Option) (r []*videointeractions.LikeInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikes(ctx, videoId, page, size)
}

func (p *kInteractionServiceClient) Comment(ctx context.Context, userId int64, videoId int64, content string, parentId int64, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Comment(ctx, userId, videoId, content, parentId)
}

func (p *kInteractionServiceClient) GetComments(ctx context.Context, videoId int64, page int32, size int32, callOptions ...callopt.Option) (r *videointeractions.CommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetComments(ctx, videoId, page, size)
}

func (p *kInteractionServiceClient) DeleteComment(ctx context.Context, userId int64, commentId int64, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, userId, commentId)
}

func (p *kInteractionServiceClient) LikeComment(ctx context.Context, userId int64, commentId int64, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LikeComment(ctx, userId, commentId)
}
