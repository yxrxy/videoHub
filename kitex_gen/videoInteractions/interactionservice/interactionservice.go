// Code generated by Kitex v0.12.3. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	videointeractions "github.com/yxrrxy/videoHub/kitex_gen/videoInteractions"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Like": kitex.NewMethodInfo(
		likeHandler,
		newInteractionServiceLikeArgs,
		newInteractionServiceLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLikes": kitex.NewMethodInfo(
		getLikesHandler,
		newInteractionServiceGetLikesArgs,
		newInteractionServiceGetLikesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Comment": kitex.NewMethodInfo(
		commentHandler,
		newInteractionServiceCommentArgs,
		newInteractionServiceCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetComments": kitex.NewMethodInfo(
		getCommentsHandler,
		newInteractionServiceGetCommentsArgs,
		newInteractionServiceGetCommentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractionServiceDeleteCommentArgs,
		newInteractionServiceDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LikeComment": kitex.NewMethodInfo(
		likeCommentHandler,
		newInteractionServiceLikeCommentArgs,
		newInteractionServiceLikeCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*videointeractions.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "videointeractions",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceLikeArgs)
	realResult := result.(*videointeractions.InteractionServiceLikeResult)
	success, err := handler.(videointeractions.InteractionService).Like(ctx, realArg.UserId, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newInteractionServiceLikeArgs() interface{} {
	return videointeractions.NewInteractionServiceLikeArgs()
}

func newInteractionServiceLikeResult() interface{} {
	return videointeractions.NewInteractionServiceLikeResult()
}

func getLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceGetLikesArgs)
	realResult := result.(*videointeractions.InteractionServiceGetLikesResult)
	success, err := handler.(videointeractions.InteractionService).GetLikes(ctx, realArg.VideoId, realArg.Page, realArg.Size)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetLikesArgs() interface{} {
	return videointeractions.NewInteractionServiceGetLikesArgs()
}

func newInteractionServiceGetLikesResult() interface{} {
	return videointeractions.NewInteractionServiceGetLikesResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceCommentArgs)
	realResult := result.(*videointeractions.InteractionServiceCommentResult)
	success, err := handler.(videointeractions.InteractionService).Comment(ctx, realArg.UserId, realArg.VideoId, realArg.Content, realArg.ParentId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newInteractionServiceCommentArgs() interface{} {
	return videointeractions.NewInteractionServiceCommentArgs()
}

func newInteractionServiceCommentResult() interface{} {
	return videointeractions.NewInteractionServiceCommentResult()
}

func getCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceGetCommentsArgs)
	realResult := result.(*videointeractions.InteractionServiceGetCommentsResult)
	success, err := handler.(videointeractions.InteractionService).GetComments(ctx, realArg.VideoId, realArg.Page, realArg.Size)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentsArgs() interface{} {
	return videointeractions.NewInteractionServiceGetCommentsArgs()
}

func newInteractionServiceGetCommentsResult() interface{} {
	return videointeractions.NewInteractionServiceGetCommentsResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceDeleteCommentArgs)
	realResult := result.(*videointeractions.InteractionServiceDeleteCommentResult)
	success, err := handler.(videointeractions.InteractionService).DeleteComment(ctx, realArg.UserId, realArg.CommentId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newInteractionServiceDeleteCommentArgs() interface{} {
	return videointeractions.NewInteractionServiceDeleteCommentArgs()
}

func newInteractionServiceDeleteCommentResult() interface{} {
	return videointeractions.NewInteractionServiceDeleteCommentResult()
}

func likeCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videointeractions.InteractionServiceLikeCommentArgs)
	realResult := result.(*videointeractions.InteractionServiceLikeCommentResult)
	success, err := handler.(videointeractions.InteractionService).LikeComment(ctx, realArg.UserId, realArg.CommentId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newInteractionServiceLikeCommentArgs() interface{} {
	return videointeractions.NewInteractionServiceLikeCommentArgs()
}

func newInteractionServiceLikeCommentResult() interface{} {
	return videointeractions.NewInteractionServiceLikeCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, userId int64, videoId int64) (r bool, err error) {
	var _args videointeractions.InteractionServiceLikeArgs
	_args.UserId = userId
	_args.VideoId = videoId
	var _result videointeractions.InteractionServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikes(ctx context.Context, videoId int64, page int32, size int32) (r []*videointeractions.LikeInfo, err error) {
	var _args videointeractions.InteractionServiceGetLikesArgs
	_args.VideoId = videoId
	_args.Page = page
	_args.Size = size
	var _result videointeractions.InteractionServiceGetLikesResult
	if err = p.c.Call(ctx, "GetLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, userId int64, videoId int64, content string, parentId int64) (r bool, err error) {
	var _args videointeractions.InteractionServiceCommentArgs
	_args.UserId = userId
	_args.VideoId = videoId
	_args.Content = content
	_args.ParentId = parentId
	var _result videointeractions.InteractionServiceCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComments(ctx context.Context, videoId int64, page int32, size int32) (r *videointeractions.CommentListResponse, err error) {
	var _args videointeractions.InteractionServiceGetCommentsArgs
	_args.VideoId = videoId
	_args.Page = page
	_args.Size = size
	var _result videointeractions.InteractionServiceGetCommentsResult
	if err = p.c.Call(ctx, "GetComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, userId int64, commentId int64) (r bool, err error) {
	var _args videointeractions.InteractionServiceDeleteCommentArgs
	_args.UserId = userId
	_args.CommentId = commentId
	var _result videointeractions.InteractionServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeComment(ctx context.Context, userId int64, commentId int64) (r bool, err error) {
	var _args videointeractions.InteractionServiceLikeCommentArgs
	_args.UserId = userId
	_args.CommentId = commentId
	var _result videointeractions.InteractionServiceLikeCommentResult
	if err = p.c.Call(ctx, "LikeComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
