// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"github.com/yxrxy/videoHub/kitex_gen/model"
)

type RegisterRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterRequest) GetPassword() (v string) {
	return p.Password
}
func (p *RegisterRequest) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterRequest) SetPassword(val string) {
	p.Password = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "username",
	2: "password",
}

type RegisterResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	UserId int64           `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

var RegisterResponse_Base_DEFAULT *model.BaseResp

func (p *RegisterResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return RegisterResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *RegisterResponse) GetUserId() (v int64) {
	return p.UserId
}
func (p *RegisterResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *RegisterResponse) SetUserId(val int64) {
	p.UserId = val
}

func (p *RegisterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "Base",
	2: "user_id",
}

type LoginRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}
func (p *LoginRequest) SetUsername(val string) {
	p.Username = val
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "username",
	2: "password",
}

type LoginResponse struct {
	Base         *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	UserId       int64           `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	Token        string          `thrift:"token,3,required" frugal:"3,required,string" json:"token"`
	RefreshToken string          `thrift:"refresh_token,4,required" frugal:"4,required,string" json:"refresh_token"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *LoginResponse) GetUserId() (v int64) {
	return p.UserId
}

func (p *LoginResponse) GetToken() (v string) {
	return p.Token
}

func (p *LoginResponse) GetRefreshToken() (v string) {
	return p.RefreshToken
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *LoginResponse) SetUserId(val int64) {
	p.UserId = val
}
func (p *LoginResponse) SetToken(val string) {
	p.Token = val
}
func (p *LoginResponse) SetRefreshToken(val string) {
	p.RefreshToken = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "Base",
	2: "user_id",
	3: "token",
	4: "refresh_token",
}

type UserInfoRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewUserInfoRequest() *UserInfoRequest {
	return &UserInfoRequest{}
}

func (p *UserInfoRequest) InitDefault() {
}

func (p *UserInfoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *UserInfoRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *UserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoRequest(%+v)", *p)
}

var fieldIDToName_UserInfoRequest = map[int16]string{
	1: "user_id",
}

type UserInfoResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	User *model.User     `thrift:"User,2,required" frugal:"2,required,model.User" json:"User"`
}

func NewUserInfoResponse() *UserInfoResponse {
	return &UserInfoResponse{}
}

func (p *UserInfoResponse) InitDefault() {
}

var UserInfoResponse_Base_DEFAULT *model.BaseResp

func (p *UserInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UserInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var UserInfoResponse_User_DEFAULT *model.User

func (p *UserInfoResponse) GetUser() (v *model.User) {
	if !p.IsSetUser() {
		return UserInfoResponse_User_DEFAULT
	}
	return p.User
}
func (p *UserInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UserInfoResponse) SetUser(val *model.User) {
	p.User = val
}

func (p *UserInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserInfoResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *UserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoResponse(%+v)", *p)
}

var fieldIDToName_UserInfoResponse = map[int16]string{
	1: "Base",
	2: "User",
}

type UploadAvatarRequest struct {
	AvatarData  []byte `thrift:"avatar_data,1,required" frugal:"1,required,binary" json:"avatar_data"`
	ContentType string `thrift:"content_type,2,required" frugal:"2,required,string" json:"content_type"`
}

func NewUploadAvatarRequest() *UploadAvatarRequest {
	return &UploadAvatarRequest{}
}

func (p *UploadAvatarRequest) InitDefault() {
}

func (p *UploadAvatarRequest) GetAvatarData() (v []byte) {
	return p.AvatarData
}

func (p *UploadAvatarRequest) GetContentType() (v string) {
	return p.ContentType
}
func (p *UploadAvatarRequest) SetAvatarData(val []byte) {
	p.AvatarData = val
}
func (p *UploadAvatarRequest) SetContentType(val string) {
	p.ContentType = val
}

func (p *UploadAvatarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarRequest(%+v)", *p)
}

var fieldIDToName_UploadAvatarRequest = map[int16]string{
	1: "avatar_data",
	2: "content_type",
}

type UploadAvatarResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	AvatarUrl string          `thrift:"avatar_url,2,required" frugal:"2,required,string" json:"avatar_url"`
}

func NewUploadAvatarResponse() *UploadAvatarResponse {
	return &UploadAvatarResponse{}
}

func (p *UploadAvatarResponse) InitDefault() {
}

var UploadAvatarResponse_Base_DEFAULT *model.BaseResp

func (p *UploadAvatarResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadAvatarResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *UploadAvatarResponse) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}
func (p *UploadAvatarResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UploadAvatarResponse) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}

func (p *UploadAvatarResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadAvatarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarResponse(%+v)", *p)
}

var fieldIDToName_UploadAvatarResponse = map[int16]string{
	1: "Base",
	2: "avatar_url",
}

type RefreshTokenRequest struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
}

func NewRefreshTokenRequest() *RefreshTokenRequest {
	return &RefreshTokenRequest{}
}

func (p *RefreshTokenRequest) InitDefault() {
}

func (p *RefreshTokenRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *RefreshTokenRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *RefreshTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshTokenRequest(%+v)", *p)
}

var fieldIDToName_RefreshTokenRequest = map[int16]string{
	1: "user_id",
}

type RefreshTokenResponse struct {
	Base  *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Token string          `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewRefreshTokenResponse() *RefreshTokenResponse {
	return &RefreshTokenResponse{}
}

func (p *RefreshTokenResponse) InitDefault() {
}

var RefreshTokenResponse_Base_DEFAULT *model.BaseResp

func (p *RefreshTokenResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return RefreshTokenResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *RefreshTokenResponse) GetToken() (v string) {
	return p.Token
}
func (p *RefreshTokenResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *RefreshTokenResponse) SetToken(val string) {
	p.Token = val
}

func (p *RefreshTokenResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RefreshTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshTokenResponse(%+v)", *p)
}

var fieldIDToName_RefreshTokenResponse = map[int16]string{
	1: "Base",
	2: "token",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	GetUserInfo(ctx context.Context, req *UserInfoRequest) (r *UserInfoResponse, err error)

	UploadAvatar(ctx context.Context, req *UploadAvatarRequest) (r *UploadAvatarResponse, err error)

	RefreshToken(ctx context.Context, req *RefreshTokenRequest) (r *RefreshTokenResponse, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" frugal:"1,default,RegisterRequest" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterRequest) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterRequest) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Req *UserInfoRequest `thrift:"req,1" frugal:"1,default,UserInfoRequest" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *UserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetReq() (v *UserInfoRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) SetReq(val *UserInfoRequest) {
	p.Req = val
}

func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserInfoResult struct {
	Success *UserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,UserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *UserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *UserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type UserServiceUploadAvatarArgs struct {
	Req *UploadAvatarRequest `thrift:"req,1" frugal:"1,default,UploadAvatarRequest" json:"req"`
}

func NewUserServiceUploadAvatarArgs() *UserServiceUploadAvatarArgs {
	return &UserServiceUploadAvatarArgs{}
}

func (p *UserServiceUploadAvatarArgs) InitDefault() {
}

var UserServiceUploadAvatarArgs_Req_DEFAULT *UploadAvatarRequest

func (p *UserServiceUploadAvatarArgs) GetReq() (v *UploadAvatarRequest) {
	if !p.IsSetReq() {
		return UserServiceUploadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUploadAvatarArgs) SetReq(val *UploadAvatarRequest) {
	p.Req = val
}

func (p *UserServiceUploadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUploadAvatarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUploadAvatarArgs = map[int16]string{
	1: "req",
}

type UserServiceUploadAvatarResult struct {
	Success *UploadAvatarResponse `thrift:"success,0,optional" frugal:"0,optional,UploadAvatarResponse" json:"success,omitempty"`
}

func NewUserServiceUploadAvatarResult() *UserServiceUploadAvatarResult {
	return &UserServiceUploadAvatarResult{}
}

func (p *UserServiceUploadAvatarResult) InitDefault() {
}

var UserServiceUploadAvatarResult_Success_DEFAULT *UploadAvatarResponse

func (p *UserServiceUploadAvatarResult) GetSuccess() (v *UploadAvatarResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUploadAvatarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUploadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadAvatarResponse)
}

func (p *UserServiceUploadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUploadAvatarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarResult(%+v)", *p)
}

var fieldIDToName_UserServiceUploadAvatarResult = map[int16]string{
	0: "success",
}

type UserServiceRefreshTokenArgs struct {
	Req *RefreshTokenRequest `thrift:"req,1" frugal:"1,default,RefreshTokenRequest" json:"req"`
}

func NewUserServiceRefreshTokenArgs() *UserServiceRefreshTokenArgs {
	return &UserServiceRefreshTokenArgs{}
}

func (p *UserServiceRefreshTokenArgs) InitDefault() {
}

var UserServiceRefreshTokenArgs_Req_DEFAULT *RefreshTokenRequest

func (p *UserServiceRefreshTokenArgs) GetReq() (v *RefreshTokenRequest) {
	if !p.IsSetReq() {
		return UserServiceRefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRefreshTokenArgs) SetReq(val *RefreshTokenRequest) {
	p.Req = val
}

func (p *UserServiceRefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRefreshTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRefreshTokenArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRefreshTokenArgs = map[int16]string{
	1: "req",
}

type UserServiceRefreshTokenResult struct {
	Success *RefreshTokenResponse `thrift:"success,0,optional" frugal:"0,optional,RefreshTokenResponse" json:"success,omitempty"`
}

func NewUserServiceRefreshTokenResult() *UserServiceRefreshTokenResult {
	return &UserServiceRefreshTokenResult{}
}

func (p *UserServiceRefreshTokenResult) InitDefault() {
}

var UserServiceRefreshTokenResult_Success_DEFAULT *RefreshTokenResponse

func (p *UserServiceRefreshTokenResult) GetSuccess() (v *RefreshTokenResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*RefreshTokenResponse)
}

func (p *UserServiceRefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRefreshTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRefreshTokenResult(%+v)", *p)
}

var fieldIDToName_UserServiceRefreshTokenResult = map[int16]string{
	0: "success",
}
