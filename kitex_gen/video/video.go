// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package video

import (
	"context"
	"fmt"
	"github.com/yxrxy/videoHub/kitex_gen/model"
)

type VideoListRequest struct {
	UserId   int64   `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	Page     int64   `thrift:"page,2,required" frugal:"2,required,i64" json:"page"`
	Size     int32   `thrift:"size,3,required" frugal:"3,required,i32" json:"size"`
	Category *string `thrift:"category,4,optional" frugal:"4,optional,string" json:"category,omitempty"`
}

func NewVideoListRequest() *VideoListRequest {
	return &VideoListRequest{}
}

func (p *VideoListRequest) InitDefault() {
}

func (p *VideoListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoListRequest) GetPage() (v int64) {
	return p.Page
}

func (p *VideoListRequest) GetSize() (v int32) {
	return p.Size
}

var VideoListRequest_Category_DEFAULT string

func (p *VideoListRequest) GetCategory() (v string) {
	if !p.IsSetCategory() {
		return VideoListRequest_Category_DEFAULT
	}
	return *p.Category
}
func (p *VideoListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoListRequest) SetPage(val int64) {
	p.Page = val
}
func (p *VideoListRequest) SetSize(val int32) {
	p.Size = val
}
func (p *VideoListRequest) SetCategory(val *string) {
	p.Category = val
}

func (p *VideoListRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *VideoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListRequest(%+v)", *p)
}

var fieldIDToName_VideoListRequest = map[int16]string{
	1: "user_id",
	2: "page",
	3: "size",
	4: "category",
}

type VideoListResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	VideoList []*model.Video  `thrift:"VideoList,2,required" frugal:"2,required,list<model.Video>" json:"VideoList"`
	Total     int64           `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewVideoListResponse() *VideoListResponse {
	return &VideoListResponse{}
}

func (p *VideoListResponse) InitDefault() {
}

var VideoListResponse_Base_DEFAULT *model.BaseResp

func (p *VideoListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return VideoListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoListResponse) GetVideoList() (v []*model.Video) {
	return p.VideoList
}

func (p *VideoListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *VideoListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *VideoListResponse) SetVideoList(val []*model.Video) {
	p.VideoList = val
}
func (p *VideoListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *VideoListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListResponse(%+v)", *p)
}

var fieldIDToName_VideoListResponse = map[int16]string{
	1: "Base",
	2: "VideoList",
	3: "total",
}

type DetailRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewDetailRequest() *DetailRequest {
	return &DetailRequest{}
}

func (p *DetailRequest) InitDefault() {
}

func (p *DetailRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *DetailRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *DetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DetailRequest(%+v)", *p)
}

var fieldIDToName_DetailRequest = map[int16]string{
	1: "video_id",
}

type DetailResponse struct {
	Base  *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Video *model.Video    `thrift:"Video,2,required" frugal:"2,required,model.Video" json:"Video"`
}

func NewDetailResponse() *DetailResponse {
	return &DetailResponse{}
}

func (p *DetailResponse) InitDefault() {
}

var DetailResponse_Base_DEFAULT *model.BaseResp

func (p *DetailResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DetailResponse_Base_DEFAULT
	}
	return p.Base
}

var DetailResponse_Video_DEFAULT *model.Video

func (p *DetailResponse) GetVideo() (v *model.Video) {
	if !p.IsSetVideo() {
		return DetailResponse_Video_DEFAULT
	}
	return p.Video
}
func (p *DetailResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *DetailResponse) SetVideo(val *model.Video) {
	p.Video = val
}

func (p *DetailResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DetailResponse) IsSetVideo() bool {
	return p.Video != nil
}

func (p *DetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DetailResponse(%+v)", *p)
}

var fieldIDToName_DetailResponse = map[int16]string{
	1: "Base",
	2: "Video",
}

type PublishRequest struct {
	UserId      int64    `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	VideoData   []byte   `thrift:"video_data,2,required" frugal:"2,required,binary" json:"video_data"`
	ContentType string   `thrift:"content_type,3,required" frugal:"3,required,string" json:"content_type"`
	Title       string   `thrift:"title,4,required" frugal:"4,required,string" json:"title"`
	Description *string  `thrift:"description,5,optional" frugal:"5,optional,string" json:"description,omitempty"`
	Category    *string  `thrift:"category,6,optional" frugal:"6,optional,string" json:"category,omitempty"`
	Tags        []string `thrift:"tags,7,optional" frugal:"7,optional,list<string>" json:"tags,omitempty"`
	IsPrivate   *bool    `thrift:"is_private,8,optional" frugal:"8,optional,bool" json:"is_private,omitempty"`
}

func NewPublishRequest() *PublishRequest {
	return &PublishRequest{}
}

func (p *PublishRequest) InitDefault() {
}

func (p *PublishRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *PublishRequest) GetVideoData() (v []byte) {
	return p.VideoData
}

func (p *PublishRequest) GetContentType() (v string) {
	return p.ContentType
}

func (p *PublishRequest) GetTitle() (v string) {
	return p.Title
}

var PublishRequest_Description_DEFAULT string

func (p *PublishRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return PublishRequest_Description_DEFAULT
	}
	return *p.Description
}

var PublishRequest_Category_DEFAULT string

func (p *PublishRequest) GetCategory() (v string) {
	if !p.IsSetCategory() {
		return PublishRequest_Category_DEFAULT
	}
	return *p.Category
}

var PublishRequest_Tags_DEFAULT []string

func (p *PublishRequest) GetTags() (v []string) {
	if !p.IsSetTags() {
		return PublishRequest_Tags_DEFAULT
	}
	return p.Tags
}

var PublishRequest_IsPrivate_DEFAULT bool

func (p *PublishRequest) GetIsPrivate() (v bool) {
	if !p.IsSetIsPrivate() {
		return PublishRequest_IsPrivate_DEFAULT
	}
	return *p.IsPrivate
}
func (p *PublishRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *PublishRequest) SetVideoData(val []byte) {
	p.VideoData = val
}
func (p *PublishRequest) SetContentType(val string) {
	p.ContentType = val
}
func (p *PublishRequest) SetTitle(val string) {
	p.Title = val
}
func (p *PublishRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *PublishRequest) SetCategory(val *string) {
	p.Category = val
}
func (p *PublishRequest) SetTags(val []string) {
	p.Tags = val
}
func (p *PublishRequest) SetIsPrivate(val *bool) {
	p.IsPrivate = val
}

func (p *PublishRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *PublishRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *PublishRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *PublishRequest) IsSetIsPrivate() bool {
	return p.IsPrivate != nil
}

func (p *PublishRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishRequest(%+v)", *p)
}

var fieldIDToName_PublishRequest = map[int16]string{
	1: "user_id",
	2: "video_data",
	3: "content_type",
	4: "title",
	5: "description",
	6: "category",
	7: "tags",
	8: "is_private",
}

type PublishResponse struct {
	Base     *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	VideoUrl string          `thrift:"video_url,2,required" frugal:"2,required,string" json:"video_url"`
	CoverUrl string          `thrift:"cover_url,3,required" frugal:"3,required,string" json:"cover_url"`
}

func NewPublishResponse() *PublishResponse {
	return &PublishResponse{}
}

func (p *PublishResponse) InitDefault() {
}

var PublishResponse_Base_DEFAULT *model.BaseResp

func (p *PublishResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return PublishResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *PublishResponse) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *PublishResponse) GetCoverUrl() (v string) {
	return p.CoverUrl
}
func (p *PublishResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *PublishResponse) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *PublishResponse) SetCoverUrl(val string) {
	p.CoverUrl = val
}

func (p *PublishResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PublishResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishResponse(%+v)", *p)
}

var fieldIDToName_PublishResponse = map[int16]string{
	1: "Base",
	2: "video_url",
	3: "cover_url",
}

type HotVideoRequest struct {
	Limit     *int32  `thrift:"limit,1,optional" frugal:"1,optional,i32" json:"limit,omitempty"`
	Category  *string `thrift:"category,2,optional" frugal:"2,optional,string" json:"category,omitempty"`
	LastVisit *int64  `thrift:"last_visit,3,optional" frugal:"3,optional,i64" json:"last_visit,omitempty"`
	LastLike  *int64  `thrift:"last_like,4,optional" frugal:"4,optional,i64" json:"last_like,omitempty"`
	LastId    *int64  `thrift:"last_id,5,optional" frugal:"5,optional,i64" json:"last_id,omitempty"`
}

func NewHotVideoRequest() *HotVideoRequest {
	return &HotVideoRequest{}
}

func (p *HotVideoRequest) InitDefault() {
}

var HotVideoRequest_Limit_DEFAULT int32

func (p *HotVideoRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return HotVideoRequest_Limit_DEFAULT
	}
	return *p.Limit
}

var HotVideoRequest_Category_DEFAULT string

func (p *HotVideoRequest) GetCategory() (v string) {
	if !p.IsSetCategory() {
		return HotVideoRequest_Category_DEFAULT
	}
	return *p.Category
}

var HotVideoRequest_LastVisit_DEFAULT int64

func (p *HotVideoRequest) GetLastVisit() (v int64) {
	if !p.IsSetLastVisit() {
		return HotVideoRequest_LastVisit_DEFAULT
	}
	return *p.LastVisit
}

var HotVideoRequest_LastLike_DEFAULT int64

func (p *HotVideoRequest) GetLastLike() (v int64) {
	if !p.IsSetLastLike() {
		return HotVideoRequest_LastLike_DEFAULT
	}
	return *p.LastLike
}

var HotVideoRequest_LastId_DEFAULT int64

func (p *HotVideoRequest) GetLastId() (v int64) {
	if !p.IsSetLastId() {
		return HotVideoRequest_LastId_DEFAULT
	}
	return *p.LastId
}
func (p *HotVideoRequest) SetLimit(val *int32) {
	p.Limit = val
}
func (p *HotVideoRequest) SetCategory(val *string) {
	p.Category = val
}
func (p *HotVideoRequest) SetLastVisit(val *int64) {
	p.LastVisit = val
}
func (p *HotVideoRequest) SetLastLike(val *int64) {
	p.LastLike = val
}
func (p *HotVideoRequest) SetLastId(val *int64) {
	p.LastId = val
}

func (p *HotVideoRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *HotVideoRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *HotVideoRequest) IsSetLastVisit() bool {
	return p.LastVisit != nil
}

func (p *HotVideoRequest) IsSetLastLike() bool {
	return p.LastLike != nil
}

func (p *HotVideoRequest) IsSetLastId() bool {
	return p.LastId != nil
}

func (p *HotVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotVideoRequest(%+v)", *p)
}

var fieldIDToName_HotVideoRequest = map[int16]string{
	1: "limit",
	2: "category",
	3: "last_visit",
	4: "last_like",
	5: "last_id",
}

type HotVideoResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Videos    []*model.Video  `thrift:"videos,2,required" frugal:"2,required,list<model.Video>" json:"videos"`
	Total     int64           `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
	NextVisit *int64          `thrift:"next_visit,4,optional" frugal:"4,optional,i64" json:"next_visit,omitempty"`
	NextLike  *int64          `thrift:"next_like,5,optional" frugal:"5,optional,i64" json:"next_like,omitempty"`
	NextId    *int64          `thrift:"next_id,6,optional" frugal:"6,optional,i64" json:"next_id,omitempty"`
}

func NewHotVideoResponse() *HotVideoResponse {
	return &HotVideoResponse{}
}

func (p *HotVideoResponse) InitDefault() {
}

var HotVideoResponse_Base_DEFAULT *model.BaseResp

func (p *HotVideoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return HotVideoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *HotVideoResponse) GetVideos() (v []*model.Video) {
	return p.Videos
}

func (p *HotVideoResponse) GetTotal() (v int64) {
	return p.Total
}

var HotVideoResponse_NextVisit_DEFAULT int64

func (p *HotVideoResponse) GetNextVisit() (v int64) {
	if !p.IsSetNextVisit() {
		return HotVideoResponse_NextVisit_DEFAULT
	}
	return *p.NextVisit
}

var HotVideoResponse_NextLike_DEFAULT int64

func (p *HotVideoResponse) GetNextLike() (v int64) {
	if !p.IsSetNextLike() {
		return HotVideoResponse_NextLike_DEFAULT
	}
	return *p.NextLike
}

var HotVideoResponse_NextId_DEFAULT int64

func (p *HotVideoResponse) GetNextId() (v int64) {
	if !p.IsSetNextId() {
		return HotVideoResponse_NextId_DEFAULT
	}
	return *p.NextId
}
func (p *HotVideoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *HotVideoResponse) SetVideos(val []*model.Video) {
	p.Videos = val
}
func (p *HotVideoResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *HotVideoResponse) SetNextVisit(val *int64) {
	p.NextVisit = val
}
func (p *HotVideoResponse) SetNextLike(val *int64) {
	p.NextLike = val
}
func (p *HotVideoResponse) SetNextId(val *int64) {
	p.NextId = val
}

func (p *HotVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *HotVideoResponse) IsSetNextVisit() bool {
	return p.NextVisit != nil
}

func (p *HotVideoResponse) IsSetNextLike() bool {
	return p.NextLike != nil
}

func (p *HotVideoResponse) IsSetNextId() bool {
	return p.NextId != nil
}

func (p *HotVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotVideoResponse(%+v)", *p)
}

var fieldIDToName_HotVideoResponse = map[int16]string{
	1: "Base",
	2: "videos",
	3: "total",
	4: "next_visit",
	5: "next_like",
	6: "next_id",
}

type DeleteRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewDeleteRequest() *DeleteRequest {
	return &DeleteRequest{}
}

func (p *DeleteRequest) InitDefault() {
}

func (p *DeleteRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *DeleteRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *DeleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRequest(%+v)", *p)
}

var fieldIDToName_DeleteRequest = map[int16]string{
	1: "video_id",
}

type DeleteResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewDeleteResponse() *DeleteResponse {
	return &DeleteResponse{}
}

func (p *DeleteResponse) InitDefault() {
}

var DeleteResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResponse(%+v)", *p)
}

var fieldIDToName_DeleteResponse = map[int16]string{
	1: "Base",
}

type IncrementVisitCountRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewIncrementVisitCountRequest() *IncrementVisitCountRequest {
	return &IncrementVisitCountRequest{}
}

func (p *IncrementVisitCountRequest) InitDefault() {
}

func (p *IncrementVisitCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *IncrementVisitCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *IncrementVisitCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementVisitCountRequest(%+v)", *p)
}

var fieldIDToName_IncrementVisitCountRequest = map[int16]string{
	1: "video_id",
}

type IncrementVisitCountResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewIncrementVisitCountResponse() *IncrementVisitCountResponse {
	return &IncrementVisitCountResponse{}
}

func (p *IncrementVisitCountResponse) InitDefault() {
}

var IncrementVisitCountResponse_Base_DEFAULT *model.BaseResp

func (p *IncrementVisitCountResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return IncrementVisitCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *IncrementVisitCountResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *IncrementVisitCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *IncrementVisitCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementVisitCountResponse(%+v)", *p)
}

var fieldIDToName_IncrementVisitCountResponse = map[int16]string{
	1: "Base",
}

type IncrementLikeCountRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewIncrementLikeCountRequest() *IncrementLikeCountRequest {
	return &IncrementLikeCountRequest{}
}

func (p *IncrementLikeCountRequest) InitDefault() {
}

func (p *IncrementLikeCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *IncrementLikeCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *IncrementLikeCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementLikeCountRequest(%+v)", *p)
}

var fieldIDToName_IncrementLikeCountRequest = map[int16]string{
	1: "video_id",
}

type IncrementLikeCountResponse struct {
	Base *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
}

func NewIncrementLikeCountResponse() *IncrementLikeCountResponse {
	return &IncrementLikeCountResponse{}
}

func (p *IncrementLikeCountResponse) InitDefault() {
}

var IncrementLikeCountResponse_Base_DEFAULT *model.BaseResp

func (p *IncrementLikeCountResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return IncrementLikeCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *IncrementLikeCountResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *IncrementLikeCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *IncrementLikeCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementLikeCountResponse(%+v)", *p)
}

var fieldIDToName_IncrementLikeCountResponse = map[int16]string{
	1: "Base",
}

type SearchRequest struct {
	Keywords string  `thrift:"keywords,1,required" frugal:"1,required,string" json:"keywords"`
	PageSize int32   `thrift:"page_size,2,required" frugal:"2,required,i32" json:"page_size"`
	PageNum  int32   `thrift:"page_num,3,required" frugal:"3,required,i32" json:"page_num"`
	FromDate *int64  `thrift:"from_date,4,optional" frugal:"4,optional,i64" json:"from_date,omitempty"`
	ToDate   *int64  `thrift:"to_date,5,optional" frugal:"5,optional,i64" json:"to_date,omitempty"`
	Username *string `thrift:"username,6,optional" frugal:"6,optional,string" json:"username,omitempty"`
}

func NewSearchRequest() *SearchRequest {
	return &SearchRequest{}
}

func (p *SearchRequest) InitDefault() {
}

func (p *SearchRequest) GetKeywords() (v string) {
	return p.Keywords
}

func (p *SearchRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *SearchRequest) GetPageNum() (v int32) {
	return p.PageNum
}

var SearchRequest_FromDate_DEFAULT int64

func (p *SearchRequest) GetFromDate() (v int64) {
	if !p.IsSetFromDate() {
		return SearchRequest_FromDate_DEFAULT
	}
	return *p.FromDate
}

var SearchRequest_ToDate_DEFAULT int64

func (p *SearchRequest) GetToDate() (v int64) {
	if !p.IsSetToDate() {
		return SearchRequest_ToDate_DEFAULT
	}
	return *p.ToDate
}

var SearchRequest_Username_DEFAULT string

func (p *SearchRequest) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return SearchRequest_Username_DEFAULT
	}
	return *p.Username
}
func (p *SearchRequest) SetKeywords(val string) {
	p.Keywords = val
}
func (p *SearchRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *SearchRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *SearchRequest) SetFromDate(val *int64) {
	p.FromDate = val
}
func (p *SearchRequest) SetToDate(val *int64) {
	p.ToDate = val
}
func (p *SearchRequest) SetUsername(val *string) {
	p.Username = val
}

func (p *SearchRequest) IsSetFromDate() bool {
	return p.FromDate != nil
}

func (p *SearchRequest) IsSetToDate() bool {
	return p.ToDate != nil
}

func (p *SearchRequest) IsSetUsername() bool {
	return p.Username != nil
}

func (p *SearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchRequest(%+v)", *p)
}

var fieldIDToName_SearchRequest = map[int16]string{
	1: "keywords",
	2: "page_size",
	3: "page_num",
	4: "from_date",
	5: "to_date",
	6: "username",
}

type SearchResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Videos []*model.Video  `thrift:"videos,2,required" frugal:"2,required,list<model.Video>" json:"videos"`
	Total  int64           `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewSearchResponse() *SearchResponse {
	return &SearchResponse{}
}

func (p *SearchResponse) InitDefault() {
}

var SearchResponse_Base_DEFAULT *model.BaseResp

func (p *SearchResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SearchResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *SearchResponse) GetVideos() (v []*model.Video) {
	return p.Videos
}

func (p *SearchResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *SearchResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *SearchResponse) SetVideos(val []*model.Video) {
	p.Videos = val
}
func (p *SearchResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *SearchResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchResponse(%+v)", *p)
}

var fieldIDToName_SearchResponse = map[int16]string{
	1: "Base",
	2: "videos",
	3: "total",
}

type SemanticSearchRequest struct {
	Query     string   `thrift:"query,1,required" frugal:"1,required,string" json:"query"`
	PageSize  int32    `thrift:"page_size,2,required" frugal:"2,required,i32" json:"page_size"`
	PageNum   int32    `thrift:"page_num,3,required" frugal:"3,required,i32" json:"page_num"`
	Threshold *float64 `thrift:"threshold,4,optional" frugal:"4,optional,double" json:"threshold,omitempty"`
}

func NewSemanticSearchRequest() *SemanticSearchRequest {
	return &SemanticSearchRequest{}
}

func (p *SemanticSearchRequest) InitDefault() {
}

func (p *SemanticSearchRequest) GetQuery() (v string) {
	return p.Query
}

func (p *SemanticSearchRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *SemanticSearchRequest) GetPageNum() (v int32) {
	return p.PageNum
}

var SemanticSearchRequest_Threshold_DEFAULT float64

func (p *SemanticSearchRequest) GetThreshold() (v float64) {
	if !p.IsSetThreshold() {
		return SemanticSearchRequest_Threshold_DEFAULT
	}
	return *p.Threshold
}
func (p *SemanticSearchRequest) SetQuery(val string) {
	p.Query = val
}
func (p *SemanticSearchRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *SemanticSearchRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *SemanticSearchRequest) SetThreshold(val *float64) {
	p.Threshold = val
}

func (p *SemanticSearchRequest) IsSetThreshold() bool {
	return p.Threshold != nil
}

func (p *SemanticSearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SemanticSearchRequest(%+v)", *p)
}

var fieldIDToName_SemanticSearchRequest = map[int16]string{
	1: "query",
	2: "page_size",
	3: "page_num",
	4: "threshold",
}

type SemanticSearchResponse struct {
	Base           *model.BaseResp                   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Results        []*model.SemanticSearchResultItem `thrift:"results,2,required" frugal:"2,required,list<model.SemanticSearchResultItem>" json:"results"`
	Total          int64                             `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
	RelatedQueries []string                          `thrift:"related_queries,4,optional" frugal:"4,optional,list<string>" json:"related_queries,omitempty"`
	Summary        *string                           `thrift:"summary,5,optional" frugal:"5,optional,string" json:"summary,omitempty"`
}

func NewSemanticSearchResponse() *SemanticSearchResponse {
	return &SemanticSearchResponse{}
}

func (p *SemanticSearchResponse) InitDefault() {
}

var SemanticSearchResponse_Base_DEFAULT *model.BaseResp

func (p *SemanticSearchResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return SemanticSearchResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *SemanticSearchResponse) GetResults() (v []*model.SemanticSearchResultItem) {
	return p.Results
}

func (p *SemanticSearchResponse) GetTotal() (v int64) {
	return p.Total
}

var SemanticSearchResponse_RelatedQueries_DEFAULT []string

func (p *SemanticSearchResponse) GetRelatedQueries() (v []string) {
	if !p.IsSetRelatedQueries() {
		return SemanticSearchResponse_RelatedQueries_DEFAULT
	}
	return p.RelatedQueries
}

var SemanticSearchResponse_Summary_DEFAULT string

func (p *SemanticSearchResponse) GetSummary() (v string) {
	if !p.IsSetSummary() {
		return SemanticSearchResponse_Summary_DEFAULT
	}
	return *p.Summary
}
func (p *SemanticSearchResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *SemanticSearchResponse) SetResults(val []*model.SemanticSearchResultItem) {
	p.Results = val
}
func (p *SemanticSearchResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *SemanticSearchResponse) SetRelatedQueries(val []string) {
	p.RelatedQueries = val
}
func (p *SemanticSearchResponse) SetSummary(val *string) {
	p.Summary = val
}

func (p *SemanticSearchResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SemanticSearchResponse) IsSetRelatedQueries() bool {
	return p.RelatedQueries != nil
}

func (p *SemanticSearchResponse) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *SemanticSearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SemanticSearchResponse(%+v)", *p)
}

var fieldIDToName_SemanticSearchResponse = map[int16]string{
	1: "Base",
	2: "results",
	3: "total",
	4: "related_queries",
	5: "summary",
}

type VideoService interface {
	Publish(ctx context.Context, req *PublishRequest) (r *PublishResponse, err error)

	List(ctx context.Context, req *VideoListRequest) (r *VideoListResponse, err error)

	Detail(ctx context.Context, req *DetailRequest) (r *DetailResponse, err error)

	GetHotVideos(ctx context.Context, req *HotVideoRequest) (r *HotVideoResponse, err error)

	Delete(ctx context.Context, req *DeleteRequest) (r *DeleteResponse, err error)

	IncrementVisitCount(ctx context.Context, req *IncrementVisitCountRequest) (r *IncrementVisitCountResponse, err error)

	IncrementLikeCount(ctx context.Context, req *IncrementLikeCountRequest) (r *IncrementLikeCountResponse, err error)

	Search(ctx context.Context, req *SearchRequest) (r *SearchResponse, err error)

	SemanticSearch(ctx context.Context, req *SemanticSearchRequest) (r *SemanticSearchResponse, err error)
}

type VideoServicePublishArgs struct {
	Req *PublishRequest `thrift:"req,1" frugal:"1,default,PublishRequest" json:"req"`
}

func NewVideoServicePublishArgs() *VideoServicePublishArgs {
	return &VideoServicePublishArgs{}
}

func (p *VideoServicePublishArgs) InitDefault() {
}

var VideoServicePublishArgs_Req_DEFAULT *PublishRequest

func (p *VideoServicePublishArgs) GetReq() (v *PublishRequest) {
	if !p.IsSetReq() {
		return VideoServicePublishArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServicePublishArgs) SetReq(val *PublishRequest) {
	p.Req = val
}

func (p *VideoServicePublishArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServicePublishArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePublishArgs(%+v)", *p)
}

var fieldIDToName_VideoServicePublishArgs = map[int16]string{
	1: "req",
}

type VideoServicePublishResult struct {
	Success *PublishResponse `thrift:"success,0,optional" frugal:"0,optional,PublishResponse" json:"success,omitempty"`
}

func NewVideoServicePublishResult() *VideoServicePublishResult {
	return &VideoServicePublishResult{}
}

func (p *VideoServicePublishResult) InitDefault() {
}

var VideoServicePublishResult_Success_DEFAULT *PublishResponse

func (p *VideoServicePublishResult) GetSuccess() (v *PublishResponse) {
	if !p.IsSetSuccess() {
		return VideoServicePublishResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServicePublishResult) SetSuccess(x interface{}) {
	p.Success = x.(*PublishResponse)
}

func (p *VideoServicePublishResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServicePublishResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePublishResult(%+v)", *p)
}

var fieldIDToName_VideoServicePublishResult = map[int16]string{
	0: "success",
}

type VideoServiceListArgs struct {
	Req *VideoListRequest `thrift:"req,1" frugal:"1,default,VideoListRequest" json:"req"`
}

func NewVideoServiceListArgs() *VideoServiceListArgs {
	return &VideoServiceListArgs{}
}

func (p *VideoServiceListArgs) InitDefault() {
}

var VideoServiceListArgs_Req_DEFAULT *VideoListRequest

func (p *VideoServiceListArgs) GetReq() (v *VideoListRequest) {
	if !p.IsSetReq() {
		return VideoServiceListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceListArgs) SetReq(val *VideoListRequest) {
	p.Req = val
}

func (p *VideoServiceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceListArgs = map[int16]string{
	1: "req",
}

type VideoServiceListResult struct {
	Success *VideoListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoListResponse" json:"success,omitempty"`
}

func NewVideoServiceListResult() *VideoServiceListResult {
	return &VideoServiceListResult{}
}

func (p *VideoServiceListResult) InitDefault() {
}

var VideoServiceListResult_Success_DEFAULT *VideoListResponse

func (p *VideoServiceListResult) GetSuccess() (v *VideoListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoListResponse)
}

func (p *VideoServiceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceListResult = map[int16]string{
	0: "success",
}

type VideoServiceDetailArgs struct {
	Req *DetailRequest `thrift:"req,1" frugal:"1,default,DetailRequest" json:"req"`
}

func NewVideoServiceDetailArgs() *VideoServiceDetailArgs {
	return &VideoServiceDetailArgs{}
}

func (p *VideoServiceDetailArgs) InitDefault() {
}

var VideoServiceDetailArgs_Req_DEFAULT *DetailRequest

func (p *VideoServiceDetailArgs) GetReq() (v *DetailRequest) {
	if !p.IsSetReq() {
		return VideoServiceDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDetailArgs) SetReq(val *DetailRequest) {
	p.Req = val
}

func (p *VideoServiceDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDetailArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceDetailArgs = map[int16]string{
	1: "req",
}

type VideoServiceDetailResult struct {
	Success *DetailResponse `thrift:"success,0,optional" frugal:"0,optional,DetailResponse" json:"success,omitempty"`
}

func NewVideoServiceDetailResult() *VideoServiceDetailResult {
	return &VideoServiceDetailResult{}
}

func (p *VideoServiceDetailResult) InitDefault() {
}

var VideoServiceDetailResult_Success_DEFAULT *DetailResponse

func (p *VideoServiceDetailResult) GetSuccess() (v *DetailResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*DetailResponse)
}

func (p *VideoServiceDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDetailResult(%+v)", *p)
}

var fieldIDToName_VideoServiceDetailResult = map[int16]string{
	0: "success",
}

type VideoServiceGetHotVideosArgs struct {
	Req *HotVideoRequest `thrift:"req,1" frugal:"1,default,HotVideoRequest" json:"req"`
}

func NewVideoServiceGetHotVideosArgs() *VideoServiceGetHotVideosArgs {
	return &VideoServiceGetHotVideosArgs{}
}

func (p *VideoServiceGetHotVideosArgs) InitDefault() {
}

var VideoServiceGetHotVideosArgs_Req_DEFAULT *HotVideoRequest

func (p *VideoServiceGetHotVideosArgs) GetReq() (v *HotVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetHotVideosArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetHotVideosArgs) SetReq(val *HotVideoRequest) {
	p.Req = val
}

func (p *VideoServiceGetHotVideosArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetHotVideosArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetHotVideosArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetHotVideosArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetHotVideosResult struct {
	Success *HotVideoResponse `thrift:"success,0,optional" frugal:"0,optional,HotVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceGetHotVideosResult() *VideoServiceGetHotVideosResult {
	return &VideoServiceGetHotVideosResult{}
}

func (p *VideoServiceGetHotVideosResult) InitDefault() {
}

var VideoServiceGetHotVideosResult_Success_DEFAULT *HotVideoResponse

func (p *VideoServiceGetHotVideosResult) GetSuccess() (v *HotVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetHotVideosResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetHotVideosResult) SetSuccess(x interface{}) {
	p.Success = x.(*HotVideoResponse)
}

func (p *VideoServiceGetHotVideosResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetHotVideosResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetHotVideosResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetHotVideosResult = map[int16]string{
	0: "success",
}

type VideoServiceDeleteArgs struct {
	Req *DeleteRequest `thrift:"req,1" frugal:"1,default,DeleteRequest" json:"req"`
}

func NewVideoServiceDeleteArgs() *VideoServiceDeleteArgs {
	return &VideoServiceDeleteArgs{}
}

func (p *VideoServiceDeleteArgs) InitDefault() {
}

var VideoServiceDeleteArgs_Req_DEFAULT *DeleteRequest

func (p *VideoServiceDeleteArgs) GetReq() (v *DeleteRequest) {
	if !p.IsSetReq() {
		return VideoServiceDeleteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDeleteArgs) SetReq(val *DeleteRequest) {
	p.Req = val
}

func (p *VideoServiceDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteArgs = map[int16]string{
	1: "req",
}

type VideoServiceDeleteResult struct {
	Success *DeleteResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteResponse" json:"success,omitempty"`
}

func NewVideoServiceDeleteResult() *VideoServiceDeleteResult {
	return &VideoServiceDeleteResult{}
}

func (p *VideoServiceDeleteResult) InitDefault() {
}

var VideoServiceDeleteResult_Success_DEFAULT *DeleteResponse

func (p *VideoServiceDeleteResult) GetSuccess() (v *DeleteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteResponse)
}

func (p *VideoServiceDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteResult = map[int16]string{
	0: "success",
}

type VideoServiceIncrementVisitCountArgs struct {
	Req *IncrementVisitCountRequest `thrift:"req,1" frugal:"1,default,IncrementVisitCountRequest" json:"req"`
}

func NewVideoServiceIncrementVisitCountArgs() *VideoServiceIncrementVisitCountArgs {
	return &VideoServiceIncrementVisitCountArgs{}
}

func (p *VideoServiceIncrementVisitCountArgs) InitDefault() {
}

var VideoServiceIncrementVisitCountArgs_Req_DEFAULT *IncrementVisitCountRequest

func (p *VideoServiceIncrementVisitCountArgs) GetReq() (v *IncrementVisitCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceIncrementVisitCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceIncrementVisitCountArgs) SetReq(val *IncrementVisitCountRequest) {
	p.Req = val
}

func (p *VideoServiceIncrementVisitCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceIncrementVisitCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIncrementVisitCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceIncrementVisitCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceIncrementVisitCountResult struct {
	Success *IncrementVisitCountResponse `thrift:"success,0,optional" frugal:"0,optional,IncrementVisitCountResponse" json:"success,omitempty"`
}

func NewVideoServiceIncrementVisitCountResult() *VideoServiceIncrementVisitCountResult {
	return &VideoServiceIncrementVisitCountResult{}
}

func (p *VideoServiceIncrementVisitCountResult) InitDefault() {
}

var VideoServiceIncrementVisitCountResult_Success_DEFAULT *IncrementVisitCountResponse

func (p *VideoServiceIncrementVisitCountResult) GetSuccess() (v *IncrementVisitCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceIncrementVisitCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceIncrementVisitCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*IncrementVisitCountResponse)
}

func (p *VideoServiceIncrementVisitCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceIncrementVisitCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIncrementVisitCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceIncrementVisitCountResult = map[int16]string{
	0: "success",
}

type VideoServiceIncrementLikeCountArgs struct {
	Req *IncrementLikeCountRequest `thrift:"req,1" frugal:"1,default,IncrementLikeCountRequest" json:"req"`
}

func NewVideoServiceIncrementLikeCountArgs() *VideoServiceIncrementLikeCountArgs {
	return &VideoServiceIncrementLikeCountArgs{}
}

func (p *VideoServiceIncrementLikeCountArgs) InitDefault() {
}

var VideoServiceIncrementLikeCountArgs_Req_DEFAULT *IncrementLikeCountRequest

func (p *VideoServiceIncrementLikeCountArgs) GetReq() (v *IncrementLikeCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceIncrementLikeCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceIncrementLikeCountArgs) SetReq(val *IncrementLikeCountRequest) {
	p.Req = val
}

func (p *VideoServiceIncrementLikeCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceIncrementLikeCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIncrementLikeCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceIncrementLikeCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceIncrementLikeCountResult struct {
	Success *IncrementLikeCountResponse `thrift:"success,0,optional" frugal:"0,optional,IncrementLikeCountResponse" json:"success,omitempty"`
}

func NewVideoServiceIncrementLikeCountResult() *VideoServiceIncrementLikeCountResult {
	return &VideoServiceIncrementLikeCountResult{}
}

func (p *VideoServiceIncrementLikeCountResult) InitDefault() {
}

var VideoServiceIncrementLikeCountResult_Success_DEFAULT *IncrementLikeCountResponse

func (p *VideoServiceIncrementLikeCountResult) GetSuccess() (v *IncrementLikeCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceIncrementLikeCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceIncrementLikeCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*IncrementLikeCountResponse)
}

func (p *VideoServiceIncrementLikeCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceIncrementLikeCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIncrementLikeCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceIncrementLikeCountResult = map[int16]string{
	0: "success",
}

type VideoServiceSearchArgs struct {
	Req *SearchRequest `thrift:"req,1" frugal:"1,default,SearchRequest" json:"req"`
}

func NewVideoServiceSearchArgs() *VideoServiceSearchArgs {
	return &VideoServiceSearchArgs{}
}

func (p *VideoServiceSearchArgs) InitDefault() {
}

var VideoServiceSearchArgs_Req_DEFAULT *SearchRequest

func (p *VideoServiceSearchArgs) GetReq() (v *SearchRequest) {
	if !p.IsSetReq() {
		return VideoServiceSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSearchArgs) SetReq(val *SearchRequest) {
	p.Req = val
}

func (p *VideoServiceSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceSearchResult struct {
	Success *SearchResponse `thrift:"success,0,optional" frugal:"0,optional,SearchResponse" json:"success,omitempty"`
}

func NewVideoServiceSearchResult() *VideoServiceSearchResult {
	return &VideoServiceSearchResult{}
}

func (p *VideoServiceSearchResult) InitDefault() {
}

var VideoServiceSearchResult_Success_DEFAULT *SearchResponse

func (p *VideoServiceSearchResult) GetSuccess() (v *SearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchResponse)
}

func (p *VideoServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchResult(%+v)", *p)
}

var fieldIDToName_VideoServiceSearchResult = map[int16]string{
	0: "success",
}

type VideoServiceSemanticSearchArgs struct {
	Req *SemanticSearchRequest `thrift:"req,1" frugal:"1,default,SemanticSearchRequest" json:"req"`
}

func NewVideoServiceSemanticSearchArgs() *VideoServiceSemanticSearchArgs {
	return &VideoServiceSemanticSearchArgs{}
}

func (p *VideoServiceSemanticSearchArgs) InitDefault() {
}

var VideoServiceSemanticSearchArgs_Req_DEFAULT *SemanticSearchRequest

func (p *VideoServiceSemanticSearchArgs) GetReq() (v *SemanticSearchRequest) {
	if !p.IsSetReq() {
		return VideoServiceSemanticSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSemanticSearchArgs) SetReq(val *SemanticSearchRequest) {
	p.Req = val
}

func (p *VideoServiceSemanticSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSemanticSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSemanticSearchArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceSemanticSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceSemanticSearchResult struct {
	Success *SemanticSearchResponse `thrift:"success,0,optional" frugal:"0,optional,SemanticSearchResponse" json:"success,omitempty"`
}

func NewVideoServiceSemanticSearchResult() *VideoServiceSemanticSearchResult {
	return &VideoServiceSemanticSearchResult{}
}

func (p *VideoServiceSemanticSearchResult) InitDefault() {
}

var VideoServiceSemanticSearchResult_Success_DEFAULT *SemanticSearchResponse

func (p *VideoServiceSemanticSearchResult) GetSuccess() (v *SemanticSearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSemanticSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSemanticSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*SemanticSearchResponse)
}

func (p *VideoServiceSemanticSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSemanticSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSemanticSearchResult(%+v)", *p)
}

var fieldIDToName_VideoServiceSemanticSearchResult = map[int16]string{
	0: "success",
}
