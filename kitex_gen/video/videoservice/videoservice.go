// Code generated by Kitex v0.12.3. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "github.com/yxrrxy/videoHub/kitex_gen/video"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Publish": kitex.NewMethodInfo(
		publishHandler,
		newVideoServicePublishArgs,
		newVideoServicePublishResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoList": kitex.NewMethodInfo(
		getVideoListHandler,
		newVideoServiceGetVideoListArgs,
		newVideoServiceGetVideoListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHotVideos": kitex.NewMethodInfo(
		getHotVideosHandler,
		newVideoServiceGetHotVideosArgs,
		newVideoServiceGetHotVideosResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IncrementVisitCount": kitex.NewMethodInfo(
		incrementVisitCountHandler,
		newVideoServiceIncrementVisitCountArgs,
		newVideoServiceIncrementVisitCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IncrementLikeCount": kitex.NewMethodInfo(
		incrementLikeCountHandler,
		newVideoServiceIncrementLikeCountArgs,
		newVideoServiceIncrementLikeCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishArgs)
	realResult := result.(*video.VideoServicePublishResult)
	success, err := handler.(video.VideoService).Publish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishArgs() interface{} {
	return video.NewVideoServicePublishArgs()
}

func newVideoServicePublishResult() interface{} {
	return video.NewVideoServicePublishResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoListArgs)
	realResult := result.(*video.VideoServiceGetVideoListResult)
	success, err := handler.(video.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return video.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return video.NewVideoServiceGetVideoListResult()
}

func getHotVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetHotVideosArgs)
	realResult := result.(*video.VideoServiceGetHotVideosResult)
	success, err := handler.(video.VideoService).GetHotVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetHotVideosArgs() interface{} {
	return video.NewVideoServiceGetHotVideosArgs()
}

func newVideoServiceGetHotVideosResult() interface{} {
	return video.NewVideoServiceGetHotVideosResult()
}

func incrementVisitCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceIncrementVisitCountArgs)
	realResult := result.(*video.VideoServiceIncrementVisitCountResult)
	success, err := handler.(video.VideoService).IncrementVisitCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceIncrementVisitCountArgs() interface{} {
	return video.NewVideoServiceIncrementVisitCountArgs()
}

func newVideoServiceIncrementVisitCountResult() interface{} {
	return video.NewVideoServiceIncrementVisitCountResult()
}

func incrementLikeCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceIncrementLikeCountArgs)
	realResult := result.(*video.VideoServiceIncrementLikeCountResult)
	success, err := handler.(video.VideoService).IncrementLikeCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceIncrementLikeCountArgs() interface{} {
	return video.NewVideoServiceIncrementLikeCountArgs()
}

func newVideoServiceIncrementLikeCountResult() interface{} {
	return video.NewVideoServiceIncrementLikeCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Publish(ctx context.Context, req *video.PublishRequest) (r *video.PublishResponse, err error) {
	var _args video.VideoServicePublishArgs
	_args.Req = req
	var _result video.VideoServicePublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, req *video.VideoListRequest) (r *video.VideoListResponse, err error) {
	var _args video.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHotVideos(ctx context.Context, req *video.HotVideoRequest) (r *video.HotVideoResponse, err error) {
	var _args video.VideoServiceGetHotVideosArgs
	_args.Req = req
	var _result video.VideoServiceGetHotVideosResult
	if err = p.c.Call(ctx, "GetHotVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrementVisitCount(ctx context.Context, req *video.IncrementVisitCountRequest) (r *video.IncrementVisitCountResponse, err error) {
	var _args video.VideoServiceIncrementVisitCountArgs
	_args.Req = req
	var _result video.VideoServiceIncrementVisitCountResult
	if err = p.c.Call(ctx, "IncrementVisitCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrementLikeCount(ctx context.Context, req *video.IncrementLikeCountRequest) (r *video.IncrementLikeCountResponse, err error) {
	var _args video.VideoServiceIncrementLikeCountArgs
	_args.Req = req
	var _result video.VideoServiceIncrementLikeCountResult
	if err = p.c.Call(ctx, "IncrementLikeCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
