// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package social

import (
	"context"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/videoHub/app/gateway/model/social"
)

// API 服务
type SocialAPI interface {
	// 私信相关接口
	SendPrivateMessage(ctx context.Context, request *social.SendPrivateMessageRequest) (r *social.SendPrivateMessageResponse, err error)

	GetPrivateMessages(ctx context.Context, request *social.GetPrivateMessagesRequest) (r *social.GetPrivateMessagesResponse, err error)
	// 聊天室相关接口
	CreateChatRoom(ctx context.Context, request *social.CreateChatRoomRequest) (r *social.CreateChatRoomResponse, err error)

	GetChatRoom(ctx context.Context, request *social.GetChatRoomRequest) (r *social.GetChatRoomResponse, err error)

	GetUserChatRooms(ctx context.Context, request *social.GetUserChatRoomsRequest) (r *social.GetUserChatRoomsResponse, err error)

	SendChatMessage(ctx context.Context, request *social.SendChatMessageRequest) (r *social.SendChatMessageResponse, err error)

	GetChatMessages(ctx context.Context, request *social.GetChatMessagesRequest) (r *social.GetChatMessagesResponse, err error)
	// 好友相关接口
	AddFriend(ctx context.Context, request *social.AddFriendRequest) (r *social.AddFriendResponse, err error)

	GetFriendship(ctx context.Context, request *social.GetFriendshipRequest) (r *social.GetFriendshipResponse, err error)

	GetUserFriends(ctx context.Context, request *social.GetUserFriendsRequest) (r *social.GetUserFriendsResponse, err error)
	// 好友申请相关接口
	CreateFriendRequest(ctx context.Context, request *social.CreateFriendRequestRequest) (r *social.CreateFriendRequestResponse, err error)

	GetFriendRequests(ctx context.Context, request *social.GetFriendRequestsRequest) (r *social.GetFriendRequestsResponse, err error)

	HandleFriendRequest(ctx context.Context, request *social.HandleFriendRequestRequest) (r *social.HandleFriendRequestResponse, err error)
	// 消息状态相关接口
	MarkMessageRead(ctx context.Context, request *social.MarkMessageReadRequest) (r *social.MarkMessageReadResponse, err error)

	GetUnreadMessageCount(ctx context.Context, request *social.GetUnreadMessageCountRequest) (r *social.GetUnreadMessageCountResponse, err error)
}

type SocialAPIClient struct {
	c thrift.TClient
}

func NewSocialAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SocialAPIClient {
	return &SocialAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSocialAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SocialAPIClient {
	return &SocialAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSocialAPIClient(c thrift.TClient) *SocialAPIClient {
	return &SocialAPIClient{
		c: c,
	}
}

func (p *SocialAPIClient) Client_() thrift.TClient {
	return p.c
}

func (p *SocialAPIClient) SendPrivateMessage(ctx context.Context, request *social.SendPrivateMessageRequest) (r *social.SendPrivateMessageResponse, err error) {
	var _args SocialAPISendPrivateMessageArgs
	_args.Request = request
	var _result SocialAPISendPrivateMessageResult
	if err = p.Client_().Call(ctx, "SendPrivateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetPrivateMessages(ctx context.Context, request *social.GetPrivateMessagesRequest) (r *social.GetPrivateMessagesResponse, err error) {
	var _args SocialAPIGetPrivateMessagesArgs
	_args.Request = request
	var _result SocialAPIGetPrivateMessagesResult
	if err = p.Client_().Call(ctx, "GetPrivateMessages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) CreateChatRoom(ctx context.Context, request *social.CreateChatRoomRequest) (r *social.CreateChatRoomResponse, err error) {
	var _args SocialAPICreateChatRoomArgs
	_args.Request = request
	var _result SocialAPICreateChatRoomResult
	if err = p.Client_().Call(ctx, "CreateChatRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetChatRoom(ctx context.Context, request *social.GetChatRoomRequest) (r *social.GetChatRoomResponse, err error) {
	var _args SocialAPIGetChatRoomArgs
	_args.Request = request
	var _result SocialAPIGetChatRoomResult
	if err = p.Client_().Call(ctx, "GetChatRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetUserChatRooms(ctx context.Context, request *social.GetUserChatRoomsRequest) (r *social.GetUserChatRoomsResponse, err error) {
	var _args SocialAPIGetUserChatRoomsArgs
	_args.Request = request
	var _result SocialAPIGetUserChatRoomsResult
	if err = p.Client_().Call(ctx, "GetUserChatRooms", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) SendChatMessage(ctx context.Context, request *social.SendChatMessageRequest) (r *social.SendChatMessageResponse, err error) {
	var _args SocialAPISendChatMessageArgs
	_args.Request = request
	var _result SocialAPISendChatMessageResult
	if err = p.Client_().Call(ctx, "SendChatMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetChatMessages(ctx context.Context, request *social.GetChatMessagesRequest) (r *social.GetChatMessagesResponse, err error) {
	var _args SocialAPIGetChatMessagesArgs
	_args.Request = request
	var _result SocialAPIGetChatMessagesResult
	if err = p.Client_().Call(ctx, "GetChatMessages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) AddFriend(ctx context.Context, request *social.AddFriendRequest) (r *social.AddFriendResponse, err error) {
	var _args SocialAPIAddFriendArgs
	_args.Request = request
	var _result SocialAPIAddFriendResult
	if err = p.Client_().Call(ctx, "AddFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetFriendship(ctx context.Context, request *social.GetFriendshipRequest) (r *social.GetFriendshipResponse, err error) {
	var _args SocialAPIGetFriendshipArgs
	_args.Request = request
	var _result SocialAPIGetFriendshipResult
	if err = p.Client_().Call(ctx, "GetFriendship", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetUserFriends(ctx context.Context, request *social.GetUserFriendsRequest) (r *social.GetUserFriendsResponse, err error) {
	var _args SocialAPIGetUserFriendsArgs
	_args.Request = request
	var _result SocialAPIGetUserFriendsResult
	if err = p.Client_().Call(ctx, "GetUserFriends", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) CreateFriendRequest(ctx context.Context, request *social.CreateFriendRequestRequest) (r *social.CreateFriendRequestResponse, err error) {
	var _args SocialAPICreateFriendRequestArgs
	_args.Request = request
	var _result SocialAPICreateFriendRequestResult
	if err = p.Client_().Call(ctx, "CreateFriendRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetFriendRequests(ctx context.Context, request *social.GetFriendRequestsRequest) (r *social.GetFriendRequestsResponse, err error) {
	var _args SocialAPIGetFriendRequestsArgs
	_args.Request = request
	var _result SocialAPIGetFriendRequestsResult
	if err = p.Client_().Call(ctx, "GetFriendRequests", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) HandleFriendRequest(ctx context.Context, request *social.HandleFriendRequestRequest) (r *social.HandleFriendRequestResponse, err error) {
	var _args SocialAPIHandleFriendRequestArgs
	_args.Request = request
	var _result SocialAPIHandleFriendRequestResult
	if err = p.Client_().Call(ctx, "HandleFriendRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) MarkMessageRead(ctx context.Context, request *social.MarkMessageReadRequest) (r *social.MarkMessageReadResponse, err error) {
	var _args SocialAPIMarkMessageReadArgs
	_args.Request = request
	var _result SocialAPIMarkMessageReadResult
	if err = p.Client_().Call(ctx, "MarkMessageRead", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialAPIClient) GetUnreadMessageCount(ctx context.Context, request *social.GetUnreadMessageCountRequest) (r *social.GetUnreadMessageCountResponse, err error) {
	var _args SocialAPIGetUnreadMessageCountArgs
	_args.Request = request
	var _result SocialAPIGetUnreadMessageCountResult
	if err = p.Client_().Call(ctx, "GetUnreadMessageCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SocialAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SocialAPI
}

func (p *SocialAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SocialAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SocialAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSocialAPIProcessor(handler SocialAPI) *SocialAPIProcessor {
	self := &SocialAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("SendPrivateMessage", &socialAPIProcessorSendPrivateMessage{handler: handler})
	self.AddToProcessorMap("GetPrivateMessages", &socialAPIProcessorGetPrivateMessages{handler: handler})
	self.AddToProcessorMap("CreateChatRoom", &socialAPIProcessorCreateChatRoom{handler: handler})
	self.AddToProcessorMap("GetChatRoom", &socialAPIProcessorGetChatRoom{handler: handler})
	self.AddToProcessorMap("GetUserChatRooms", &socialAPIProcessorGetUserChatRooms{handler: handler})
	self.AddToProcessorMap("SendChatMessage", &socialAPIProcessorSendChatMessage{handler: handler})
	self.AddToProcessorMap("GetChatMessages", &socialAPIProcessorGetChatMessages{handler: handler})
	self.AddToProcessorMap("AddFriend", &socialAPIProcessorAddFriend{handler: handler})
	self.AddToProcessorMap("GetFriendship", &socialAPIProcessorGetFriendship{handler: handler})
	self.AddToProcessorMap("GetUserFriends", &socialAPIProcessorGetUserFriends{handler: handler})
	self.AddToProcessorMap("CreateFriendRequest", &socialAPIProcessorCreateFriendRequest{handler: handler})
	self.AddToProcessorMap("GetFriendRequests", &socialAPIProcessorGetFriendRequests{handler: handler})
	self.AddToProcessorMap("HandleFriendRequest", &socialAPIProcessorHandleFriendRequest{handler: handler})
	self.AddToProcessorMap("MarkMessageRead", &socialAPIProcessorMarkMessageRead{handler: handler})
	self.AddToProcessorMap("GetUnreadMessageCount", &socialAPIProcessorGetUnreadMessageCount{handler: handler})
	return self
}
func (p *SocialAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type socialAPIProcessorSendPrivateMessage struct {
	handler SocialAPI
}

func (p *socialAPIProcessorSendPrivateMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPISendPrivateMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendPrivateMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPISendPrivateMessageResult{}
	var retval *social.SendPrivateMessageResponse
	if retval, err2 = p.handler.SendPrivateMessage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendPrivateMessage: "+err2.Error())
		oprot.WriteMessageBegin("SendPrivateMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendPrivateMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetPrivateMessages struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetPrivateMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetPrivateMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPrivateMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetPrivateMessagesResult{}
	var retval *social.GetPrivateMessagesResponse
	if retval, err2 = p.handler.GetPrivateMessages(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPrivateMessages: "+err2.Error())
		oprot.WriteMessageBegin("GetPrivateMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPrivateMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorCreateChatRoom struct {
	handler SocialAPI
}

func (p *socialAPIProcessorCreateChatRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPICreateChatRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateChatRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPICreateChatRoomResult{}
	var retval *social.CreateChatRoomResponse
	if retval, err2 = p.handler.CreateChatRoom(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateChatRoom: "+err2.Error())
		oprot.WriteMessageBegin("CreateChatRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateChatRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetChatRoom struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetChatRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetChatRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChatRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetChatRoomResult{}
	var retval *social.GetChatRoomResponse
	if retval, err2 = p.handler.GetChatRoom(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChatRoom: "+err2.Error())
		oprot.WriteMessageBegin("GetChatRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChatRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetUserChatRooms struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetUserChatRooms) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetUserChatRoomsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserChatRooms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetUserChatRoomsResult{}
	var retval *social.GetUserChatRoomsResponse
	if retval, err2 = p.handler.GetUserChatRooms(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserChatRooms: "+err2.Error())
		oprot.WriteMessageBegin("GetUserChatRooms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserChatRooms", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorSendChatMessage struct {
	handler SocialAPI
}

func (p *socialAPIProcessorSendChatMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPISendChatMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendChatMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPISendChatMessageResult{}
	var retval *social.SendChatMessageResponse
	if retval, err2 = p.handler.SendChatMessage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendChatMessage: "+err2.Error())
		oprot.WriteMessageBegin("SendChatMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendChatMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetChatMessages struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetChatMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetChatMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChatMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetChatMessagesResult{}
	var retval *social.GetChatMessagesResponse
	if retval, err2 = p.handler.GetChatMessages(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChatMessages: "+err2.Error())
		oprot.WriteMessageBegin("GetChatMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChatMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorAddFriend struct {
	handler SocialAPI
}

func (p *socialAPIProcessorAddFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIAddFriendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIAddFriendResult{}
	var retval *social.AddFriendResponse
	if retval, err2 = p.handler.AddFriend(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddFriend: "+err2.Error())
		oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddFriend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetFriendship struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetFriendship) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetFriendshipArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFriendship", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetFriendshipResult{}
	var retval *social.GetFriendshipResponse
	if retval, err2 = p.handler.GetFriendship(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFriendship: "+err2.Error())
		oprot.WriteMessageBegin("GetFriendship", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFriendship", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetUserFriends struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetUserFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetUserFriendsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetUserFriendsResult{}
	var retval *social.GetUserFriendsResponse
	if retval, err2 = p.handler.GetUserFriends(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserFriends: "+err2.Error())
		oprot.WriteMessageBegin("GetUserFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserFriends", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorCreateFriendRequest struct {
	handler SocialAPI
}

func (p *socialAPIProcessorCreateFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPICreateFriendRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPICreateFriendRequestResult{}
	var retval *social.CreateFriendRequestResponse
	if retval, err2 = p.handler.CreateFriendRequest(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateFriendRequest: "+err2.Error())
		oprot.WriteMessageBegin("CreateFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateFriendRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetFriendRequests struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetFriendRequestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetFriendRequestsResult{}
	var retval *social.GetFriendRequestsResponse
	if retval, err2 = p.handler.GetFriendRequests(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFriendRequests: "+err2.Error())
		oprot.WriteMessageBegin("GetFriendRequests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFriendRequests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorHandleFriendRequest struct {
	handler SocialAPI
}

func (p *socialAPIProcessorHandleFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIHandleFriendRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HandleFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIHandleFriendRequestResult{}
	var retval *social.HandleFriendRequestResponse
	if retval, err2 = p.handler.HandleFriendRequest(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HandleFriendRequest: "+err2.Error())
		oprot.WriteMessageBegin("HandleFriendRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HandleFriendRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorMarkMessageRead struct {
	handler SocialAPI
}

func (p *socialAPIProcessorMarkMessageRead) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIMarkMessageReadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MarkMessageRead", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIMarkMessageReadResult{}
	var retval *social.MarkMessageReadResponse
	if retval, err2 = p.handler.MarkMessageRead(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MarkMessageRead: "+err2.Error())
		oprot.WriteMessageBegin("MarkMessageRead", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MarkMessageRead", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialAPIProcessorGetUnreadMessageCount struct {
	handler SocialAPI
}

func (p *socialAPIProcessorGetUnreadMessageCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialAPIGetUnreadMessageCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUnreadMessageCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialAPIGetUnreadMessageCountResult{}
	var retval *social.GetUnreadMessageCountResponse
	if retval, err2 = p.handler.GetUnreadMessageCount(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUnreadMessageCount: "+err2.Error())
		oprot.WriteMessageBegin("GetUnreadMessageCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUnreadMessageCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SocialAPISendPrivateMessageArgs struct {
	Request *social.SendPrivateMessageRequest `thrift:"request,1"`
}

func NewSocialAPISendPrivateMessageArgs() *SocialAPISendPrivateMessageArgs {
	return &SocialAPISendPrivateMessageArgs{}
}

func (p *SocialAPISendPrivateMessageArgs) InitDefault() {
}

var SocialAPISendPrivateMessageArgs_Request_DEFAULT *social.SendPrivateMessageRequest

func (p *SocialAPISendPrivateMessageArgs) GetRequest() (v *social.SendPrivateMessageRequest) {
	if !p.IsSetRequest() {
		return SocialAPISendPrivateMessageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPISendPrivateMessageArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPISendPrivateMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPISendPrivateMessageArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPISendPrivateMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewSendPrivateMessageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPISendPrivateMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendPrivateMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPISendPrivateMessageArgs(%+v)", *p)

}

type SocialAPISendPrivateMessageResult struct {
	Success *social.SendPrivateMessageResponse `thrift:"success,0,optional"`
}

func NewSocialAPISendPrivateMessageResult() *SocialAPISendPrivateMessageResult {
	return &SocialAPISendPrivateMessageResult{}
}

func (p *SocialAPISendPrivateMessageResult) InitDefault() {
}

var SocialAPISendPrivateMessageResult_Success_DEFAULT *social.SendPrivateMessageResponse

func (p *SocialAPISendPrivateMessageResult) GetSuccess() (v *social.SendPrivateMessageResponse) {
	if !p.IsSetSuccess() {
		return SocialAPISendPrivateMessageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPISendPrivateMessageResult = map[int16]string{
	0: "success",
}

func (p *SocialAPISendPrivateMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPISendPrivateMessageResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPISendPrivateMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewSendPrivateMessageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPISendPrivateMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendPrivateMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPISendPrivateMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPISendPrivateMessageResult(%+v)", *p)

}

type SocialAPIGetPrivateMessagesArgs struct {
	Request *social.GetPrivateMessagesRequest `thrift:"request,1"`
}

func NewSocialAPIGetPrivateMessagesArgs() *SocialAPIGetPrivateMessagesArgs {
	return &SocialAPIGetPrivateMessagesArgs{}
}

func (p *SocialAPIGetPrivateMessagesArgs) InitDefault() {
}

var SocialAPIGetPrivateMessagesArgs_Request_DEFAULT *social.GetPrivateMessagesRequest

func (p *SocialAPIGetPrivateMessagesArgs) GetRequest() (v *social.GetPrivateMessagesRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetPrivateMessagesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetPrivateMessagesArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetPrivateMessagesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetPrivateMessagesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetPrivateMessagesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetPrivateMessagesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetPrivateMessagesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrivateMessages_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetPrivateMessagesArgs(%+v)", *p)

}

type SocialAPIGetPrivateMessagesResult struct {
	Success *social.GetPrivateMessagesResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetPrivateMessagesResult() *SocialAPIGetPrivateMessagesResult {
	return &SocialAPIGetPrivateMessagesResult{}
}

func (p *SocialAPIGetPrivateMessagesResult) InitDefault() {
}

var SocialAPIGetPrivateMessagesResult_Success_DEFAULT *social.GetPrivateMessagesResponse

func (p *SocialAPIGetPrivateMessagesResult) GetSuccess() (v *social.GetPrivateMessagesResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetPrivateMessagesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetPrivateMessagesResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetPrivateMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetPrivateMessagesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetPrivateMessagesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetPrivateMessagesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetPrivateMessagesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrivateMessages_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetPrivateMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetPrivateMessagesResult(%+v)", *p)

}

type SocialAPICreateChatRoomArgs struct {
	Request *social.CreateChatRoomRequest `thrift:"request,1"`
}

func NewSocialAPICreateChatRoomArgs() *SocialAPICreateChatRoomArgs {
	return &SocialAPICreateChatRoomArgs{}
}

func (p *SocialAPICreateChatRoomArgs) InitDefault() {
}

var SocialAPICreateChatRoomArgs_Request_DEFAULT *social.CreateChatRoomRequest

func (p *SocialAPICreateChatRoomArgs) GetRequest() (v *social.CreateChatRoomRequest) {
	if !p.IsSetRequest() {
		return SocialAPICreateChatRoomArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPICreateChatRoomArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPICreateChatRoomArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPICreateChatRoomArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPICreateChatRoomArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPICreateChatRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewCreateChatRoomRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPICreateChatRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateChatRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPICreateChatRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPICreateChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPICreateChatRoomArgs(%+v)", *p)

}

type SocialAPICreateChatRoomResult struct {
	Success *social.CreateChatRoomResponse `thrift:"success,0,optional"`
}

func NewSocialAPICreateChatRoomResult() *SocialAPICreateChatRoomResult {
	return &SocialAPICreateChatRoomResult{}
}

func (p *SocialAPICreateChatRoomResult) InitDefault() {
}

var SocialAPICreateChatRoomResult_Success_DEFAULT *social.CreateChatRoomResponse

func (p *SocialAPICreateChatRoomResult) GetSuccess() (v *social.CreateChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialAPICreateChatRoomResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPICreateChatRoomResult = map[int16]string{
	0: "success",
}

func (p *SocialAPICreateChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPICreateChatRoomResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPICreateChatRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPICreateChatRoomResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewCreateChatRoomResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPICreateChatRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateChatRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPICreateChatRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPICreateChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPICreateChatRoomResult(%+v)", *p)

}

type SocialAPIGetChatRoomArgs struct {
	Request *social.GetChatRoomRequest `thrift:"request,1"`
}

func NewSocialAPIGetChatRoomArgs() *SocialAPIGetChatRoomArgs {
	return &SocialAPIGetChatRoomArgs{}
}

func (p *SocialAPIGetChatRoomArgs) InitDefault() {
}

var SocialAPIGetChatRoomArgs_Request_DEFAULT *social.GetChatRoomRequest

func (p *SocialAPIGetChatRoomArgs) GetRequest() (v *social.GetChatRoomRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetChatRoomArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetChatRoomArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetChatRoomArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetChatRoomArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetChatRoomArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetChatRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetChatRoomRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetChatRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetChatRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetChatRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetChatRoomArgs(%+v)", *p)

}

type SocialAPIGetChatRoomResult struct {
	Success *social.GetChatRoomResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetChatRoomResult() *SocialAPIGetChatRoomResult {
	return &SocialAPIGetChatRoomResult{}
}

func (p *SocialAPIGetChatRoomResult) InitDefault() {
}

var SocialAPIGetChatRoomResult_Success_DEFAULT *social.GetChatRoomResponse

func (p *SocialAPIGetChatRoomResult) GetSuccess() (v *social.GetChatRoomResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetChatRoomResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetChatRoomResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetChatRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetChatRoomResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetChatRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetChatRoomResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetChatRoomResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetChatRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetChatRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetChatRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetChatRoomResult(%+v)", *p)

}

type SocialAPIGetUserChatRoomsArgs struct {
	Request *social.GetUserChatRoomsRequest `thrift:"request,1"`
}

func NewSocialAPIGetUserChatRoomsArgs() *SocialAPIGetUserChatRoomsArgs {
	return &SocialAPIGetUserChatRoomsArgs{}
}

func (p *SocialAPIGetUserChatRoomsArgs) InitDefault() {
}

var SocialAPIGetUserChatRoomsArgs_Request_DEFAULT *social.GetUserChatRoomsRequest

func (p *SocialAPIGetUserChatRoomsArgs) GetRequest() (v *social.GetUserChatRoomsRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetUserChatRoomsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetUserChatRoomsArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetUserChatRoomsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetUserChatRoomsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUserChatRoomsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetUserChatRoomsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetUserChatRoomsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserChatRooms_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUserChatRoomsArgs(%+v)", *p)

}

type SocialAPIGetUserChatRoomsResult struct {
	Success *social.GetUserChatRoomsResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetUserChatRoomsResult() *SocialAPIGetUserChatRoomsResult {
	return &SocialAPIGetUserChatRoomsResult{}
}

func (p *SocialAPIGetUserChatRoomsResult) InitDefault() {
}

var SocialAPIGetUserChatRoomsResult_Success_DEFAULT *social.GetUserChatRoomsResponse

func (p *SocialAPIGetUserChatRoomsResult) GetSuccess() (v *social.GetUserChatRoomsResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetUserChatRoomsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetUserChatRoomsResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetUserChatRoomsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetUserChatRoomsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUserChatRoomsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetUserChatRoomsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetUserChatRoomsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserChatRooms_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetUserChatRoomsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUserChatRoomsResult(%+v)", *p)

}

type SocialAPISendChatMessageArgs struct {
	Request *social.SendChatMessageRequest `thrift:"request,1"`
}

func NewSocialAPISendChatMessageArgs() *SocialAPISendChatMessageArgs {
	return &SocialAPISendChatMessageArgs{}
}

func (p *SocialAPISendChatMessageArgs) InitDefault() {
}

var SocialAPISendChatMessageArgs_Request_DEFAULT *social.SendChatMessageRequest

func (p *SocialAPISendChatMessageArgs) GetRequest() (v *social.SendChatMessageRequest) {
	if !p.IsSetRequest() {
		return SocialAPISendChatMessageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPISendChatMessageArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPISendChatMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPISendChatMessageArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPISendChatMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPISendChatMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewSendChatMessageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPISendChatMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendChatMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPISendChatMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPISendChatMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPISendChatMessageArgs(%+v)", *p)

}

type SocialAPISendChatMessageResult struct {
	Success *social.SendChatMessageResponse `thrift:"success,0,optional"`
}

func NewSocialAPISendChatMessageResult() *SocialAPISendChatMessageResult {
	return &SocialAPISendChatMessageResult{}
}

func (p *SocialAPISendChatMessageResult) InitDefault() {
}

var SocialAPISendChatMessageResult_Success_DEFAULT *social.SendChatMessageResponse

func (p *SocialAPISendChatMessageResult) GetSuccess() (v *social.SendChatMessageResponse) {
	if !p.IsSetSuccess() {
		return SocialAPISendChatMessageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPISendChatMessageResult = map[int16]string{
	0: "success",
}

func (p *SocialAPISendChatMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPISendChatMessageResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPISendChatMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPISendChatMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewSendChatMessageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPISendChatMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendChatMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPISendChatMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPISendChatMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPISendChatMessageResult(%+v)", *p)

}

type SocialAPIGetChatMessagesArgs struct {
	Request *social.GetChatMessagesRequest `thrift:"request,1"`
}

func NewSocialAPIGetChatMessagesArgs() *SocialAPIGetChatMessagesArgs {
	return &SocialAPIGetChatMessagesArgs{}
}

func (p *SocialAPIGetChatMessagesArgs) InitDefault() {
}

var SocialAPIGetChatMessagesArgs_Request_DEFAULT *social.GetChatMessagesRequest

func (p *SocialAPIGetChatMessagesArgs) GetRequest() (v *social.GetChatMessagesRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetChatMessagesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetChatMessagesArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetChatMessagesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetChatMessagesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetChatMessagesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetChatMessagesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetChatMessagesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatMessages_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetChatMessagesArgs(%+v)", *p)

}

type SocialAPIGetChatMessagesResult struct {
	Success *social.GetChatMessagesResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetChatMessagesResult() *SocialAPIGetChatMessagesResult {
	return &SocialAPIGetChatMessagesResult{}
}

func (p *SocialAPIGetChatMessagesResult) InitDefault() {
}

var SocialAPIGetChatMessagesResult_Success_DEFAULT *social.GetChatMessagesResponse

func (p *SocialAPIGetChatMessagesResult) GetSuccess() (v *social.GetChatMessagesResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetChatMessagesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetChatMessagesResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetChatMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetChatMessagesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetChatMessagesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetChatMessagesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetChatMessagesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatMessages_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetChatMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetChatMessagesResult(%+v)", *p)

}

type SocialAPIAddFriendArgs struct {
	Request *social.AddFriendRequest `thrift:"request,1"`
}

func NewSocialAPIAddFriendArgs() *SocialAPIAddFriendArgs {
	return &SocialAPIAddFriendArgs{}
}

func (p *SocialAPIAddFriendArgs) InitDefault() {
}

var SocialAPIAddFriendArgs_Request_DEFAULT *social.AddFriendRequest

func (p *SocialAPIAddFriendArgs) GetRequest() (v *social.AddFriendRequest) {
	if !p.IsSetRequest() {
		return SocialAPIAddFriendArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIAddFriendArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIAddFriendArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIAddFriendArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIAddFriendArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIAddFriendArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewAddFriendRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIAddFriendArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddFriend_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIAddFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIAddFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIAddFriendArgs(%+v)", *p)

}

type SocialAPIAddFriendResult struct {
	Success *social.AddFriendResponse `thrift:"success,0,optional"`
}

func NewSocialAPIAddFriendResult() *SocialAPIAddFriendResult {
	return &SocialAPIAddFriendResult{}
}

func (p *SocialAPIAddFriendResult) InitDefault() {
}

var SocialAPIAddFriendResult_Success_DEFAULT *social.AddFriendResponse

func (p *SocialAPIAddFriendResult) GetSuccess() (v *social.AddFriendResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIAddFriendResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIAddFriendResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIAddFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIAddFriendResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIAddFriendResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIAddFriendResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewAddFriendResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIAddFriendResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddFriend_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIAddFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIAddFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIAddFriendResult(%+v)", *p)

}

type SocialAPIGetFriendshipArgs struct {
	Request *social.GetFriendshipRequest `thrift:"request,1"`
}

func NewSocialAPIGetFriendshipArgs() *SocialAPIGetFriendshipArgs {
	return &SocialAPIGetFriendshipArgs{}
}

func (p *SocialAPIGetFriendshipArgs) InitDefault() {
}

var SocialAPIGetFriendshipArgs_Request_DEFAULT *social.GetFriendshipRequest

func (p *SocialAPIGetFriendshipArgs) GetRequest() (v *social.GetFriendshipRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetFriendshipArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetFriendshipArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetFriendshipArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetFriendshipArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetFriendshipArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetFriendshipArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetFriendshipRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetFriendshipArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendship_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetFriendshipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetFriendshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetFriendshipArgs(%+v)", *p)

}

type SocialAPIGetFriendshipResult struct {
	Success *social.GetFriendshipResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetFriendshipResult() *SocialAPIGetFriendshipResult {
	return &SocialAPIGetFriendshipResult{}
}

func (p *SocialAPIGetFriendshipResult) InitDefault() {
}

var SocialAPIGetFriendshipResult_Success_DEFAULT *social.GetFriendshipResponse

func (p *SocialAPIGetFriendshipResult) GetSuccess() (v *social.GetFriendshipResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetFriendshipResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetFriendshipResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetFriendshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetFriendshipResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetFriendshipResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetFriendshipResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetFriendshipResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetFriendshipResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendship_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetFriendshipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetFriendshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetFriendshipResult(%+v)", *p)

}

type SocialAPIGetUserFriendsArgs struct {
	Request *social.GetUserFriendsRequest `thrift:"request,1"`
}

func NewSocialAPIGetUserFriendsArgs() *SocialAPIGetUserFriendsArgs {
	return &SocialAPIGetUserFriendsArgs{}
}

func (p *SocialAPIGetUserFriendsArgs) InitDefault() {
}

var SocialAPIGetUserFriendsArgs_Request_DEFAULT *social.GetUserFriendsRequest

func (p *SocialAPIGetUserFriendsArgs) GetRequest() (v *social.GetUserFriendsRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetUserFriendsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetUserFriendsArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetUserFriendsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetUserFriendsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUserFriendsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetUserFriendsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetUserFriendsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserFriends_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUserFriendsArgs(%+v)", *p)

}

type SocialAPIGetUserFriendsResult struct {
	Success *social.GetUserFriendsResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetUserFriendsResult() *SocialAPIGetUserFriendsResult {
	return &SocialAPIGetUserFriendsResult{}
}

func (p *SocialAPIGetUserFriendsResult) InitDefault() {
}

var SocialAPIGetUserFriendsResult_Success_DEFAULT *social.GetUserFriendsResponse

func (p *SocialAPIGetUserFriendsResult) GetSuccess() (v *social.GetUserFriendsResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetUserFriendsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetUserFriendsResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetUserFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetUserFriendsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUserFriendsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetUserFriendsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetUserFriendsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserFriends_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetUserFriendsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUserFriendsResult(%+v)", *p)

}

type SocialAPICreateFriendRequestArgs struct {
	Request *social.CreateFriendRequestRequest `thrift:"request,1"`
}

func NewSocialAPICreateFriendRequestArgs() *SocialAPICreateFriendRequestArgs {
	return &SocialAPICreateFriendRequestArgs{}
}

func (p *SocialAPICreateFriendRequestArgs) InitDefault() {
}

var SocialAPICreateFriendRequestArgs_Request_DEFAULT *social.CreateFriendRequestRequest

func (p *SocialAPICreateFriendRequestArgs) GetRequest() (v *social.CreateFriendRequestRequest) {
	if !p.IsSetRequest() {
		return SocialAPICreateFriendRequestArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPICreateFriendRequestArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPICreateFriendRequestArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPICreateFriendRequestArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPICreateFriendRequestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewCreateFriendRequestRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPICreateFriendRequestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFriendRequest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPICreateFriendRequestArgs(%+v)", *p)

}

type SocialAPICreateFriendRequestResult struct {
	Success *social.CreateFriendRequestResponse `thrift:"success,0,optional"`
}

func NewSocialAPICreateFriendRequestResult() *SocialAPICreateFriendRequestResult {
	return &SocialAPICreateFriendRequestResult{}
}

func (p *SocialAPICreateFriendRequestResult) InitDefault() {
}

var SocialAPICreateFriendRequestResult_Success_DEFAULT *social.CreateFriendRequestResponse

func (p *SocialAPICreateFriendRequestResult) GetSuccess() (v *social.CreateFriendRequestResponse) {
	if !p.IsSetSuccess() {
		return SocialAPICreateFriendRequestResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPICreateFriendRequestResult = map[int16]string{
	0: "success",
}

func (p *SocialAPICreateFriendRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPICreateFriendRequestResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPICreateFriendRequestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewCreateFriendRequestResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPICreateFriendRequestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFriendRequest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPICreateFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPICreateFriendRequestResult(%+v)", *p)

}

type SocialAPIGetFriendRequestsArgs struct {
	Request *social.GetFriendRequestsRequest `thrift:"request,1"`
}

func NewSocialAPIGetFriendRequestsArgs() *SocialAPIGetFriendRequestsArgs {
	return &SocialAPIGetFriendRequestsArgs{}
}

func (p *SocialAPIGetFriendRequestsArgs) InitDefault() {
}

var SocialAPIGetFriendRequestsArgs_Request_DEFAULT *social.GetFriendRequestsRequest

func (p *SocialAPIGetFriendRequestsArgs) GetRequest() (v *social.GetFriendRequestsRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetFriendRequestsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetFriendRequestsArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetFriendRequestsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetFriendRequestsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetFriendRequestsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetFriendRequestsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetFriendRequestsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendRequests_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetFriendRequestsArgs(%+v)", *p)

}

type SocialAPIGetFriendRequestsResult struct {
	Success *social.GetFriendRequestsResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetFriendRequestsResult() *SocialAPIGetFriendRequestsResult {
	return &SocialAPIGetFriendRequestsResult{}
}

func (p *SocialAPIGetFriendRequestsResult) InitDefault() {
}

var SocialAPIGetFriendRequestsResult_Success_DEFAULT *social.GetFriendRequestsResponse

func (p *SocialAPIGetFriendRequestsResult) GetSuccess() (v *social.GetFriendRequestsResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetFriendRequestsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetFriendRequestsResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetFriendRequestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetFriendRequestsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetFriendRequestsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetFriendRequestsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetFriendRequestsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendRequests_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetFriendRequestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetFriendRequestsResult(%+v)", *p)

}

type SocialAPIHandleFriendRequestArgs struct {
	Request *social.HandleFriendRequestRequest `thrift:"request,1"`
}

func NewSocialAPIHandleFriendRequestArgs() *SocialAPIHandleFriendRequestArgs {
	return &SocialAPIHandleFriendRequestArgs{}
}

func (p *SocialAPIHandleFriendRequestArgs) InitDefault() {
}

var SocialAPIHandleFriendRequestArgs_Request_DEFAULT *social.HandleFriendRequestRequest

func (p *SocialAPIHandleFriendRequestArgs) GetRequest() (v *social.HandleFriendRequestRequest) {
	if !p.IsSetRequest() {
		return SocialAPIHandleFriendRequestArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIHandleFriendRequestArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIHandleFriendRequestArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIHandleFriendRequestArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIHandleFriendRequestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewHandleFriendRequestRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIHandleFriendRequestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandleFriendRequest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIHandleFriendRequestArgs(%+v)", *p)

}

type SocialAPIHandleFriendRequestResult struct {
	Success *social.HandleFriendRequestResponse `thrift:"success,0,optional"`
}

func NewSocialAPIHandleFriendRequestResult() *SocialAPIHandleFriendRequestResult {
	return &SocialAPIHandleFriendRequestResult{}
}

func (p *SocialAPIHandleFriendRequestResult) InitDefault() {
}

var SocialAPIHandleFriendRequestResult_Success_DEFAULT *social.HandleFriendRequestResponse

func (p *SocialAPIHandleFriendRequestResult) GetSuccess() (v *social.HandleFriendRequestResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIHandleFriendRequestResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIHandleFriendRequestResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIHandleFriendRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIHandleFriendRequestResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIHandleFriendRequestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewHandleFriendRequestResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIHandleFriendRequestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandleFriendRequest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIHandleFriendRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIHandleFriendRequestResult(%+v)", *p)

}

type SocialAPIMarkMessageReadArgs struct {
	Request *social.MarkMessageReadRequest `thrift:"request,1"`
}

func NewSocialAPIMarkMessageReadArgs() *SocialAPIMarkMessageReadArgs {
	return &SocialAPIMarkMessageReadArgs{}
}

func (p *SocialAPIMarkMessageReadArgs) InitDefault() {
}

var SocialAPIMarkMessageReadArgs_Request_DEFAULT *social.MarkMessageReadRequest

func (p *SocialAPIMarkMessageReadArgs) GetRequest() (v *social.MarkMessageReadRequest) {
	if !p.IsSetRequest() {
		return SocialAPIMarkMessageReadArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIMarkMessageReadArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIMarkMessageReadArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIMarkMessageReadArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIMarkMessageReadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewMarkMessageReadRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIMarkMessageReadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MarkMessageRead_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIMarkMessageReadArgs(%+v)", *p)

}

type SocialAPIMarkMessageReadResult struct {
	Success *social.MarkMessageReadResponse `thrift:"success,0,optional"`
}

func NewSocialAPIMarkMessageReadResult() *SocialAPIMarkMessageReadResult {
	return &SocialAPIMarkMessageReadResult{}
}

func (p *SocialAPIMarkMessageReadResult) InitDefault() {
}

var SocialAPIMarkMessageReadResult_Success_DEFAULT *social.MarkMessageReadResponse

func (p *SocialAPIMarkMessageReadResult) GetSuccess() (v *social.MarkMessageReadResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIMarkMessageReadResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIMarkMessageReadResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIMarkMessageReadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIMarkMessageReadResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIMarkMessageReadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewMarkMessageReadResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIMarkMessageReadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MarkMessageRead_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIMarkMessageReadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIMarkMessageReadResult(%+v)", *p)

}

type SocialAPIGetUnreadMessageCountArgs struct {
	Request *social.GetUnreadMessageCountRequest `thrift:"request,1"`
}

func NewSocialAPIGetUnreadMessageCountArgs() *SocialAPIGetUnreadMessageCountArgs {
	return &SocialAPIGetUnreadMessageCountArgs{}
}

func (p *SocialAPIGetUnreadMessageCountArgs) InitDefault() {
}

var SocialAPIGetUnreadMessageCountArgs_Request_DEFAULT *social.GetUnreadMessageCountRequest

func (p *SocialAPIGetUnreadMessageCountArgs) GetRequest() (v *social.GetUnreadMessageCountRequest) {
	if !p.IsSetRequest() {
		return SocialAPIGetUnreadMessageCountArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_SocialAPIGetUnreadMessageCountArgs = map[int16]string{
	1: "request",
}

func (p *SocialAPIGetUnreadMessageCountArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SocialAPIGetUnreadMessageCountArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUnreadMessageCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := social.NewGetUnreadMessageCountRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *SocialAPIGetUnreadMessageCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUnreadMessageCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUnreadMessageCountArgs(%+v)", *p)

}

type SocialAPIGetUnreadMessageCountResult struct {
	Success *social.GetUnreadMessageCountResponse `thrift:"success,0,optional"`
}

func NewSocialAPIGetUnreadMessageCountResult() *SocialAPIGetUnreadMessageCountResult {
	return &SocialAPIGetUnreadMessageCountResult{}
}

func (p *SocialAPIGetUnreadMessageCountResult) InitDefault() {
}

var SocialAPIGetUnreadMessageCountResult_Success_DEFAULT *social.GetUnreadMessageCountResponse

func (p *SocialAPIGetUnreadMessageCountResult) GetSuccess() (v *social.GetUnreadMessageCountResponse) {
	if !p.IsSetSuccess() {
		return SocialAPIGetUnreadMessageCountResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SocialAPIGetUnreadMessageCountResult = map[int16]string{
	0: "success",
}

func (p *SocialAPIGetUnreadMessageCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialAPIGetUnreadMessageCountResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialAPIGetUnreadMessageCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountResult) ReadField0(iprot thrift.TProtocol) error {
	_field := social.NewGetUnreadMessageCountResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SocialAPIGetUnreadMessageCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUnreadMessageCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialAPIGetUnreadMessageCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialAPIGetUnreadMessageCountResult(%+v)", *p)

}
