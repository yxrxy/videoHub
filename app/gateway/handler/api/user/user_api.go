// Code generated by hertz generator.

package user

import (
	"context"
	"io"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/yxrxy/videoHub/app/gateway/model/user"
	"github.com/yxrxy/videoHub/app/gateway/pack"
	"github.com/yxrxy/videoHub/app/gateway/rpc"
	"github.com/yxrxy/videoHub/kitex_gen/user"
	"github.com/yxrxy/videoHub/pkg/errno"
)

// Register .
// @router /api/v1/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.RegisterRPC(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"user_id": resp,
	})
}

// Login .
// @router /api/v1/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.LoginRPC(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	c.Header("Authorization", "Bearer "+resp.Token)
	c.Header("RefreshToken", resp.RefreshToken)

	pack.RespData(c, map[string]any{
		"user_id":       resp.UserId,
		"token":         resp.Token,
		"refresh_token": resp.RefreshToken,
	})
}

// RefreshToken .
// @router /api/v1/user/token/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RefreshTokenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.RefreshTokenRPC(ctx, &user.RefreshTokenRequest{
		UserId: req.UserID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetUserInfo .
// @router /api/v1/user/info/:user_id [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetUserInfoRPC(ctx, &user.UserInfoRequest{
		UserId: req.UserID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// UploadAvatar .
// @router /api/v1/user/avatar [POST]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error

	fileHeader, err := c.FormFile("avatar_data")
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	file, err := fileHeader.Open()
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	defer file.Close()

	avatarData, err := io.ReadAll(file)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.UploadAvatarRPC(ctx, &user.UploadAvatarRequest{
		AvatarData:  avatarData,
		ContentType: fileHeader.Header.Get("Content-Type"),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}
