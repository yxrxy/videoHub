// Code generated by hertz generator.

package social

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"sync"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/hertz-contrib/websocket"
	api "github.com/yxrxy/videoHub/app/gateway/model/social"
	"github.com/yxrxy/videoHub/app/gateway/pack"
	"github.com/yxrxy/videoHub/app/gateway/rpc"
	"github.com/yxrxy/videoHub/app/gateway/service/ws"
	"github.com/yxrxy/videoHub/kitex_gen/social"
	"github.com/yxrxy/videoHub/pkg/errno"
	"github.com/yxrxy/videoHub/pkg/jwt"
)

var (
	globalManager *ws.Manager
	globalService *ws.WsService
	once          sync.Once
)

func initGlobalManager() {
	once.Do(func() {
		globalManager = ws.NewManager()
		globalService = ws.NewWsService(globalManager)
		go globalService.Start(context.Background())
	})
}

// SendPrivateMessage .
// @router /api/v1/social/private/message [POST]
func SendPrivateMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SendPrivateMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	err = globalService.SendPrivateMessage(req.SenderID, req.ReceiverID, req.Content)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// GetPrivateMessages .
// @router /api/v1/social/private/messages [GET]
func GetPrivateMessages(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPrivateMessagesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, _, err := rpc.GetPrivateMessagesRPC(ctx, &social.GetPrivateMessagesRequest{
		UserId:      req.UserID,
		OtherUserId: req.OtherUserID,
		Page:        req.Page,
		Size:        req.Size,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// CreateChatRoom .
// @router /api/v1/social/chatroom [POST]
func CreateChatRoom(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateChatRoomRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.CreateChatRoomRPC(ctx, &social.CreateChatRoomRequest{
		CreatorId: req.CreatorID,
		Name:      req.Name,
		Type:      req.Type,
		MemberIds: req.MemberIds,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetChatRoom .
// @router /api/v1/social/chatroom/:room_id [GET]
func GetChatRoom(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetChatRoomRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetChatRoomRPC(ctx, &social.GetChatRoomRequest{
		RoomId: req.RoomID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetUserChatRooms .
// @router /api/v1/social/chatrooms [GET]
func GetUserChatRooms(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserChatRoomsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, _, err := rpc.GetUserChatRoomsRPC(ctx, &social.GetUserChatRoomsRequest{
		UserId: req.UserID,
		Page:   req.Page,
		Size:   req.Size,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// SendChatMessage .
// @router /api/v1/social/chatroom/message [POST]
func SendChatMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SendChatMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.SendChatMessageRPC(ctx, &social.SendChatMessageRequest{
		RoomId:   req.RoomID,
		SenderId: req.SenderID,
		Content:  req.Content,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetChatMessages .
// @router /api/v1/social/chatroom/:room_id/messages [GET]
func GetChatMessages(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetChatMessagesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, _, err := rpc.GetChatMessagesRPC(ctx, &social.GetChatMessagesRequest{
		RoomId: req.RoomID,
		Page:   req.Page,
		Size:   req.Size,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddFriend .
// @router /api/v1/social/friend [POST]
func AddFriend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddFriendRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.AddFriendRPC(ctx, &social.AddFriendRequest{
		UserId:   req.UserID,
		FriendId: req.FriendID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// GetFriendship .
// @router /api/v1/social/friendship/:friend_id [GET]
func GetFriendship(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFriendshipRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetFriendshipRPC(ctx, &social.GetFriendshipRequest{
		FriendId: req.FriendID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetUserFriends .
// @router /api/v1/social/friends [GET]
func GetUserFriends(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserFriendsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, _, err := rpc.GetUserFriendsRPC(ctx, &social.GetUserFriendsRequest{
		UserId: req.UserID,
		Page:   req.Page,
		Size:   req.Size,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// CreateFriendRequest .
// @router /api/v1/social/friend/request [POST]
func CreateFriendRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateFriendRequestRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.CreateFriendRequestRPC(ctx, &social.CreateFriendRequestRequest{
		SenderId:   req.SenderID,
		ReceiverId: req.ReceiverID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetFriendRequests .
// @router /api/v1/social/friend/requests [GET]
func GetFriendRequests(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFriendRequestsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, _, err := rpc.GetFriendRequestsRPC(ctx, &social.GetFriendRequestsRequest{
		UserId: req.UserID,
		Type:   req.Type,
		Page:   req.Page,
		Size:   req.Size,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// HandleFriendRequest .
// @router /api/v1/social/friend/request/:request_id [PUT]
func HandleFriendRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.HandleFriendRequestRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.HandleFriendRequestRPC(ctx, &social.HandleFriendRequestRequest{
		RequestId: req.RequestID,
		UserId:    req.UserID,
		Action:    req.Action,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// MarkMessageRead .
// @router /api/v1/social/message/:message_id/read [PUT]
func MarkMessageRead(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MarkMessageReadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.MarkMessageReadRPC(ctx, &social.MarkMessageReadRequest{
		MessageId: req.MessageID,
		UserId:    req.UserID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// GetUnreadMessageCount .
// @router /api/v1/social/messages/unread/count [GET]
func GetUnreadMessageCount(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUnreadMessageCountRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetUnreadMessageCountRPC(ctx, &social.GetUnreadMessageCountRequest{
		UserId: req.UserID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// ConnectWebSocket handles WebSocket connections
func ConnectWebSocket(ctx context.Context, c *app.RequestContext) {
	defer func() {
		if r := recover(); r != nil {
			klog.Errorf("WebSocket处理器恢复自panic: %v", r)
		}
	}()

	initGlobalManager()

	token := c.Query("token")
	roomID, _ := strconv.ParseInt(c.Query("room_id"), 10, 64)
	var toUserID int64 = -1
	if roomID == -1 {
		toUserID, _ = strconv.ParseInt(c.Query("to_user"), 10, 64)
	}
	// roomID可以为0

	claims, err := jwt.ParseToken(token)
	if err != nil {
		pack.RespError(c, errno.AuthInvalid.WithError(err))
		return
	}

	userID := claims.UserID

	upgrader := websocket.HertzUpgrader{
		CheckOrigin: func(ctx *app.RequestContext) bool {
			return true
		},
		HandshakeTimeout: 30 * time.Second,
		ReadBufferSize:   1024,
		WriteBufferSize:  1024,
	}

	if err := upgrader.Upgrade(c, func(conn *websocket.Conn) {
		defer conn.Close()
		defer func() {
			if roomID != -1 {
				if err := globalService.LeaveChatRoom(userID, roomID); err != nil {
					klog.Errorf("离开聊天室失败: %v", err)
				}
			}
		}()

		if err := globalService.RegisterClient(userID, conn); err != nil {
			conn.WriteJSON(map[string]interface{}{
				"type":    "error",
				"message": "注册WebSocket客户端失败: " + err.Error(),
			})
			return
		}

		if roomID != -1 {
			// 验证聊天室是否存在
			_, err := rpc.GetChatRoomRPC(ctx, &social.GetChatRoomRequest{
				RoomId: roomID,
				UserId: userID,
			})
			if err != nil {
				klog.Errorf("聊天室不存在: %v", err)
				conn.WriteJSON(map[string]interface{}{
					"type":    "error",
					"message": "聊天室不存在",
				})
				return
			}

			// 加入聊天室
			if err := globalService.JoinChatRoom(userID, roomID); err != nil {
				klog.Errorf("加入聊天室失败: %v", err)
				conn.WriteJSON(map[string]interface{}{
					"type":    "error",
					"message": "加入聊天室失败: " + err.Error(),
				})
				return
			}

			page := int64(1)
			size := int32(10)

			// 获取最近的消息历史
			msgResp, _, err := rpc.GetChatMessagesRPC(ctx, &social.GetChatMessagesRequest{
				RoomId: roomID,
				UserId: userID,
				Page:   &page,
				Size:   &size,
			})
			if err != nil {
				klog.Errorf("获取历史消息失败: %v", err)
			} else {
				if err := conn.WriteJSON(map[string]interface{}{
					"type":     "history",
					"messages": msgResp,
				}); err != nil {
					klog.Errorf("发送历史消息失败: %v", err)
				}
			}

			// 发送欢迎消息
			if err := conn.WriteJSON(map[string]interface{}{
				"type":    "system",
				"message": "欢迎加入聊天室",
				"room_id": roomID,
			}); err != nil {
				klog.Errorf("发送欢迎消息失败: %v", err)
			}
		} else {
			page := int32(1)
			size := int32(10)
			// 获取未读私信数量
			resp, _, err := rpc.GetPrivateMessagesRPC(ctx, &social.GetPrivateMessagesRequest{
				UserId:      userID,
				OtherUserId: toUserID,
				Page:        &page,
				Size:        &size,
			})
			if err != nil {
				klog.Errorf("获取未读消息数失败: %v", err)
			} else {
				if err := conn.WriteJSON(map[string]interface{}{
					"type":     "history",
					"messages": resp,
				}); err != nil {
					klog.Errorf("发送未读消息数失败: %v", err)
				}
			}

			// 发送欢迎消息
			if err := conn.WriteJSON(map[string]interface{}{
				"type":    "system",
				"message": "和用户" + strconv.FormatInt(toUserID, 10) + "建立连接",
			}); err != nil {
				klog.Errorf("发送欢迎消息失败: %v", err)
			}
		}

		// 持续读取消息
		for {
			messageType, message, err := conn.ReadMessage()
			if err != nil {
				klog.Errorf("读取消息错误: %v", err)
				return
			}

			if messageType != websocket.TextMessage {
				klog.Warnf("忽略非文本消息: type=%d", messageType)
				continue
			}

			var content interface{}
			if err := json.Unmarshal(message, &content); err != nil {
				content = string(message)
			}
			msg := ws.Message{
				RoomID:  roomID,
				Content: fmt.Sprint(content),
				Extra: map[string]any{
					"type": "text",
				},
			}
			if roomID != -1 {
				msg.Type = ws.MessageTypeGroup
			} else {
				msg.Type = ws.MessageTypePrivate
			}
			switch msg.Type {
			case "private":
				// 私聊消息处理
				msg := ws.Message{
					Type:      ws.MessageTypePrivate,
					From:      userID,
					To:        toUserID,
					Content:   msg.Content,
					Timestamp: time.Now().Unix(),
					Extra:     msg.Extra,
				}

				// 发送私聊消息
				msgBytes, _ := json.Marshal(msg)
				if err := globalManager.SendToUser(msg.To, msgBytes); err != nil {
					klog.Errorf("发送私聊消息失败: %v", err)
					conn.WriteJSON(map[string]interface{}{
						"type":    "error",
						"message": "发送私聊消息失败: " + err.Error(),
					})
				}

				// 将消息保存到数据库
				_, err := rpc.SendPrivateMessageRPC(ctx, &social.SendPrivateMessageRequest{
					SenderId:   userID,
					ReceiverId: msg.To,
					Content:    msg.Content,
				})
				if err != nil {
					klog.Errorf("保存私聊消息失败: %v", err)
				}

			case "group":
				msg := ws.Message{
					Type:      ws.MessageTypeGroup,
					From:      userID,
					RoomID:    msg.RoomID,
					Content:   msg.Content,
					Timestamp: time.Now().Unix(),
					Extra:     msg.Extra,
				}

				// 发送群聊消息
				globalManager.SendToRoom(userID, msg.RoomID, &msg)

				// 将消息保存到数据库
				_, err := rpc.SendChatMessageRPC(ctx, &social.SendChatMessageRequest{
					RoomId:   msg.RoomID,
					SenderId: userID,
					Content:  msg.Content,
				})
				if err != nil {
					klog.Errorf("保存群聊消息失败: %v", err)
				}
			}
		}
	}); err != nil {
		klog.Errorf("升级WebSocket连接失败: %v, 请求头: %s", err, c.Request.Header.String())
		pack.RespError(c, errno.InternalServiceError.WithError(err))
		return
	}
}
