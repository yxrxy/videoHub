// Code generated by hertz generator.

package video

import (
	"context"
	"errors"
	"io"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/yxrxy/videoHub/app/gateway/model/video"
	"github.com/yxrxy/videoHub/app/gateway/pack"
	"github.com/yxrxy/videoHub/app/gateway/rpc"
	"github.com/yxrxy/videoHub/kitex_gen/video"
	"github.com/yxrxy/videoHub/pkg/errno"
)

// Publish .
// @router /api/v1/video/publish [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error

	fileHeader, err := c.FormFile("video_data")
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	title := c.PostForm("title") // 从表单数据中获取标题
	description := c.PostForm("description")

	file, err := fileHeader.Open()
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	defer file.Close()

	videoData, err := io.ReadAll(file)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	err = rpc.PublishVideoRPC(ctx, &video.PublishRequest{
		VideoData:   videoData,
		Title:       title,
		ContentType: fileHeader.Header.Get("Content-Type"),
		Description: &description,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// GetVideoList .
// @router /api/v1/video/list [GET]
func GetVideoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetVideoListRPC(ctx, &video.VideoListRequest{
		UserId:   req.UserID,
		Page:     req.Page,
		Size:     req.Size,
		Category: req.Category,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetHotVideos .
// @router /api/v1/videos/hot [GET]
func GetHotVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.HotVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetHotVideosRPC(ctx, &video.HotVideoRequest{
		Limit:     req.Limit,
		Category:  req.Category,
		LastVisit: req.LastVisit,
		LastLike:  req.LastLike,
		LastId:    req.LastID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// IncrementVisitCount .
// @router /api/v1/video/:video_id/visit [POST]
func IncrementVisitCount(ctx context.Context, c *app.RequestContext) {
	var err error
	videoID := c.Param("video_id")
	if videoID == "" {
		pack.RespError(c, errno.ParamVerifyError.WithError(errors.New("video_id is required")))
		return
	}
	videoIDInt, err := strconv.ParseInt(videoID, 10, 64)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.IncrementVisitCountRPC(ctx, &video.IncrementVisitCountRequest{
		VideoId: videoIDInt,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// IncrementLikeCount .
// @router /api/v1/video/:video_id/like [POST]
func IncrementLikeCount(ctx context.Context, c *app.RequestContext) {
	var err error
	videoID := c.Param("video_id")
	if videoID == "" {
		pack.RespError(c, errno.ParamVerifyError.WithError(errors.New("video_id is required")))
		return
	}
	videoIDInt, err := strconv.ParseInt(videoID, 10, 64)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.IncrementLikeCountRPC(ctx, &video.IncrementLikeCountRequest{
		VideoId: videoIDInt,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// GetVideoDetail .
// @router /api/v1/video/:video_id [GET]
func GetVideoDetail(ctx context.Context, c *app.RequestContext) {
	videoID := c.Param("video_id")
	if videoID == "" {
		pack.RespError(c, errno.ParamVerifyError.WithError(errors.New("video_id is required")))
		return
	}

	videoIDInt, err := strconv.ParseInt(videoID, 10, 64)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetVideoDetailRPC(ctx, &video.DetailRequest{
		VideoId: videoIDInt,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// DeleteVideo .
// @router /api/v1/video/:video_id [DELETE]
func DeleteVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	videoID := c.Param("video_id")
	if videoID == "" {
		pack.RespError(c, errno.ParamVerifyError.WithError(errors.New("video_id is required")))
		return
	}
	videoIDInt, err := strconv.ParseInt(videoID, 10, 64)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.DeleteVideoRPC(ctx, &video.DeleteRequest{
		VideoId: videoIDInt,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// SearchVideo .
// @router /api/v1/video/search [POST]
func SearchVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.SearchVideoRPC(ctx, &video.SearchRequest{
		Keywords: req.Keywords,
		FromDate: req.FromDate,
		ToDate:   req.ToDate,
		Username: req.Username,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}

// SemanticSearch .
// @router /api/v1/video/semantic [POST]
func SemanticSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SemanticSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.SemanticSearchRPC(ctx, &video.SemanticSearchRequest{
		Query:     req.Query,
		PageSize:  req.PageSize,
		PageNum:   req.PageNum,
		Threshold: req.Threshold,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}
